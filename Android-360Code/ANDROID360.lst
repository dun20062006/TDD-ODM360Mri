Interrupt Vectors
    00000 940C 0694 JMP	__start|__text_start
    00012 940C 30BA JMP	_timer2_comp_isr
    00014 940C 30C3 JMP	_timer2_ovf_isr
    0001E 940C 3006 JMP	_timer0_comp_isr
    00024 940C 33D8 JMP	_uart0_rx_isr
    00028 940C 3501 JMP	_uart0_tx_isr
    0002A 940C 31A5 JMP	_adc_isr
    00030 940C 30B9 JMP	_timer1_compc_isr
    00038 940C 318C JMP	_timer3_compc_isr
    0003A 940C 3198 JMP	_timer3_ovf_isr
    0003C 940C 3472 JMP	_uart1_rx_isr
    00040 940C 352A JMP	_uart1_tx_isr

Program Code (text area)
__start|__text_start:
    00694 EFCF      LDI	R28,0xFF
    00695 E1D0      LDI	R29,0x10
    00696 BFCD      OUT	0x3D,R28
    00697 BFDE      OUT	0x3E,R29
    00698 58C0      SUBI	R28,0x80
    00699 40D0      SBCI	R29,0
    0069A EA0A      LDI	R16,0xAA
    0069B 8308      ST	Y,R16
    0069C 2400      CLR	R0
    0069D EEE4      LDI	R30,0xE4
    0069E E0F3      LDI	R31,3
    0069F E018      LDI	R17,0x8
    006A0 3AE8      CPI	R30,0xA8
    006A1 07F1      CPC	R31,R17
    006A2 F011      BEQ	0x06A5
    006A3 9201      ST	Z+,R0
    006A4 CFFB      RJMP	0x06A0
    006A5 8300      ST	Z,R16
    006A6 E4E3      LDI	R30,0x43
    006A7 E0FA      LDI	R31,0xA
    006A8 E0A0      LDI	R26,0
    006A9 E0B1      LDI	R27,1
    006AA E01D      LDI	R17,0xD
    006AB E000      LDI	R16,0
    006AC BF0B      OUT	0x3B,R16
    006AD 32E7      CPI	R30,0x27
    006AE 07F1      CPC	R31,R17
    006AF F021      BEQ	0x06B4
    006B0 95C8      LPM
    006B1 9631      ADIW	R30,1
    006B2 920D      ST	X+,R0
    006B3 CFF9      RJMP	0x06AD
    006B4 940E 31A6 CALL	_main
_exit:
    006B6 CFFF      RJMP	_exit
_delay_ms:
  x                    --> R20
  y                    --> R22
  i                    --> R16
    006B7 940E 4519 CALL	push_xgsetF000
FILE: E:\1.JD_Project\21.Android-360\1.Android-360Code\App\app.c
(0001) #include "includes.h"
(0002) const unsigned int Color[2]={0x8410,0};
(0003) const unsigned int Color1[2]={0xf800,0};
(0004) unsigned char UL_workdate=0;//?????????????
(0005) unsigned char POWER_LEVEL=0;//
(0006) 
(0007) extern void TASK_SendToDwin(void);
(0008) extern void TASK_PROCESSING(void);
(0009) const unsigned int pxy[8][4]=
(0010) {
(0011)   { 76,150,124,174},
(0012)   {138,280,174,304},
(0013)   {187,150,235,174},
(0014)   {247,280,283,304},
(0015)   {296,150,344,174},
(0016)   {115,352,163,376},
(0017)   {260,352,308,376},
(0018)   {370,352,418,376}
(0019) };
(0020) const unsigned char temp_text[2][4]={"OFF\0","ON \0"};
(0021) const unsigned char user_type[4][6]={"NULL \0","Guest\0","User \0","Super\0"};
(0022) void delay_ms(unsigned int i)
(0023) {
(0024)   unsigned int x,y;
(0025)   for(x=0;x<i;x++)
    006B9 2744      CLR	R20
    006BA 2755      CLR	R21
    006BB C00B      RJMP	0x06C7
(0026)   {
(0027)     for(y=0;y<1141;y++); 
    006BC 2766      CLR	R22
    006BD 2777      CLR	R23
    006BE C002      RJMP	0x06C1
    006BF 5F6F      SUBI	R22,0xFF
    006C0 4F7F      SBCI	R23,0xFF
    006C1 3765      CPI	R22,0x75
    006C2 E0E4      LDI	R30,4
    006C3 077E      CPC	R23,R30
    006C4 F3D0      BCS	0x06BF
    006C5 5F4F      SUBI	R20,0xFF
    006C6 4F5F      SBCI	R21,0xFF
    006C7 1740      CP	R20,R16
    006C8 0751      CPC	R21,R17
    006C9 F390      BCS	0x06BC
    006CA 940C 451E JMP	pop_xgsetF000
_DataSynchronization:
  foot_buf             --> Y,+1
    006CC 934A      ST	-Y,R20
    006CD 935A      ST	-Y,R21
(0028)   }
(0029) }
(0030) void DataSynchronization(void)
(0031) {
(0032)   unsigned char foot_buf;
(0033)   static unsigned char count1=0;
(0034)   static unsigned char count2=0;
(0035)   static unsigned char count3=0;
(0036)   
(0037) 
(0038)   TASK_SendToDwin(); //迪文屏串口通讯
    006CE 940E 38C2 CALL	_TASK_SendToDwin
(0039)   TASK_PROCESSING();//参数处理函数
    006D0 940E 3D94 CALL	_TASK_PROCESSING
(0040)   if (MACHINE_STATE.HANDLE_ID==1)
    006D2 9180 089B LDS	R24,MACHINE_STATE
    006D4 3081      CPI	R24,1
    006D5 F411      BNE	0x06D8
(0041)   {
(0042)     dispose_data();//1号手柄数据同步
    006D6 940E 422A CALL	_dispose_data
(0043)   }
(0044)   if (MACHINE_STATE.WORK_STATE==1)//启动
    006D8 9180 089C LDS	R24,MACHINE_STATE+1
    006DA 3081      CPI	R24,1
    006DB F009      BEQ	0x06DD
    006DC C045      RJMP	0x0722
(0045)   {
(0046)     if(MACHINE_STATE.HANDLE_ID==5)//5号爆脂手柄
    006DD 9180 089B LDS	R24,MACHINE_STATE
    006DF 3085      CPI	R24,5
    006E0 F009      BEQ	0x06E2
    006E1 C03F      RJMP	0x0721
(0047)     {        
(0048)      switch (SAVE_FAT_FLAME)
    006E2 9140 084B LDS	R20,SAVE_FAT_FLAME
    006E4 2755      CLR	R21
    006E5 3040      CPI	R20,0
    006E6 0745      CPC	R20,R21
    006E7 F0A9      BEQ	0x06FD
    006E8 3041      CPI	R20,1
    006E9 E0E0      LDI	R30,0
    006EA 075E      CPC	R21,R30
    006EB F0B9      BEQ	0x0703
    006EC 3042      CPI	R20,2
    006ED E0E0      LDI	R30,0
    006EE 075E      CPC	R21,R30
    006EF F0C9      BEQ	0x0709
    006F0 3043      CPI	R20,3
    006F1 E0E0      LDI	R30,0
    006F2 075E      CPC	R21,R30
    006F3 F0D9      BEQ	0x070F
    006F4 3044      CPI	R20,4
    006F5 E0E0      LDI	R30,0
    006F6 075E      CPC	R21,R30
    006F7 F0E9      BEQ	0x0715
    006F8 3045      CPI	R20,5
    006F9 E0E0      LDI	R30,0
    006FA 075E      CPC	R21,R30
    006FB F0F9      BEQ	0x071B
    006FC C025      RJMP	0x0722
(0049)      {
(0050)       case 0:POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_OFF; break;
    006FD 9AD9      SBI	0x1B,1
    006FE 9ADA      SBI	0x1B,2
    006FF 9ADB      SBI	0x1B,3
    00700 9ADC      SBI	0x1B,4
    00701 9ADD      SBI	0x1B,5
    00702 C01F      RJMP	0x0722
(0051)       case 1:POWER1_ON;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_OFF; break;
    00703 98D9      CBI	0x1B,1
    00704 9ADA      SBI	0x1B,2
    00705 9ADB      SBI	0x1B,3
    00706 9ADC      SBI	0x1B,4
    00707 9ADD      SBI	0x1B,5
    00708 C019      RJMP	0x0722
(0052)       case 2:POWER1_OFF;POWER2_ON;POWER3_OFF;POWER4_OFF;POWER5_OFF; break;
    00709 9AD9      SBI	0x1B,1
    0070A 98DA      CBI	0x1B,2
    0070B 9ADB      SBI	0x1B,3
    0070C 9ADC      SBI	0x1B,4
    0070D 9ADD      SBI	0x1B,5
    0070E C013      RJMP	0x0722
(0053)       case 3:POWER1_OFF;POWER2_OFF;POWER3_ON;POWER4_OFF;POWER5_OFF;  break;   
    0070F 9AD9      SBI	0x1B,1
    00710 9ADA      SBI	0x1B,2
    00711 98DB      CBI	0x1B,3
    00712 9ADC      SBI	0x1B,4
    00713 9ADD      SBI	0x1B,5
    00714 C00D      RJMP	0x0722
(0054)       case 4:POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_ON;POWER5_OFF;  break;
    00715 9AD9      SBI	0x1B,1
    00716 9ADA      SBI	0x1B,2
    00717 9ADB      SBI	0x1B,3
    00718 98DC      CBI	0x1B,4
    00719 9ADD      SBI	0x1B,5
    0071A C007      RJMP	0x0722
(0055)       case 5:POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_ON;  break;
    0071B 9AD9      SBI	0x1B,1
    0071C 9ADA      SBI	0x1B,2
    0071D 9ADB      SBI	0x1B,3
    0071E 9ADC      SBI	0x1B,4
    0071F 98DD      CBI	0x1B,5
(0056)       default:
(0057)       break;
(0058)      }
(0059)     }
    00720 C001      RJMP	0x0722
(0060)     else
(0061)     {
(0062)       DisWork();
    00721 D331      RCALL	_DisWork
(0063)     }
(0064)   }
(0065)   if (MACHINE_STATE.WORK_STATE==0)//停止
    00722 9020 089C LDS	R2,MACHINE_STATE+1
    00724 2022      TST	R2
    00725 F449      BNE	0x072F
(0066)   {
(0067)     if(MACHINE_STATE.HANDLE_ID==5)//5号爆脂手柄
    00726 9180 089B LDS	R24,MACHINE_STATE
    00728 3085      CPI	R24,5
    00729 F429      BNE	0x072F
(0068)     {        
(0069)     POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_OFF;
    0072A 9AD9      SBI	0x1B,1
    0072B 9ADA      SBI	0x1B,2
    0072C 9ADB      SBI	0x1B,3
    0072D 9ADC      SBI	0x1B,4
    0072E 9ADD      SBI	0x1B,5
(0070)     }
(0071) 
(0072)   }
    0072F 9159      LD	R21,Y+
    00730 9149      LD	R20,Y+
    00731 9508      RET
_ItoA:
  i                    --> R22
  Text                 --> R20
  x                    --> R10
    00732 940E 4523 CALL	push_xgsetF00C
    00734 01A9      MOVW	R20,R18
    00735 0158      MOVW	R10,R16
(0073) 
(0074) }
(0075) 
(0076) 
(0077) void ItoA(unsigned int x,unsigned char *Text)
(0078) {
(0079)   unsigned int i=10000;
    00736 E160      LDI	R22,0x10
    00737 E277      LDI	R23,0x27
    00738 C015      RJMP	0x074E
(0080)   while(i>0)
(0081)   {
(0082)    *Text=x/i+'0';
    00739 019B      MOVW	R18,R22
    0073A 0185      MOVW	R16,R10
    0073B 940E 4409 CALL	div16u
    0073D 01C8      MOVW	R24,R16
    0073E 96C0      ADIW	R24,0x30
    0073F 01FA      MOVW	R30,R20
    00740 8380      ST	Z,R24
(0083)    x%=i;
    00741 019B      MOVW	R18,R22
    00742 0185      MOVW	R16,R10
    00743 940E 4407 CALL	mod16u
    00745 0158      MOVW	R10,R16
(0084)    i=i/10;
    00746 E02A      LDI	R18,0xA
    00747 E030      LDI	R19,0
    00748 018B      MOVW	R16,R22
    00749 940E 4409 CALL	div16u
    0074B 01B8      MOVW	R22,R16
(0085)    Text++; 
    0074C 5F4F      SUBI	R20,0xFF
    0074D 4F5F      SBCI	R21,0xFF
    0074E 3060      CPI	R22,0
    0074F 0767      CPC	R22,R23
    00750 F741      BNE	0x0739
(0086)   }
(0087)    *Text='\0';
    00751 2422      CLR	R2
    00752 01FA      MOVW	R30,R20
    00753 8220      ST	Z,R2
    00754 940C 452A JMP	pop_xgsetF00C
_LtoA:
  i                    --> Y,+0
  Text                 --> R10
  x                    --> Y,+10
    00756 940E 43E4 CALL	push_arg4
    00758 940E 4523 CALL	push_xgsetF00C
    0075A 9724      SBIW	R28,4
    0075B 84AE      LDD	R10,Y+14
    0075C 84BF      LDD	R11,Y+15
(0088) }
(0089) void LtoA(unsigned long x,unsigned char *Text)
(0090) {
(0091)   unsigned long i=1000000;
    0075D E480      LDI	R24,0x40
    0075E 8388      ST	Y,R24
    0075F E482      LDI	R24,0x42
    00760 8389      STD	Y+1,R24
    00761 E08F      LDI	R24,0xF
    00762 838A      STD	Y+2,R24
    00763 E080      LDI	R24,0
    00764 838B      STD	Y+3,R24
(0092)   x%=10000000;
    00765 E840      LDI	R20,0x80
    00766 E956      LDI	R21,0x96
    00767 E968      LDI	R22,0x98
    00768 E070      LDI	R23,0
    00769 850A      LDD	R16,Y+10
    0076A 851B      LDD	R17,Y+11
    0076B 852C      LDD	R18,Y+12
    0076C 853D      LDD	R19,Y+13
    0076D 937A      ST	-Y,R23
    0076E 936A      ST	-Y,R22
    0076F 935A      ST	-Y,R21
    00770 934A      ST	-Y,R20
    00771 940E 4425 CALL	mod32u
    00773 870A      STD	Y+10,R16
    00774 871B      STD	Y+11,R17
    00775 872C      STD	Y+12,R18
    00776 873D      STD	Y+13,R19
    00777 C041      RJMP	0x07B9
(0093)   while(i>0)
(0094)   {
(0095)    *Text=x/i+'0';
    00778 8028      LD	R2,Y
    00779 8039      LDD	R3,Y+1
    0077A 804A      LDD	R4,Y+2
    0077B 805B      LDD	R5,Y+3
    0077C 850A      LDD	R16,Y+10
    0077D 851B      LDD	R17,Y+11
    0077E 852C      LDD	R18,Y+12
    0077F 853D      LDD	R19,Y+13
    00780 925A      ST	-Y,R5
    00781 924A      ST	-Y,R4
    00782 923A      ST	-Y,R3
    00783 922A      ST	-Y,R2
    00784 940E 4423 CALL	div32u
    00786 E340      LDI	R20,0x30
    00787 E050      LDI	R21,0
    00788 E060      LDI	R22,0
    00789 E070      LDI	R23,0
    0078A 0118      MOVW	R2,R16
    0078B 0129      MOVW	R4,R18
    0078C 0E24      ADD	R2,R20
    0078D 1E35      ADC	R3,R21
    0078E 1E46      ADC	R4,R22
    0078F 1E57      ADC	R5,R23
    00790 01F5      MOVW	R30,R10
    00791 8220      ST	Z,R2
(0096)    x%=i;
    00792 8028      LD	R2,Y
    00793 8039      LDD	R3,Y+1
    00794 804A      LDD	R4,Y+2
    00795 805B      LDD	R5,Y+3
    00796 850A      LDD	R16,Y+10
    00797 851B      LDD	R17,Y+11
    00798 852C      LDD	R18,Y+12
    00799 853D      LDD	R19,Y+13
    0079A 925A      ST	-Y,R5
    0079B 924A      ST	-Y,R4
    0079C 923A      ST	-Y,R3
    0079D 922A      ST	-Y,R2
    0079E 940E 4425 CALL	mod32u
    007A0 870A      STD	Y+10,R16
    007A1 871B      STD	Y+11,R17
    007A2 872C      STD	Y+12,R18
    007A3 873D      STD	Y+13,R19
(0097)    i=i/10;
    007A4 E04A      LDI	R20,0xA
    007A5 E050      LDI	R21,0
    007A6 E060      LDI	R22,0
    007A7 E070      LDI	R23,0
    007A8 8108      LD	R16,Y
    007A9 8119      LDD	R17,Y+1
    007AA 812A      LDD	R18,Y+2
    007AB 813B      LDD	R19,Y+3
    007AC 937A      ST	-Y,R23
    007AD 936A      ST	-Y,R22
    007AE 935A      ST	-Y,R21
    007AF 934A      ST	-Y,R20
    007B0 940E 4423 CALL	div32u
    007B2 8308      ST	Y,R16
    007B3 8319      STD	Y+1,R17
    007B4 832A      STD	Y+2,R18
    007B5 833B      STD	Y+3,R19
(0098)    Text++; 
    007B6 01C5      MOVW	R24,R10
    007B7 9601      ADIW	R24,1
    007B8 015C      MOVW	R10,R24
    007B9 8028      LD	R2,Y
    007BA 8039      LDD	R3,Y+1
    007BB 804A      LDD	R4,Y+2
    007BC 805B      LDD	R5,Y+3
    007BD 9488      BCLR	0
    007BE 2022      TST	R2
    007BF 0432      CPC	R3,R2
    007C0 0442      CPC	R4,R2
    007C1 0452      CPC	R5,R2
    007C2 F009      BEQ	0x07C4
    007C3 CFB4      RJMP	0x0778
(0099)   }
(0100)    *Text='\0';
    007C4 2422      CLR	R2
    007C5 01F5      MOVW	R30,R10
    007C6 8220      ST	Z,R2
    007C7 9624      ADIW	R28,4
    007C8 940E 452A CALL	pop_xgsetF00C
    007CA 9624      ADIW	R28,4
    007CB 9508      RET
_DisCount:
    007CC 92AA      ST	-Y,R10
    007CD 92BA      ST	-Y,R11
    007CE 972C      SBIW	R28,0xC
(0101) }
(0102) 
(0103) void DisCount(void)
(0104) {
(0105)   static unsigned char time=0;
(0106)   if(DisPage!=WORKPAGE) return;
    007CF 9180 0114 LDS	R24,DisPage
    007D1 3185      CPI	R24,0x15
    007D2 F009      BEQ	0x07D4
    007D3 C0B9      RJMP	0x088D
(0107)   if(time<60)
    007D4 9180 0105 LDS	R24,app.c:time
    007D6 338C      CPI	R24,0x3C
    007D7 F458      BCC	0x07E3
(0108)   {
(0109)     if(Work==1) time++;
    007D8 9180 0110 LDS	R24,Work
    007DA 3081      CPI	R24,1
    007DB F009      BEQ	0x07DD
    007DC C040      RJMP	0x081D
    007DD 9180 0105 LDS	R24,app.c:time
    007DF 5F8F      SUBI	R24,0xFF
    007E0 9380 0105 STS	app.c:time,R24
(0110)   }
    007E2 C03A      RJMP	0x081D
(0111)   else
(0112)   {
(0113)     time=0;
    007E3 2422      CLR	R2
    007E4 9220 0105 STS	app.c:time,R2
(0114) 	Total_counter+=1;
    007E6 E081      LDI	R24,1
    007E7 E090      LDI	R25,0
    007E8 E0A0      LDI	R26,0
    007E9 E0B0      LDI	R27,0
    007EA 9040 07D5 LDS	R4,Total_counter+2
    007EC 9050 07D6 LDS	R5,Total_counter+3
    007EE 9020 07D3 LDS	R2,Total_counter
    007F0 9030 07D4 LDS	R3,Total_counter+1
    007F2 0E28      ADD	R2,R24
    007F3 1E39      ADC	R3,R25
    007F4 1E4A      ADC	R4,R26
    007F5 1E5B      ADC	R5,R27
    007F6 9230 07D4 STS	Total_counter+1,R3
    007F8 9220 07D3 STS	Total_counter,R2
    007FA 9250 07D6 STS	Total_counter+3,R5
    007FC 9240 07D5 STS	Total_counter+2,R4
(0115) 	//EEPROMWriteBytes(CounterAddr+hand[Intensity[8]]*4,&Total_counter,4);//Total_counter???u32????????????????????????????????????????????????????????
(0116)     if(CardSet==0) Work_counter+=1;
    007FE 9020 0393 LDS	R2,CardSet
    00800 2022      TST	R2
    00801 F451      BNE	0x080C
    00802 9180 07D1 LDS	R24,Work_counter
    00804 9190 07D2 LDS	R25,Work_counter+1
    00806 9601      ADIW	R24,1
    00807 9390 07D2 STS	Work_counter+1,R25
    00809 9380 07D1 STS	Work_counter,R24
    0080B C011      RJMP	0x081D
(0117) 	else if(Card_Counter>0)
    0080C 9020 039B LDS	R2,Card_Counter
    0080E 9030 039C LDS	R3,Card_Counter+1
    00810 2022      TST	R2
    00811 F411      BNE	0x0814
    00812 2033      TST	R3
    00813 F049      BEQ	0x081D
(0118) 	{
(0119) 	  Card_Counter-=1;
    00814 01C1      MOVW	R24,R2
    00815 9701      SBIW	R24,1
    00816 9390 039C STS	Card_Counter+1,R25
    00818 9380 039B STS	Card_Counter,R24
(0120) 	  Card_Command=1;
    0081A E081      LDI	R24,1
    0081B 9380 0396 STS	Card_Command,R24
(0121) 	}
(0122)   }
(0123)   if(CardSet==0) ItoA(Work_counter,Text1); //??????????
    0081D 9020 0393 LDS	R2,CardSet
    0081F 2022      TST	R2
    00820 F441      BNE	0x0829
    00821 EE2A      LDI	R18,0xEA
    00822 E033      LDI	R19,3
    00823 9100 07D1 LDS	R16,Work_counter
    00825 9110 07D2 LDS	R17,Work_counter+1
    00827 DF0A      RCALL	_ItoA
    00828 C049      RJMP	0x0872
(0124)   else 
(0125)   {
(0126)    ItoA(Card_Counter,Text1);
    00829 EE2A      LDI	R18,0xEA
    0082A E033      LDI	R19,3
    0082B 9100 039B LDS	R16,Card_Counter
    0082D 9110 039C LDS	R17,Card_Counter+1
    0082F DF02      RCALL	_ItoA
(0127)    if((Card_Counter==0)&&(Work>0))
    00830 9020 039B LDS	R2,Card_Counter
    00832 9030 039C LDS	R3,Card_Counter+1
    00834 2022      TST	R2
    00835 F009      BEQ	0x0837
    00836 C03B      RJMP	0x0872
    00837 2033      TST	R3
    00838 F009      BEQ	0x083A
    00839 C038      RJMP	0x0872
    0083A E080      LDI	R24,0
    0083B 9020 0110 LDS	R2,Work
    0083D 1582      CP	R24,R2
    0083E F008      BCS	0x0840
    0083F C032      RJMP	0x0872
(0128)    {
(0129)      //Work=0;
(0130) 	 BitSet(PORTG,4);
    00840 9180 0065 LDS	R24,0x65
    00842 6180      ORI	R24,0x10
    00843 9380 0065 STS	0x65,R24
(0131) 	 BitSet(PORTG,3);
    00845 9180 0065 LDS	R24,0x65
    00847 6088      ORI	R24,0x8
    00848 9380 0065 STS	0x65,R24
(0132)    cut_pic(0,28,Work_Key[18].XS,Work_Key[18].YS,Work_Key[18].XE,Work_Key[18].YE,Work_Key[18].XS,Work_Key[18].YS);
    0084A EBEE      LDI	R30,0xBE
    0084B E0F5      LDI	R31,5
    0084C 9027      ELPM	R2,Z+
    0084D 9036      ELPM	R3,Z
    0084E 863B      STD	Y+11,R3
    0084F 862A      STD	Y+10,R2
    00850 EBEC      LDI	R30,0xBC
    00851 E0F5      LDI	R31,5
    00852 9027      ELPM	R2,Z+
    00853 9036      ELPM	R3,Z
    00854 8639      STD	Y+9,R3
    00855 8628      STD	Y+8,R2
    00856 ECE2      LDI	R30,0xC2
    00857 E0F5      LDI	R31,5
    00858 9027      ELPM	R2,Z+
    00859 9036      ELPM	R3,Z
    0085A 823F      STD	Y+7,R3
    0085B 822E      STD	Y+6,R2
    0085C ECE0      LDI	R30,0xC0
    0085D E0F5      LDI	R31,5
    0085E 9027      ELPM	R2,Z+
    0085F 9036      ELPM	R3,Z
    00860 823D      STD	Y+5,R3
    00861 822C      STD	Y+4,R2
    00862 EBEE      LDI	R30,0xBE
    00863 E0F5      LDI	R31,5
    00864 9027      ELPM	R2,Z+
    00865 9036      ELPM	R3,Z
    00866 823B      STD	Y+3,R3
    00867 822A      STD	Y+2,R2
    00868 EBEC      LDI	R30,0xBC
    00869 E0F5      LDI	R31,5
    0086A 9027      ELPM	R2,Z+
    0086B 9036      ELPM	R3,Z
    0086C 8239      STD	Y+1,R3
    0086D 8228      ST	Y,R2
    0086E E12C      LDI	R18,0x1C
    0086F 2700      CLR	R16
    00870 940E 3F14 CALL	_cut_pic
(0133)    }
(0134)   }
(0135)   if(WorktimeSet == 1)
    00872 9180 0118 LDS	R24,WorktimeSet
    00874 3081      CPI	R24,1
    00875 F4B9      BNE	0x088D
(0136)   print_texts(520,12,0,0xC1,2,0,0xDEDB,Text1);
    00876 EE8A      LDI	R24,0xEA
    00877 E093      LDI	R25,3
    00878 879B      STD	Y+11,R25
    00879 878A      STD	Y+10,R24
    0087A ED8B      LDI	R24,0xDB
    0087B ED9E      LDI	R25,0xDE
    0087C 8799      STD	Y+9,R25
    0087D 8788      STD	Y+8,R24
    0087E 2422      CLR	R2
    0087F 2433      CLR	R3
    00880 823F      STD	Y+7,R3
    00881 822E      STD	Y+6,R2
    00882 E082      LDI	R24,2
    00883 838C      STD	Y+4,R24
    00884 EC81      LDI	R24,0xC1
    00885 838A      STD	Y+2,R24
    00886 8228      ST	Y,R2
    00887 E02C      LDI	R18,0xC
    00888 E030      LDI	R19,0
    00889 E008      LDI	R16,0x8
    0088A E012      LDI	R17,2
    0088B 940E 3F08 CALL	_print_texts
    0088D 962C      ADIW	R28,0xC
    0088E 90B9      LD	R11,Y+
    0088F 90A9      LD	R10,Y+
    00890 9508      RET
(0137) }
(0138) void Dis_pressure(void)
(0139) {
_Dis_pressure:
    00891 9508      RET
_DisFunctionKey:
  i                    --> Y,+13
  y                    --> R12
  x                    --> R10
  ys                   --> R22
  xs                   --> R20
  CMD                  --> R10
  K                    --> R14
    00892 940E 4504 CALL	push_xgsetF0FC
    00894 2EA2      MOV	R10,R18
    00895 2EE0      MOV	R14,R16
    00896 972C      SBIW	R28,0xC
(0140)  /* unsigned char pressure;//???
(0141)   unsigned int temperature; //????
(0142)   READ_P_T(&pressure,&temperature);
(0143)   Text1[0]=pressure/100+'0';
(0144)   Text1[1]=(pressure%100)/10+'0';
(0145)   Text1[2]=pressure%10+'0';
(0146)   Text1[3]='\0';
(0147)   print_texts(610,12,0,0xC1,2,0,0xDEDB,Text1);
(0148)   
(0149)   Text1[0]=water/10+'0';
(0150)   Text1[1]=water%10+'0';
(0151)   Text1[2]='K';
(0152)   Text1[3]='P';
(0153)   Text1[4]='a';
(0154)   Text1[5]='\0';*/
(0155)  // if(PressureSet == 1)
(0156)  // print_texts(610,12,0,0xC1,2,0,0xDEDB,Text1);
(0157) }
(0158) 
(0159) 
(0160) 
(0161) void DisFunctionKey(unsigned char K,unsigned char CMD)
(0162) {
(0163)   unsigned int x,y,xs,ys,i;
(0164)   xs=CMD*100;
    00897 E604      LDI	R16,0x64
    00898 2D1A      MOV	R17,R10
    00899 0301      MULSU	R16,R17
    0089A 01A0      MOVW	R20,R0
(0165)   ys=Function_Tab[K]*100;
    0089B EE80      LDI	R24,0xE0
    0089C E097      LDI	R25,7
    0089D 2DEE      MOV	R30,R14
    0089E 27FF      CLR	R31
    0089F 0FE8      ADD	R30,R24
    008A0 1FF9      ADC	R31,R25
    008A1 8110      LD	R17,Z
    008A2 0301      MULSU	R16,R17
    008A3 01B0      MOVW	R22,R0
(0166)   x=(K/3)*145+30;
    008A4 E013      LDI	R17,3
    008A5 2D0E      MOV	R16,R14
    008A6 940E 448F CALL	div8u
    008A8 E981      LDI	R24,0x91
    008A9 9F80      MUL	R24,R16
    008AA 01C0      MOVW	R24,R0
    008AB 964E      ADIW	R24,0x1E
    008AC 015C      MOVW	R10,R24
(0167)   y=(K%3)*175+65;
    008AD E013      LDI	R17,3
    008AE 2D0E      MOV	R16,R14
    008AF 940E 448D CALL	mod8u
    008B1 EA8F      LDI	R24,0xAF
    008B2 9F80      MUL	R24,R16
    008B3 01C0      MOVW	R24,R0
    008B4 5B8F      SUBI	R24,0xBF
    008B5 4F9F      SBCI	R25,0xFF
    008B6 016C      MOVW	R12,R24
(0168)   cut_pic(1,10,xs,ys,xs+99,ys+99,x,y);
    008B7 86DB      STD	Y+11,R13
    008B8 86CA      STD	Y+10,R12
    008B9 86B9      STD	Y+9,R11
    008BA 86A8      STD	Y+8,R10
    008BB 01CB      MOVW	R24,R22
    008BC 598D      SUBI	R24,0x9D
    008BD 4F9F      SBCI	R25,0xFF
    008BE 839F      STD	Y+7,R25
    008BF 838E      STD	Y+6,R24
    008C0 01CA      MOVW	R24,R20
    008C1 598D      SUBI	R24,0x9D
    008C2 4F9F      SBCI	R25,0xFF
    008C3 839D      STD	Y+5,R25
    008C4 838C      STD	Y+4,R24
    008C5 837B      STD	Y+3,R23
    008C6 836A      STD	Y+2,R22
    008C7 8359      STD	Y+1,R21
    008C8 8348      ST	Y,R20
    008C9 E02A      LDI	R18,0xA
    008CA E001      LDI	R16,1
    008CB 940E 3F14 CALL	_cut_pic
(0169)   xs=(Function_Tab[K]%5)*130;
    008CD EE80      LDI	R24,0xE0
    008CE E097      LDI	R25,7
    008CF 2DEE      MOV	R30,R14
    008D0 27FF      CLR	R31
    008D1 0FE8      ADD	R30,R24
    008D2 1FF9      ADC	R31,R25
    008D3 8100      LD	R16,Z
    008D4 E015      LDI	R17,5
    008D5 940E 448D CALL	mod8u
    008D7 E882      LDI	R24,0x82
    008D8 9F80      MUL	R24,R16
    008D9 01A0      MOVW	R20,R0
(0170)   ys=Language*37;
    008DA 9110 0122 LDS	R17,Language
    008DC E205      LDI	R16,0x25
    008DD 0301      MULSU	R16,R17
    008DE 01B0      MOVW	R22,R0
(0171)   x=(K/3)*145+15;
    008DF E013      LDI	R17,3
    008E0 2D0E      MOV	R16,R14
    008E1 940E 448F CALL	div8u
    008E3 E981      LDI	R24,0x91
    008E4 9F80      MUL	R24,R16
    008E5 01C0      MOVW	R24,R0
    008E6 960F      ADIW	R24,0xF
    008E7 015C      MOVW	R10,R24
(0172)   y=(K%3)*175+175;
    008E8 E013      LDI	R17,3
    008E9 2D0E      MOV	R16,R14
    008EA 940E 448D CALL	mod8u
    008EC EA8F      LDI	R24,0xAF
    008ED 9F80      MUL	R24,R16
    008EE 01C0      MOVW	R24,R0
    008EF 5581      SUBI	R24,0x51
    008F0 4F9F      SBCI	R25,0xFF
    008F1 016C      MOVW	R12,R24
(0173)   cut_pic(1,11,xs,ys,xs+130,ys+36,x,y);
    008F2 86DB      STD	Y+11,R13
    008F3 86CA      STD	Y+10,R12
    008F4 86B9      STD	Y+9,R11
    008F5 86A8      STD	Y+8,R10
    008F6 01CB      MOVW	R24,R22
    008F7 9684      ADIW	R24,0x24
    008F8 839F      STD	Y+7,R25
    008F9 838E      STD	Y+6,R24
    008FA 01CA      MOVW	R24,R20
    008FB 578E      SUBI	R24,0x7E
    008FC 4F9F      SBCI	R25,0xFF
    008FD 839D      STD	Y+5,R25
    008FE 838C      STD	Y+4,R24
    008FF 837B      STD	Y+3,R23
    00900 836A      STD	Y+2,R22
    00901 8359      STD	Y+1,R21
    00902 8348      ST	Y,R20
    00903 E02B      LDI	R18,0xB
    00904 E001      LDI	R16,1
    00905 940E 3F14 CALL	_cut_pic
    00907 962C      ADIW	R28,0xC
    00908 940C 44F9 JMP	pop_xgsetF0FC
_DisWelcome:
  y                    --> Y,+13
  x                    --> Y,+13
  i                    --> R20
    0090A 934A      ST	-Y,R20
    0090B 935A      ST	-Y,R21
    0090C 972C      SBIW	R28,0xC
(0174) }
(0175) void DisWelcome(void)
(0176) {
(0177)   unsigned int x,y,i;
(0178)   dis_pic(BackSet);//背景图片设置
    0090D 9100 0116 LDS	R16,BackSet
    0090F 940E 3F13 CALL	_dis_pic
(0179)   for(i=0;i<Function_Count;i++)
    00911 2744      CLR	R20
    00912 2755      CLR	R21
    00913 C005      RJMP	0x0919
(0180)   {
(0181)     DisFunctionKey(i,0);
    00914 2722      CLR	R18
    00915 2F04      MOV	R16,R20
    00916 DF7B      RCALL	_DisFunctionKey
    00917 5F4F      SUBI	R20,0xFF
    00918 4F5F      SBCI	R21,0xFF
    00919 9020 011A LDS	R2,Function_Count
    0091B 2433      CLR	R3
    0091C 1542      CP	R20,R2
    0091D 0553      CPC	R21,R3
    0091E F3A8      BCS	0x0914
(0182)   }
(0183)   cut_pic(1,10,0,400,0+99,400+99,175,240);// ???????汛????完??
    0091F EF80      LDI	R24,0xF0
    00920 E090      LDI	R25,0
    00921 879B      STD	Y+11,R25
    00922 878A      STD	Y+10,R24
    00923 EA8F      LDI	R24,0xAF
    00924 8799      STD	Y+9,R25
    00925 8788      STD	Y+8,R24
    00926 EF83      LDI	R24,0xF3
    00927 E091      LDI	R25,1
    00928 839F      STD	Y+7,R25
    00929 838E      STD	Y+6,R24
    0092A E683      LDI	R24,0x63
    0092B E090      LDI	R25,0
    0092C 839D      STD	Y+5,R25
    0092D 838C      STD	Y+4,R24
    0092E E980      LDI	R24,0x90
    0092F E091      LDI	R25,1
    00930 839B      STD	Y+3,R25
    00931 838A      STD	Y+2,R24
    00932 2422      CLR	R2
    00933 8239      STD	Y+1,R3
    00934 8228      ST	Y,R2
    00935 E02A      LDI	R18,0xA
    00936 E001      LDI	R16,1
    00937 940E 3F14 CALL	_cut_pic
(0184)   if(ClockSet==TRUE)
    00939 9180 0121 LDS	R24,ClockSet
    0093B 3081      CPI	R24,1
    0093C F489      BNE	0x094E
(0185)   clock_on(ClockSet,3,0,700,10);
    0093D E08A      LDI	R24,0xA
    0093E E090      LDI	R25,0
    0093F 839D      STD	Y+5,R25
    00940 838C      STD	Y+4,R24
    00941 EB8C      LDI	R24,0xBC
    00942 E092      LDI	R25,2
    00943 839B      STD	Y+3,R25
    00944 838A      STD	Y+2,R24
    00945 2422      CLR	R2
    00946 2433      CLR	R3
    00947 8239      STD	Y+1,R3
    00948 8228      ST	Y,R2
    00949 E023      LDI	R18,3
    0094A 9100 0121 LDS	R16,ClockSet
    0094C 940E 3F42 CALL	_clock_on
    0094E 962C      ADIW	R28,0xC
    0094F 9159      LD	R21,Y+
    00950 9149      LD	R20,Y+
    00951 9508      RET
_DisIntensity:
  xe                   --> R22
  xs                   --> R20
  x                    --> R10
  ID                   --> R10
    00952 940E 4523 CALL	push_xgsetF00C
    00954 2EA0      MOV	R10,R16
    00955 972C      SBIW	R28,0xC
(0186) }
(0187) void DisIntensity(unsigned char ID)
(0188) {
(0189)   unsigned int x,xs,xe;
(0190)   //xs=Intensity[ID];
(0191)   xs=xs*50;
    00956 E302      LDI	R16,0x32
    00957 E010      LDI	R17,0
    00958 019A      MOVW	R18,R20
    00959 940E 44A5 CALL	empy16s
    0095B 01A8      MOVW	R20,R16
(0192)   xe=xs+49;
    0095C 01BA      MOVW	R22,R20
    0095D 5C6F      SUBI	R22,0xCF
    0095E 4F7F      SBCI	R23,0xFF
(0193)   x=ID;
    0095F 24BB      CLR	R11
(0194)   x=x*112;
    00960 E700      LDI	R16,0x70
    00961 E010      LDI	R17,0
    00962 0195      MOVW	R18,R10
    00963 940E 44A5 CALL	empy16s
    00965 0158      MOVW	R10,R16
(0195)   x=x+44;
    00966 01C5      MOVW	R24,R10
    00967 968C      ADIW	R24,0x2C
    00968 015C      MOVW	R10,R24
(0196)   cut_pic(0,32,xs,0,xe,289,x,50);
    00969 E382      LDI	R24,0x32
    0096A E090      LDI	R25,0
    0096B 879B      STD	Y+11,R25
    0096C 878A      STD	Y+10,R24
    0096D 86B9      STD	Y+9,R11
    0096E 86A8      STD	Y+8,R10
    0096F E281      LDI	R24,0x21
    00970 E091      LDI	R25,1
    00971 839F      STD	Y+7,R25
    00972 838E      STD	Y+6,R24
    00973 837D      STD	Y+5,R23
    00974 836C      STD	Y+4,R22
    00975 2422      CLR	R2
    00976 2433      CLR	R3
    00977 823B      STD	Y+3,R3
    00978 822A      STD	Y+2,R2
    00979 8359      STD	Y+1,R21
    0097A 8348      ST	Y,R20
    0097B E220      LDI	R18,0x20
    0097C 2700      CLR	R16
    0097D 940E 3F14 CALL	_cut_pic
    0097F 962C      ADIW	R28,0xC
    00980 940C 452A JMP	pop_xgsetF00C
(0197)   //cut_pic(0,32,Intensity[ID]*50,0,49+Intensity[ID]*50,289,44+ID*112,50);
(0198) }
(0199) void HandpieceSet(void)//射频选通  负压选通 H
(0200) {
(0201)   //cut_pic(0,28+Intensity[8],0,390,260,599,0,390);
(0202)   PORTB|=0x3C; 
_HandpieceSet:
    00982 B388      IN	R24,0x18
    00983 638C      ORI	R24,0x3C
    00984 BB88      OUT	0x18,R24
(0203)   PORTB&=~(0x04<<Intensity[8]);
    00985 9110 03BB LDS	R17,Intensity+8
    00987 E004      LDI	R16,4
    00988 940E 4588 CALL	lsl8
    0098A 2E20      MOV	R2,R16
    0098B 9420      COM	R2
    0098C B238      IN	R3,0x18
    0098D 2032      AND	R3,R2
    0098E BA38      OUT	0x18,R3
(0204)   PORTC|=0xF0; 
    0098F B385      IN	R24,0x15
    00990 6F80      ORI	R24,0xF0
    00991 BB85      OUT	0x15,R24
(0205)   PORTC&=~(0x10<<Intensity[8]);
    00992 9110 03BB LDS	R17,Intensity+8
    00994 E100      LDI	R16,0x10
    00995 940E 4588 CALL	lsl8
    00997 2E20      MOV	R2,R16
    00998 9420      COM	R2
    00999 B235      IN	R3,0x15
    0099A 2032      AND	R3,R2
    0099B BA35      OUT	0x15,R3
    0099C 9508      RET
_ModeSet:
  buff                 --> Y,+0
  i                    --> R16
    0099D 9729      SBIW	R28,0x9
(0206) }
(0207) void ModeSet(void)//电机转向 H
(0208) {
(0209)   unsigned char buff[9];
(0210)   unsigned char i;
(0211)   PORTE|=0x7C;
    0099E B183      IN	R24,0x03
    0099F 678C      ORI	R24,0x7C
    009A0 B983      OUT	0x03,R24
(0212)   if(Intensity[7]==0) {PORTE&=0xCB;for(i = 0; i < 8; i++){buff[i]=0;}buff[1]=1;}
    009A1 9020 03BA LDS	R2,Intensity+7
    009A3 2022      TST	R2
    009A4 F491      BNE	0x09B7
    009A5 B183      IN	R24,0x03
    009A6 7C8B      ANDI	R24,0xCB
    009A7 B983      OUT	0x03,R24
    009A8 2700      CLR	R16
    009A9 C008      RJMP	0x09B2
    009AA 01CE      MOVW	R24,R28
    009AB 2FE0      MOV	R30,R16
    009AC 27FF      CLR	R31
    009AD 0FE8      ADD	R30,R24
    009AE 1FF9      ADC	R31,R25
    009AF 2422      CLR	R2
    009B0 8220      ST	Z,R2
    009B1 9503      INC	R16
    009B2 3008      CPI	R16,0x8
    009B3 F3B0      BCS	0x09AA
    009B4 E081      LDI	R24,1
    009B5 8389      STD	Y+1,R24
    009B6 C041      RJMP	0x09F8
(0213)   else if(Intensity[7]==1) {PORTE&=0x97;for(i = 0; i < 8; i++){buff[i]=0;}buff[3]=1;}
    009B7 9180 03BA LDS	R24,Intensity+7
    009B9 3081      CPI	R24,1
    009BA F491      BNE	0x09CD
    009BB B183      IN	R24,0x03
    009BC 7987      ANDI	R24,0x97
    009BD B983      OUT	0x03,R24
    009BE 2700      CLR	R16
    009BF C008      RJMP	0x09C8
    009C0 01CE      MOVW	R24,R28
    009C1 2FE0      MOV	R30,R16
    009C2 27FF      CLR	R31
    009C3 0FE8      ADD	R30,R24
    009C4 1FF9      ADC	R31,R25
    009C5 2422      CLR	R2
    009C6 8220      ST	Z,R2
    009C7 9503      INC	R16
    009C8 3008      CPI	R16,0x8
    009C9 F3B0      BCS	0x09C0
    009CA E081      LDI	R24,1
    009CB 838B      STD	Y+3,R24
    009CC C02B      RJMP	0x09F8
(0214)   else if(Intensity[7]==2) {PORTE&=0x9B;for(i = 0; i < 8; i++){buff[i]=0;}buff[5]=1;}
    009CD 9180 03BA LDS	R24,Intensity+7
    009CF 3082      CPI	R24,2
    009D0 F491      BNE	0x09E3
    009D1 B183      IN	R24,0x03
    009D2 798B      ANDI	R24,0x9B
    009D3 B983      OUT	0x03,R24
    009D4 2700      CLR	R16
    009D5 C008      RJMP	0x09DE
    009D6 01CE      MOVW	R24,R28
    009D7 2FE0      MOV	R30,R16
    009D8 27FF      CLR	R31
    009D9 0FE8      ADD	R30,R24
    009DA 1FF9      ADC	R31,R25
    009DB 2422      CLR	R2
    009DC 8220      ST	Z,R2
    009DD 9503      INC	R16
    009DE 3008      CPI	R16,0x8
    009DF F3B0      BCS	0x09D6
    009E0 E081      LDI	R24,1
    009E1 838D      STD	Y+5,R24
    009E2 C015      RJMP	0x09F8
(0215)   else if(Intensity[7]==3) {PORTE&=0xC7;for(i = 0; i < 8; i++){buff[i]=0;}buff[7]=1;}
    009E3 9180 03BA LDS	R24,Intensity+7
    009E5 3083      CPI	R24,3
    009E6 F489      BNE	0x09F8
    009E7 B183      IN	R24,0x03
    009E8 7C87      ANDI	R24,0xC7
    009E9 B983      OUT	0x03,R24
    009EA 2700      CLR	R16
    009EB C008      RJMP	0x09F4
    009EC 01CE      MOVW	R24,R28
    009ED 2FE0      MOV	R30,R16
    009EE 27FF      CLR	R31
    009EF 0FE8      ADD	R30,R24
    009F0 1FF9      ADC	R31,R25
    009F1 2422      CLR	R2
    009F2 8220      ST	Z,R2
    009F3 9503      INC	R16
    009F4 3008      CPI	R16,0x8
    009F5 F3B0      BCS	0x09EC
    009F6 E081      LDI	R24,1
    009F7 838F      STD	Y+7,R24
    009F8 9629      ADIW	R28,0x9
    009F9 9508      RET
(0216) 
(0217)  // DwinWriteWord(ADDR_BOOTINGMOTO_TOWARD_LEFTDATA, buff[0]);//迪文屏通信函数
(0218)  // DwinWriteWord(ADDR_BOOTINGMOTO_TOWARD_RIGHTDATA, buff[1]);//迪文屏通信函数
(0219)   //DwinWriteWord(ADDR_BOOTINGMOTO_TOWARD_INDATA, buff[2]);//迪文屏通信函数
(0220)  // DwinWriteWord(ADDR_BOOTINGMOTO_TOWARD_OUTDATA, buff[3]);//迪文屏通信函数
(0221) }
(0222) void IntensitySet(void)//负压等级 H
(0223) {
(0224)   PORTC|=0x0F;
_IntensitySet:
    009FA B385      IN	R24,0x15
    009FB 608F      ORI	R24,0xF
    009FC BB85      OUT	0x15,R24
(0225)   //PORTC&=~(10-Intensity[4]);
(0226)   switch(Intensity[4])
    009FD 9100 03B7 LDS	R16,Intensity+4
    009FF 2711      CLR	R17
    00A00 3000      CPI	R16,0
    00A01 0701      CPC	R16,R17
    00A02 F149      BEQ	0x0A2C
    00A03 3001      CPI	R16,1
    00A04 E0E0      LDI	R30,0
    00A05 071E      CPC	R17,R30
    00A06 F149      BEQ	0x0A30
    00A07 3002      CPI	R16,2
    00A08 E0E0      LDI	R30,0
    00A09 071E      CPC	R17,R30
    00A0A F149      BEQ	0x0A34
    00A0B 3003      CPI	R16,3
    00A0C E0E0      LDI	R30,0
    00A0D 071E      CPC	R17,R30
    00A0E F149      BEQ	0x0A38
    00A0F 3004      CPI	R16,4
    00A10 E0E0      LDI	R30,0
    00A11 071E      CPC	R17,R30
    00A12 F149      BEQ	0x0A3C
    00A13 3005      CPI	R16,5
    00A14 E0E0      LDI	R30,0
    00A15 071E      CPC	R17,R30
    00A16 F149      BEQ	0x0A40
    00A17 3006      CPI	R16,6
    00A18 E0E0      LDI	R30,0
    00A19 071E      CPC	R17,R30
    00A1A F149      BEQ	0x0A44
    00A1B 3007      CPI	R16,7
    00A1C E0E0      LDI	R30,0
    00A1D 071E      CPC	R17,R30
    00A1E F139      BEQ	0x0A46
    00A1F 3008      CPI	R16,0x8
    00A20 E0E0      LDI	R30,0
    00A21 071E      CPC	R17,R30
    00A22 F139      BEQ	0x0A4A
    00A23 3009      CPI	R16,0x9
    00A24 E0E0      LDI	R30,0
    00A25 071E      CPC	R17,R30
    00A26 F129      BEQ	0x0A4C
    00A27 300A      CPI	R16,0xA
    00A28 E0E0      LDI	R30,0
    00A29 071E      CPC	R17,R30
    00A2A F119      BEQ	0x0A4E
    00A2B C025      RJMP	0x0A51
(0227)   {
(0228)    case 0:  PORTC&=~15; break;
    00A2C B385      IN	R24,0x15
    00A2D 7F80      ANDI	R24,0xF0
    00A2E BB85      OUT	0x15,R24
    00A2F C021      RJMP	0x0A51
(0229)    case 1:  PORTC&=~12; break;
    00A30 B385      IN	R24,0x15
    00A31 7F83      ANDI	R24,0xF3
    00A32 BB85      OUT	0x15,R24
    00A33 C01D      RJMP	0x0A51
(0230)    case 2:  PORTC&=~9; break;
    00A34 B385      IN	R24,0x15
    00A35 7F86      ANDI	R24,0xF6
    00A36 BB85      OUT	0x15,R24
    00A37 C019      RJMP	0x0A51
(0231)    case 3:  PORTC&=~7;  break;
    00A38 B385      IN	R24,0x15
    00A39 7F88      ANDI	R24,0xF8
    00A3A BB85      OUT	0x15,R24
    00A3B C015      RJMP	0x0A51
(0232)    case 4:  PORTC&=~6;  break;
    00A3C B385      IN	R24,0x15
    00A3D 7F89      ANDI	R24,0xF9
    00A3E BB85      OUT	0x15,R24
    00A3F C011      RJMP	0x0A51
(0233)    case 5:  PORTC&=~5;  break;
    00A40 B385      IN	R24,0x15
    00A41 7F8A      ANDI	R24,0xFA
    00A42 BB85      OUT	0x15,R24
    00A43 C00D      RJMP	0x0A51
(0234)    case 6:  PORTC&=~4;  break;
    00A44 98AA      CBI	0x15,2
    00A45 C00B      RJMP	0x0A51
(0235)    case 7:  PORTC&=~3;  break;
    00A46 B385      IN	R24,0x15
    00A47 7F8C      ANDI	R24,0xFC
    00A48 BB85      OUT	0x15,R24
    00A49 C007      RJMP	0x0A51
(0236)    case 8:  PORTC&=~2;  break;
    00A4A 98A9      CBI	0x15,1
    00A4B C005      RJMP	0x0A51
(0237)    case 9:  PORTC&=~1;  break;
    00A4C 98A8      CBI	0x15,0
    00A4D C003      RJMP	0x0A51
(0238)    case 10: PORTC&=~0;  break;
    00A4E B385      IN	R24,0x15
    00A4F 7F8F      ANDI	R24,0xFF
    00A50 BB85      OUT	0x15,R24
(0239)    default: break;
    00A51 9508      RET
(0240)   }
(0241) }
(0242) /*void DisMode(void)
(0243) {
(0244)   static unsigned int i=0;
(0245)   unsigned int xs,ys,xe,ye;
(0246)   if(DisPage!=WORKPAGE) return;
(0247)   if(Intensity[8]>1) return;
(0248)   if(Intensity[7]==0)
(0249)   {
(0250)    if(i>0) i-=1;
(0251)    else i=5;
(0252)    xs=i%3;
(0253)    xs=xs*240;
(0254)    ys=i/3;
(0255)    ys=ys*180;
(0256)    xe=i%3;
(0257)    xe=xe*240;
(0258)    xe=xe+239; 
(0259)    ye=i/3;
(0260)    ye=ye*180;
(0261)    ye=ye+179;
(0262)    cut_pic(0,33,xs,ys,xe,ye,280,395);
(0263)    //cut_pic(0,33,(i%3)*240,i/3*180,239+(i%3)*240,179+i/3*180,280,395);
(0264)   }
(0265)   else if(Intensity[7]==1)
(0266)   {
(0267)    if(i<5) i+=1;
(0268)    else i=0;
(0269)    xs=i%3;
(0270)    xs=xs*240;
(0271)    ys=i/3;
(0272)    ys=ys*180;
(0273)    xe=i%3;
(0274)    xe=xe*240;
(0275)    xe=xe+239; 
(0276)    ye=i/3;
(0277)    ye=ye*180;
(0278)    ye=ye+179;
(0279)    cut_pic(0,33,xs,ys,xe,ye,280,395);
(0280)    //cut_pic(0,33,(i%3)*240,i/3*180,239+(i%3)*240,179+i/3*180,280,395);
(0281)   }
(0282)   else if(Intensity[7]==2)
(0283)   {
(0284)    if(i>0) i-=1;
(0285)    else i=5;
(0286)    xs=i%3;
(0287)    xs=xs*240;
(0288)    ys=i/3;
(0289)    ys=ys*180;
(0290)    xe=i%3;
(0291)    xe=xe*240;
(0292)    xe=xe+239; 
(0293)    ye=i/3;
(0294)    ye=ye*180;
(0295)    ye=ye+179;
(0296)    cut_pic(0,34,xs,ys,xe,ye,280,395);
(0297)    //cut_pic(0,34,(i%3)*240,i/3*180,239+(i%3)*240,179+i/3*180,280,395);
(0298)   }
(0299)   else if(Intensity[7]==3)
(0300)   {
(0301)    if(i<5) i+=1;
(0302)    else i=0;
(0303)    xs=i%3;
(0304)    xs=xs*240;
(0305)    ys=i/3;
(0306)    ys=ys*180;
(0307)    xe=i%3;
(0308)    xe=xe*240;
(0309)    xe=xe+239; 
(0310)    ye=i/3;
(0311)    ye=ye*180;
(0312)    ye=ye+179;
(0313)    cut_pic(0,34,xs,ys,xe,ye,280,395);
(0314)    //cut_pic(0,34,(i%3)*240,i/3*180,239+(i%3)*240,179+i/3*180,280,395);
(0315)   }
(0316) }*/
(0317) void DisMode(void)//电机转向动画H
(0318) {
_DisMode:
    00A52 9508      RET
(0319)   /*
(0320)   static unsigned char i=0;
(0321)   if(DisPage!=WORKPAGE) return;
(0322)   if(Intensity[8]>1) return;
(0323)   if(Intensity[7]==0)
(0324)   {
(0325)    if(i==0)
(0326)    {
(0327)      cut_pic(0,33,0,0,239,179,280,395);
(0328)      i=5;
(0329)    }
(0330)    else if(i==1)
(0331)    {
(0332)      cut_pic(0,33,240,0,479,179,280,395);
(0333)      i=0;
(0334)    }
(0335)    else if(i==2)
(0336)    {
(0337)      cut_pic(0,33,480,0,719,179,280,395);
(0338)      i=1;
(0339)    }
(0340)    else if(i==3)
(0341)    {
(0342)      cut_pic(0,33,0,180,239,359,280,395);
(0343)      i=2;
(0344)    }
(0345)    else if(i==4)
(0346)    {
(0347)      cut_pic(0,33,240,180,479,359,280,395);
(0348)      i=3;
(0349)    }
(0350)    else if(i==5)
(0351)    {
(0352)      cut_pic(0,33,480,180,719,359,280,395);
(0353)      i=4;
(0354)    }
(0355)   }
(0356)   else if(Intensity[7]==1)
(0357)   {
(0358)    if(i==0)
(0359)    {
(0360)      cut_pic(0,33,0,0,239,179,280,395);
(0361)      i=1;
(0362)    }
(0363)    else if(i==1)
(0364)    {
(0365)      cut_pic(0,33,240,0,479,179,280,395);
(0366)      i=2;
(0367)    }
(0368)    else if(i==2)
(0369)    {
(0370)      cut_pic(0,33,480,0,719,179,280,395);
(0371)      i=3;
(0372)    }
(0373)    else if(i==3)
(0374)    {
(0375)      cut_pic(0,33,0,180,239,359,280,395);
(0376)      i=4;
(0377)    }
(0378)    else if(i==4)
(0379)    {
(0380)      cut_pic(0,33,240,180,479,359,280,395);
(0381)      i=5;
(0382)    }
(0383)    else if(i==5)
(0384)    {
(0385)      cut_pic(0,33,480,180,719,359,280,395);
(0386)      i=0;
(0387)    }
(0388)   }
(0389)   else if(Intensity[7]==2)
(0390)   {
(0391)    if(i==0)
(0392)    {
(0393)      cut_pic(0,34,0,0,239,179,280,395);
(0394)      i=5;
(0395)    }
(0396)    else if(i==1)
(0397)    {
(0398)      cut_pic(0,34,240,0,479,179,280,395);
(0399)      i=0;
(0400)    }
(0401)    else if(i==2)
(0402)    {
(0403)      cut_pic(0,34,480,0,719,179,280,395);
(0404)      i=1;
(0405)    }
(0406)    else if(i==3)
(0407)    {
(0408)      cut_pic(0,34,0,180,239,359,280,395);
(0409)      i=2;
(0410)    }
(0411)    else if(i==4)
(0412)    {
(0413)      cut_pic(0,34,240,180,479,359,280,395);
(0414)      i=3;
(0415)    }
(0416)    else if(i==5)
(0417)    {
(0418)      cut_pic(0,34,480,180,719,359,280,395);
(0419)      i=4;
(0420)    }
(0421)   }
(0422)   else if(Intensity[7]==3)
(0423)   {
(0424)    if(i==0)
(0425)    {
(0426)      cut_pic(0,34,0,0,239,179,280,395);
(0427)      i=1;
(0428)    }
(0429)    else if(i==1)
(0430)    {
(0431)      cut_pic(0,34,240,0,479,179,280,395);
(0432)      i=2;
(0433)    }
(0434)    else if(i==2)
(0435)    {
(0436)      cut_pic(0,34,480,0,719,179,280,395);
(0437)      i=3;
(0438)    }
(0439)    else if(i==3)
(0440)    {
(0441)      cut_pic(0,34,0,180,239,359,280,395);
(0442)      i=4;
(0443)    }
(0444)    else if(i==4)
(0445)    {
(0446)      cut_pic(0,34,240,180,479,359,280,395);
(0447)      i=5;
(0448)    }
(0449)    else if(i==5)
(0450)    {
(0451)      cut_pic(0,34,480,180,719,359,280,395);
(0452)      i=0;
(0453)    }
(0454)   }
(0455)   */
(0456) }
(0457) void DisWork(void)
(0458) {
(0459)    unsigned char i;
(0460)    //EEPROMReadBytes(IntensityAddr+Function_Tab[Function_Ptr]*9,Intensity,9);
(0461)    //dis_pic(28);
(0462)    //cut_pic(0,107,0,Language*30,761,29+Language*30,22,344);
(0463)    /*
(0464)    for(i=0;i<9;i++)//显示参数等级
(0465)    {
(0466)      if(Intensity[i]>Intensity_Max[i]) Intensity[i]=Intensity_Tab[Function_Tab[Function_Ptr]][i];
(0467)      if(i<7) DisIntensity(i);
(0468)    }*/
(0469)    //EEPROMReadBytes(CounterAddr+hand[Intensity[8]]*4,&Total_counter,4);
(0470)    HandpieceSet();//射频选通 负压选通
_DisWork:
  i                    --> Y,+1
    00A53 DF2E      RCALL	_HandpieceSet
(0471)    IntensitySet();//负压等级
    00A54 CFA5      RJMP	_IntensitySet
(0472)    //ModeSet();//电机转向设置
(0473)    //DisCount();//显示计时
(0474)    //Dis_pressure();
(0475)    //cut_pic(0,28+Intensity[7],523,388,588,788,523,388);
(0476) }
(0477) void DisMV(void)
(0478) {
_DisMV:
    00A55 9508      RET
_GetKeyID:
  ID                   --> R10
  Len                  --> R18
  P                    --> R16
    00A56 92AA      ST	-Y,R10
(0479)   /*
(0480)   static unsigned char pic=35;
(0481)   if(DisPage==WELCOMEPAGE)
(0482)   {
(0483)     if(MV<50) MV++;
(0484) 	else 
(0485) 	{
(0486) 	  DisPage=MVPAGE;
(0487) 	}
(0488)   }
(0489)   if(MC==1)
(0490) 	{
(0491) 	  DisWelcome();
(0492)       DisPage=WELCOMEPAGE;
(0493) 	  MV=0;
(0494) 	  MC=0;
(0495) 	  return;
(0496)   }
(0497)   if(DisPage!=MVPAGE) return;
(0498)   if(pic<106) pic++;
(0499)   else pic=36;
(0500)   dis_pic(pic);
(0501)   */
(0502) }
(0503) 
(0504) 
(0505) 
(0506) 
(0507) 
(0508) 
(0509) 
(0510) 
(0511) 
(0512) 
(0513) unsigned char GetKeyID(const struct KEY *P,unsigned char Len)
(0514) {
(0515)   unsigned char ID;
(0516)   for(ID=0;ID<Len;ID++)
    00A57 24AA      CLR	R10
    00A58 C028      RJMP	0x0A81
(0517)   {
(0518)    if((Touch_X>P->XS)&&(Touch_X<P->XE))
    00A59 9040 03E8 LDS	R4,Touch_X
    00A5B 9050 03E9 LDS	R5,Touch_X+1
    00A5D 01F8      MOVW	R30,R16
    00A5E 9027      ELPM	R2,Z+
    00A5F 9036      ELPM	R3,Z
    00A60 1424      CP	R2,R4
    00A61 0435      CPC	R3,R5
    00A62 F4D8      BCC	0x0A7E
    00A63 01F8      MOVW	R30,R16
    00A64 9634      ADIW	R30,4
    00A65 9027      ELPM	R2,Z+
    00A66 9036      ELPM	R3,Z
    00A67 1442      CP	R4,R2
    00A68 0453      CPC	R5,R3
    00A69 F4A0      BCC	0x0A7E
(0519)    {
(0520)      if((Touch_Y>P->YS)&&(Touch_Y<P->YE))
    00A6A 9040 03E6 LDS	R4,Touch_Y
    00A6C 9050 03E7 LDS	R5,Touch_Y+1
    00A6E 01F8      MOVW	R30,R16
    00A6F 9632      ADIW	R30,2
    00A70 9027      ELPM	R2,Z+
    00A71 9036      ELPM	R3,Z
    00A72 1424      CP	R2,R4
    00A73 0435      CPC	R3,R5
    00A74 F448      BCC	0x0A7E
    00A75 01F8      MOVW	R30,R16
    00A76 9636      ADIW	R30,6
    00A77 9027      ELPM	R2,Z+
    00A78 9036      ELPM	R3,Z
    00A79 1442      CP	R4,R2
    00A7A 0453      CPC	R5,R3
    00A7B F410      BCC	0x0A7E
(0521) 	 {
(0522) 	   return ID;
    00A7C 2D0A      MOV	R16,R10
    00A7D C007      RJMP	0x0A85
(0523) 	 }
(0524)    }
(0525)    P++;
    00A7E 5F08      SUBI	R16,0xF8
    00A7F 4F1F      SBCI	R17,0xFF
    00A80 94A3      INC	R10
    00A81 16A2      CP	R10,R18
    00A82 F408      BCC	0x0A84
    00A83 CFD5      RJMP	0x0A59
(0526)   }
(0527)   return 255;
    00A84 EF0F      LDI	R16,0xFF
    00A85 90A9      LD	R10,Y+
    00A86 9508      RET
_MainKeyDown:
    00A87 972C      SBIW	R28,0xC
(0528) }
(0529) void MainKeyDown(void)
(0530) {
(0531)   if(DisPage!=WELCOMEPAGE) return;
    00A88 9020 0114 LDS	R2,DisPage
    00A8A 2022      TST	R2
    00A8B F009      BEQ	0x0A8D
    00A8C C05A      RJMP	0x0AE7
(0532)   KeyID=GetKeyID(Main_Key,6);
    00A8D E026      LDI	R18,6
    00A8E E504      LDI	R16,0x54
    00A8F E011      LDI	R17,1
    00A90 DFC5      RCALL	_GetKeyID
    00A91 9300 0115 STS	KeyID,R16
(0533)   if(KeyID<Function_Count)//????踩?????完??
    00A93 9020 011A LDS	R2,Function_Count
    00A95 2E30      MOV	R3,R16
    00A96 1502      CP	R16,R2
    00A97 F438      BCC	0x0A9F
(0534)   {
(0535)     DisFunctionKey(KeyID,1);
    00A98 E021      LDI	R18,1
    00A99 DDF8      RCALL	_DisFunctionKey
(0536) 	Function_Ptr=KeyID;
    00A9A 9020 0115 LDS	R2,KeyID
    00A9C 9220 011B STS	Function_Ptr,R2
(0537)   }
    00A9E C048      RJMP	0x0AE7
(0538)   else if(KeyID==4)//??????
    00A9F 9180 0115 LDS	R24,KeyID
    00AA1 3084      CPI	R24,4
    00AA2 F4D9      BNE	0x0ABE
(0539)   {
(0540) 	cut_pic(0,13,0,0,199,319,0,50); 
    00AA3 E382      LDI	R24,0x32
    00AA4 E090      LDI	R25,0
    00AA5 879B      STD	Y+11,R25
    00AA6 878A      STD	Y+10,R24
    00AA7 2422      CLR	R2
    00AA8 2433      CLR	R3
    00AA9 8639      STD	Y+9,R3
    00AAA 8628      STD	Y+8,R2
    00AAB E38F      LDI	R24,0x3F
    00AAC E091      LDI	R25,1
    00AAD 839F      STD	Y+7,R25
    00AAE 838E      STD	Y+6,R24
    00AAF EC87      LDI	R24,0xC7
    00AB0 E090      LDI	R25,0
    00AB1 839D      STD	Y+5,R25
    00AB2 838C      STD	Y+4,R24
    00AB3 823B      STD	Y+3,R3
    00AB4 822A      STD	Y+2,R2
    00AB5 8239      STD	Y+1,R3
    00AB6 8228      ST	Y,R2
    00AB7 E02D      LDI	R18,0xD
    00AB8 2700      CLR	R16
    00AB9 940E 3F14 CALL	_cut_pic
(0541) 	get_time();
    00ABB 940E 3F41 CALL	_get_time
(0542)   }
    00ABD C029      RJMP	0x0AE7
(0543)   else if(KeyID==5)//???????
    00ABE 9180 0115 LDS	R24,KeyID
    00AC0 3085      CPI	R24,5
    00AC1 F4E1      BNE	0x0ADE
(0544)   {
(0545) 	 cut_pic(1,10,100,400,100+99,400+99,175,240);//????????????完??   x=(K/3)*145+30;  y=(K%3)*175+65;
    00AC2 EF80      LDI	R24,0xF0
    00AC3 E090      LDI	R25,0
    00AC4 879B      STD	Y+11,R25
    00AC5 878A      STD	Y+10,R24
    00AC6 EA8F      LDI	R24,0xAF
    00AC7 8799      STD	Y+9,R25
    00AC8 8788      STD	Y+8,R24
    00AC9 EF83      LDI	R24,0xF3
    00ACA E091      LDI	R25,1
    00ACB 839F      STD	Y+7,R25
    00ACC 838E      STD	Y+6,R24
    00ACD EC87      LDI	R24,0xC7
    00ACE E090      LDI	R25,0
    00ACF 839D      STD	Y+5,R25
    00AD0 838C      STD	Y+4,R24
    00AD1 E980      LDI	R24,0x90
    00AD2 E091      LDI	R25,1
    00AD3 839B      STD	Y+3,R25
    00AD4 838A      STD	Y+2,R24
    00AD5 E684      LDI	R24,0x64
    00AD6 E090      LDI	R25,0
    00AD7 8399      STD	Y+1,R25
    00AD8 8388      ST	Y,R24
    00AD9 E02A      LDI	R18,0xA
    00ADA E001      LDI	R16,1
    00ADB 940E 3F14 CALL	_cut_pic
(0546)   // Function_Ptr=KeyID;
(0547)   }
    00ADD C009      RJMP	0x0AE7
(0548)   /////////////////////////////
(0549)   else if(Function_Count == 0)
    00ADE 9020 011A LDS	R2,Function_Count
    00AE0 2022      TST	R2
    00AE1 F429      BNE	0x0AE7
(0550)   {
(0551)     KeyID = 0;
    00AE2 2422      CLR	R2
    00AE3 9220 0115 STS	KeyID,R2
(0552) 	Function_Ptr=KeyID;  
    00AE5 9220 011B STS	Function_Ptr,R2
(0553)   }
    00AE7 962C      ADIW	R28,0xC
    00AE8 9508      RET
_MainKeyUp:
    00AE9 92AA      ST	-Y,R10
    00AEA 92BA      ST	-Y,R11
    00AEB 972C      SBIW	R28,0xC
(0554)   /////////////////////////////add function by hanjingyang 20170920
(0555) }
(0556) 
(0557) void MainKeyUp(void)
(0558) {
(0559)   static char Cnt=0;
(0560)   if(DisPage!=WELCOMEPAGE) return;
    00AEC 9020 0114 LDS	R2,DisPage
    00AEE 2022      TST	R2
    00AEF F009      BEQ	0x0AF1
    00AF0 C05F      RJMP	0x0B50
(0561)   if(KeyID<Function_Count)
    00AF1 9020 011A LDS	R2,Function_Count
    00AF3 9030 0115 LDS	R3,KeyID
    00AF5 1432      CP	R3,R2
    00AF6 F438      BCC	0x0AFE
(0562)   {
(0563)    DisPage=WORKPAGE;
    00AF7 E185      LDI	R24,0x15
    00AF8 9380 0114 STS	DisPage,R24
(0564)    DisWork();
    00AFA DF58      RCALL	_DisWork
(0565)    Send_Data8();
    00AFB 940E 4333 CALL	_Send_Data8
(0566)   }
    00AFD C039      RJMP	0x0B37
(0567)   else if(KeyID==4)
    00AFE 9180 0115 LDS	R24,KeyID
    00B00 3084      CPI	R24,4
    00B01 F421      BNE	0x0B06
(0568)   {
(0569)     DisPage=STARTPAGE;
    00B02 E081      LDI	R24,1
    00B03 9380 0114 STS	DisPage,R24
(0570)   }
    00B05 C031      RJMP	0x0B37
(0571)   else if(KeyID==5)//???????
    00B06 9180 0115 LDS	R24,KeyID
    00B08 3085      CPI	R24,5
    00B09 F519      BNE	0x0B2D
(0572)   {
(0573)     DisPage=ultrasonicpage;
    00B0A E187      LDI	R24,0x17
    00B0B 9380 0114 STS	DisPage,R24
(0574)     dis_pic(108);
    00B0D E60C      LDI	R16,0x6C
    00B0E 940E 3F13 CALL	_dis_pic
(0575)     cut_pic(1,109,0,510,60,599,420,170);
    00B10 EA8A      LDI	R24,0xAA
    00B11 E090      LDI	R25,0
    00B12 879B      STD	Y+11,R25
    00B13 878A      STD	Y+10,R24
    00B14 EA84      LDI	R24,0xA4
    00B15 E091      LDI	R25,1
    00B16 8799      STD	Y+9,R25
    00B17 8788      STD	Y+8,R24
    00B18 E587      LDI	R24,0x57
    00B19 E092      LDI	R25,2
    00B1A 839F      STD	Y+7,R25
    00B1B 838E      STD	Y+6,R24
    00B1C E38C      LDI	R24,0x3C
    00B1D E090      LDI	R25,0
    00B1E 839D      STD	Y+5,R25
    00B1F 838C      STD	Y+4,R24
    00B20 EF8E      LDI	R24,0xFE
    00B21 E091      LDI	R25,1
    00B22 839B      STD	Y+3,R25
    00B23 838A      STD	Y+2,R24
    00B24 2422      CLR	R2
    00B25 2433      CLR	R3
    00B26 8239      STD	Y+1,R3
    00B27 8228      ST	Y,R2
    00B28 E62D      LDI	R18,0x6D
    00B29 E001      LDI	R16,1
    00B2A 940E 3F14 CALL	_cut_pic
(0576)   }
    00B2C C00A      RJMP	0x0B37
(0577)   else if(Function_Count==0)
    00B2D 9020 011A LDS	R2,Function_Count
    00B2F 2022      TST	R2
    00B30 F431      BNE	0x0B37
(0578)   {
(0579)    DisPage=WORKPAGE;
    00B31 E185      LDI	R24,0x15
    00B32 9380 0114 STS	DisPage,R24
(0580)    DisWork();
    00B34 DF1E      RCALL	_DisWork
(0581)    Send_Data8();
    00B35 940E 4333 CALL	_Send_Data8
(0582)   } 
(0583)   Cnt=KeyID==255?++Cnt:0;
    00B37 9180 0115 LDS	R24,KeyID
    00B39 3F8F      CPI	R24,0xFF
    00B3A F449      BNE	0x0B44
    00B3B 9180 0106 LDS	R24,app.c:Cnt
    00B3D 5F8F      SUBI	R24,0xFF
    00B3E 2E28      MOV	R2,R24
    00B3F 9220 0106 STS	app.c:Cnt,R2
    00B41 2EA8      MOV	R10,R24
    00B42 24BB      CLR	R11
    00B43 C002      RJMP	0x0B46
    00B44 24AA      CLR	R10
    00B45 24BB      CLR	R11
    00B46 92A0 0106 STS	app.c:Cnt,R10
(0584)   if(Cnt>=10) 
    00B48 2D8A      MOV	R24,R10
    00B49 308A      CPI	R24,0xA
    00B4A F028      BCS	0x0B50
(0585)   {
(0586)     Cnt=0;
    00B4B 2422      CLR	R2
    00B4C 9220 0106 STS	app.c:Cnt,R2
(0587)     Chack_screen(); 
    00B4E 940E 3F11 CALL	_Chack_screen
(0588)   }
    00B50 962C      ADIW	R28,0xC
    00B51 90B9      LD	R11,Y+
    00B52 90A9      LD	R10,Y+
    00B53 9508      RET
_StartKeyDown:
    00B54 940E 4523 CALL	push_xgsetF00C
    00B56 972C      SBIW	R28,0xC
(0589) }
(0590) void StartKeyDown(void)
(0591) {
(0592)   if(DisPage!=STARTPAGE) return;
    00B57 9180 0114 LDS	R24,DisPage
    00B59 3081      CPI	R24,1
    00B5A F009      BEQ	0x0B5C
    00B5B C364      RJMP	0x0EC0
(0593)   KeyID=GetKeyID(Start_Key,9); 
    00B5C E029      LDI	R18,0x9
    00B5D E804      LDI	R16,0x84
    00B5E E011      LDI	R17,1
    00B5F DEF6      RCALL	_GetKeyID
    00B60 9300 0115 STS	KeyID,R16
(0594)   if(KeyID<8)
    00B62 2F80      MOV	R24,R16
    00B63 3008      CPI	R16,0x8
    00B64 F4E8      BCC	0x0B82
(0595)   {
(0596)     cut_pic(0,13,201,KeyID*40,400,KeyID*40+40,0,50+KeyID*40);
    00B65 2F18      MOV	R17,R24
    00B66 E208      LDI	R16,0x28
    00B67 0301      MULSU	R16,R17
    00B68 01C0      MOVW	R24,R0
    00B69 96C2      ADIW	R24,0x32
    00B6A 879B      STD	Y+11,R25
    00B6B 878A      STD	Y+10,R24
    00B6C 2422      CLR	R2
    00B6D 2433      CLR	R3
    00B6E 8639      STD	Y+9,R3
    00B6F 8628      STD	Y+8,R2
    00B70 01C0      MOVW	R24,R0
    00B71 9688      ADIW	R24,0x28
    00B72 839F      STD	Y+7,R25
    00B73 838E      STD	Y+6,R24
    00B74 E980      LDI	R24,0x90
    00B75 E091      LDI	R25,1
    00B76 839D      STD	Y+5,R25
    00B77 838C      STD	Y+4,R24
    00B78 821B      STD	Y+3,R1
    00B79 820A      STD	Y+2,R0
    00B7A EC89      LDI	R24,0xC9
    00B7B E090      LDI	R25,0
    00B7C 8399      STD	Y+1,R25
    00B7D 8388      ST	Y,R24
    00B7E E02D      LDI	R18,0xD
    00B7F 2700      CLR	R16
    00B80 940E 3F14 CALL	_cut_pic
(0597)   }
(0598)   if(KeyID==0)
    00B82 9020 0115 LDS	R2,KeyID
    00B84 2022      TST	R2
    00B85 F009      BEQ	0x0B87
    00B86 C0BC      RJMP	0x0C43
(0599)   {
(0600)     DisPage=TIMEPAGE;
    00B87 E082      LDI	R24,2
    00B88 9380 0114 STS	DisPage,R24
(0601)     cut_pic(0,14,0,0,269,330,300,100);
    00B8A E684      LDI	R24,0x64
    00B8B E090      LDI	R25,0
    00B8C 879B      STD	Y+11,R25
    00B8D 878A      STD	Y+10,R24
    00B8E E28C      LDI	R24,0x2C
    00B8F E091      LDI	R25,1
    00B90 8799      STD	Y+9,R25
    00B91 8788      STD	Y+8,R24
    00B92 E48A      LDI	R24,0x4A
    00B93 839F      STD	Y+7,R25
    00B94 838E      STD	Y+6,R24
    00B95 E08D      LDI	R24,0xD
    00B96 839D      STD	Y+5,R25
    00B97 838C      STD	Y+4,R24
    00B98 2422      CLR	R2
    00B99 2433      CLR	R3
    00B9A 823B      STD	Y+3,R3
    00B9B 822A      STD	Y+2,R2
    00B9C 8239      STD	Y+1,R3
    00B9D 8228      ST	Y,R2
    00B9E E02E      LDI	R18,0xE
    00B9F 2700      CLR	R16
    00BA0 940E 3F14 CALL	_cut_pic
(0602) 	  text_ptr=0;
    00BA2 2422      CLR	R2
    00BA3 9220 03AB STS	text_ptr,R2
(0603) 	  Text[0]=(datetime[0]>>4)+'0';
    00BA5 9180 03AC LDS	R24,datetime
    00BA7 9582      SWAP	R24
    00BA8 708F      ANDI	R24,0xF
    00BA9 5D80      SUBI	R24,0xD0
    00BAA 9380 03FE STS	Text,R24
(0604)     Text[1]=(datetime[0]&0x0f)+'0';
    00BAC 9180 03AC LDS	R24,datetime
    00BAE 708F      ANDI	R24,0xF
    00BAF 5D80      SUBI	R24,0xD0
    00BB0 9380 03FF STS	Text+1,R24
(0605)     Text[2]='-';
    00BB2 E28D      LDI	R24,0x2D
    00BB3 9380 0400 STS	Text+2,R24
(0606)     Text[3]=(datetime[1]>>4)+'0';
    00BB5 9180 03AD LDS	R24,datetime+1
    00BB7 9582      SWAP	R24
    00BB8 708F      ANDI	R24,0xF
    00BB9 5D80      SUBI	R24,0xD0
    00BBA 9380 0401 STS	Text+3,R24
(0607)     Text[4]=(datetime[1]&0x0f)+'0';
    00BBC 9180 03AD LDS	R24,datetime+1
    00BBE 708F      ANDI	R24,0xF
    00BBF 5D80      SUBI	R24,0xD0
    00BC0 9380 0402 STS	Text+4,R24
(0608)     Text[5]='-';
    00BC2 E28D      LDI	R24,0x2D
    00BC3 9380 0403 STS	Text+5,R24
(0609)     Text[6]=(datetime[2]>>4)+'0';
    00BC5 9180 03AE LDS	R24,datetime+2
    00BC7 9582      SWAP	R24
    00BC8 708F      ANDI	R24,0xF
    00BC9 5D80      SUBI	R24,0xD0
    00BCA 9380 0404 STS	Text+6,R24
(0610)     Text[7]=(datetime[2]&0x0f)+'0';
    00BCC 9180 03AE LDS	R24,datetime+2
    00BCE 708F      ANDI	R24,0xF
    00BCF 5D80      SUBI	R24,0xD0
    00BD0 9380 0405 STS	Text+7,R24
(0611)     Text[8]=' ';
    00BD2 E280      LDI	R24,0x20
    00BD3 9380 0406 STS	Text+8,R24
(0612) 	  Text[9]=(datetime[4]>>4)+'0';
    00BD5 9180 03B0 LDS	R24,datetime+4
    00BD7 9582      SWAP	R24
    00BD8 708F      ANDI	R24,0xF
    00BD9 5D80      SUBI	R24,0xD0
    00BDA 9380 0407 STS	Text+9,R24
(0613)     Text[10]=(datetime[4]&0x0f)+'0';
    00BDC 9180 03B0 LDS	R24,datetime+4
    00BDE 708F      ANDI	R24,0xF
    00BDF 5D80      SUBI	R24,0xD0
    00BE0 9380 0408 STS	Text+10,R24
(0614)     Text[11]=':';
    00BE2 E38A      LDI	R24,0x3A
    00BE3 9380 0409 STS	Text+11,R24
(0615)     Text[12]=(datetime[5]>>4)+'0';
    00BE5 9180 03B1 LDS	R24,datetime+5
    00BE7 9582      SWAP	R24
    00BE8 708F      ANDI	R24,0xF
    00BE9 5D80      SUBI	R24,0xD0
    00BEA 9380 040A STS	Text+12,R24
(0616)     Text[13]=(datetime[5]&0x0f)+'0';
    00BEC 9180 03B1 LDS	R24,datetime+5
    00BEE 708F      ANDI	R24,0xF
    00BEF 5D80      SUBI	R24,0xD0
    00BF0 9380 040B STS	Text+13,R24
(0617)     Text[14]=':';
    00BF2 E38A      LDI	R24,0x3A
    00BF3 9380 040C STS	Text+14,R24
(0618)     Text[15]=(datetime[6]>>4)+'0';
    00BF5 9180 03B2 LDS	R24,datetime+6
    00BF7 9582      SWAP	R24
    00BF8 708F      ANDI	R24,0xF
    00BF9 5D80      SUBI	R24,0xD0
    00BFA 9380 040D STS	Text+15,R24
(0619)     Text[16]=(datetime[6]&0x0f)+'0';
    00BFC 9180 03B2 LDS	R24,datetime+6
    00BFE 708F      ANDI	R24,0xF
    00BFF 5D80      SUBI	R24,0xD0
    00C00 9380 040E STS	Text+16,R24
(0620)     Text[17]='\0';
    00C02 9220 040F STS	Text+17,R2
(0621)     Text[18]=Text[text_ptr];
    00C04 EF8E      LDI	R24,0xFE
    00C05 E093      LDI	R25,3
    00C06 2DE2      MOV	R30,R2
    00C07 27FF      CLR	R31
    00C08 0FE8      ADD	R30,R24
    00C09 1FF9      ADC	R31,R25
    00C0A 8020      LD	R2,Z
    00C0B 9220 0410 STS	Text+18,R2
(0622)     Text[19]='\0';
    00C0D 2422      CLR	R2
    00C0E 9220 0411 STS	Text+19,R2
(0623) 	  print_texts(335,156,0,0xD1,2,0x04bb,0xffff,Text);
    00C10 879B      STD	Y+11,R25
    00C11 878A      STD	Y+10,R24
    00C12 EF8F      LDI	R24,0xFF
    00C13 EF9F      LDI	R25,0xFF
    00C14 8799      STD	Y+9,R25
    00C15 8788      STD	Y+8,R24
    00C16 EB8B      LDI	R24,0xBB
    00C17 E094      LDI	R25,4
    00C18 839F      STD	Y+7,R25
    00C19 838E      STD	Y+6,R24
    00C1A E082      LDI	R24,2
    00C1B 838C      STD	Y+4,R24
    00C1C ED81      LDI	R24,0xD1
    00C1D 838A      STD	Y+2,R24
    00C1E 8228      ST	Y,R2
    00C1F E92C      LDI	R18,0x9C
    00C20 E030      LDI	R19,0
    00C21 E40F      LDI	R16,0x4F
    00C22 E011      LDI	R17,1
    00C23 940E 3F08 CALL	_print_texts
(0624)     print_texts(335+text_ptr*12,156,0,0xD1,2,0xffff,0x04bb,&Text[18]);
    00C25 E180      LDI	R24,0x10
    00C26 E094      LDI	R25,4
    00C27 879B      STD	Y+11,R25
    00C28 878A      STD	Y+10,R24
    00C29 EB8B      LDI	R24,0xBB
    00C2A E094      LDI	R25,4
    00C2B 8799      STD	Y+9,R25
    00C2C 8788      STD	Y+8,R24
    00C2D EF8F      LDI	R24,0xFF
    00C2E EF9F      LDI	R25,0xFF
    00C2F 839F      STD	Y+7,R25
    00C30 838E      STD	Y+6,R24
    00C31 E082      LDI	R24,2
    00C32 838C      STD	Y+4,R24
    00C33 ED81      LDI	R24,0xD1
    00C34 838A      STD	Y+2,R24
    00C35 2422      CLR	R2
    00C36 8228      ST	Y,R2
    00C37 E92C      LDI	R18,0x9C
    00C38 E030      LDI	R19,0
    00C39 9110 03AB LDS	R17,text_ptr
    00C3B E00C      LDI	R16,0xC
    00C3C 0301      MULSU	R16,R17
    00C3D 0180      MOVW	R16,R0
    00C3E 5B01      SUBI	R16,0xB1
    00C3F 4F1E      SBCI	R17,0xFE
    00C40 940E 3F08 CALL	_print_texts
(0625)   }
    00C42 C27D      RJMP	0x0EC0
(0626)   else if(KeyID==2)
    00C43 9180 0115 LDS	R24,KeyID
    00C45 3082      CPI	R24,2
    00C46 F009      BEQ	0x0C48
    00C47 C043      RJMP	0x0C8B
(0627)   {
(0628)     DisPage=SOUNDPAGE;
    00C48 E084      LDI	R24,4
    00C49 9380 0114 STS	DisPage,R24
(0629)     cut_pic(0,14,181,331,360,531,300,200);
    00C4B EC88      LDI	R24,0xC8
    00C4C E090      LDI	R25,0
    00C4D 879B      STD	Y+11,R25
    00C4E 878A      STD	Y+10,R24
    00C4F E28C      LDI	R24,0x2C
    00C50 E091      LDI	R25,1
    00C51 8799      STD	Y+9,R25
    00C52 8788      STD	Y+8,R24
    00C53 E183      LDI	R24,0x13
    00C54 E092      LDI	R25,2
    00C55 839F      STD	Y+7,R25
    00C56 838E      STD	Y+6,R24
    00C57 E688      LDI	R24,0x68
    00C58 E091      LDI	R25,1
    00C59 839D      STD	Y+5,R25
    00C5A 838C      STD	Y+4,R24
    00C5B E48B      LDI	R24,0x4B
    00C5C 839B      STD	Y+3,R25
    00C5D 838A      STD	Y+2,R24
    00C5E EB85      LDI	R24,0xB5
    00C5F E090      LDI	R25,0
    00C60 8399      STD	Y+1,R25
    00C61 8388      ST	Y,R24
    00C62 E02E      LDI	R18,0xE
    00C63 2700      CLR	R16
    00C64 940E 3F14 CALL	_cut_pic
(0630) 	  cut_pic(0,14,1,371,170,371+(10-SoundSet)*15,301,240);
    00C66 EF80      LDI	R24,0xF0
    00C67 E090      LDI	R25,0
    00C68 879B      STD	Y+11,R25
    00C69 878A      STD	Y+10,R24
    00C6A E28D      LDI	R24,0x2D
    00C6B E091      LDI	R25,1
    00C6C 8799      STD	Y+9,R25
    00C6D 8788      STD	Y+8,R24
    00C6E 9020 011F LDS	R2,SoundSet
    00C70 E08A      LDI	R24,0xA
    00C71 2E38      MOV	R3,R24
    00C72 1832      SUB	R3,R2
    00C73 E08F      LDI	R24,0xF
    00C74 9D83      MUL	R24,R3
    00C75 01C0      MOVW	R24,R0
    00C76 588D      SUBI	R24,0x8D
    00C77 4F9E      SBCI	R25,0xFE
    00C78 839F      STD	Y+7,R25
    00C79 838E      STD	Y+6,R24
    00C7A EA8A      LDI	R24,0xAA
    00C7B E090      LDI	R25,0
    00C7C 839D      STD	Y+5,R25
    00C7D 838C      STD	Y+4,R24
    00C7E E783      LDI	R24,0x73
    00C7F E091      LDI	R25,1
    00C80 839B      STD	Y+3,R25
    00C81 838A      STD	Y+2,R24
    00C82 E081      LDI	R24,1
    00C83 E090      LDI	R25,0
    00C84 8399      STD	Y+1,R25
    00C85 8388      ST	Y,R24
    00C86 E02E      LDI	R18,0xE
    00C87 2700      CLR	R16
    00C88 940E 3F14 CALL	_cut_pic
(0631)   }
    00C8A C235      RJMP	0x0EC0
(0632)   else if(KeyID==3)
    00C8B 9180 0115 LDS	R24,KeyID
    00C8D 3083      CPI	R24,3
    00C8E F009      BEQ	0x0C90
    00C8F C061      RJMP	0x0CF1
(0633)   {
(0634)     DisPage=LANGUAGEPAGE; 
    00C90 E085      LDI	R24,5
    00C91 9380 0114 STS	DisPage,R24
(0635)     cut_pic(0,15,0,0,374,400,300,100);
    00C93 E684      LDI	R24,0x64
    00C94 E090      LDI	R25,0
    00C95 879B      STD	Y+11,R25
    00C96 878A      STD	Y+10,R24
    00C97 E28C      LDI	R24,0x2C
    00C98 E091      LDI	R25,1
    00C99 8799      STD	Y+9,R25
    00C9A 8788      STD	Y+8,R24
    00C9B E980      LDI	R24,0x90
    00C9C 839F      STD	Y+7,R25
    00C9D 838E      STD	Y+6,R24
    00C9E E786      LDI	R24,0x76
    00C9F 839D      STD	Y+5,R25
    00CA0 838C      STD	Y+4,R24
    00CA1 2422      CLR	R2
    00CA2 2433      CLR	R3
    00CA3 823B      STD	Y+3,R3
    00CA4 822A      STD	Y+2,R2
    00CA5 8239      STD	Y+1,R3
    00CA6 8228      ST	Y,R2
    00CA7 E02F      LDI	R18,0xF
    00CA8 2700      CLR	R16
    00CA9 940E 3F14 CALL	_cut_pic
(0636) 	  cut_pic(0,15,Language_Key[Language].XS+75,Language_Key[Language].YS-100,Language_Key[Language].XE+75,Language_Key[Language].YE-100,Language_Key[Language].XS,Language_Key[Language].YS);
    00CAB 90A0 0122 LDS	R10,Language
    00CAD 24BB      CLR	R11
    00CAE 0CAA      LSL	R10
    00CAF 1CBB      ROL	R11
    00CB0 0CAA      LSL	R10
    00CB1 1CBB      ROL	R11
    00CB2 0CAA      LSL	R10
    00CB3 1CBB      ROL	R11
    00CB4 E48E      LDI	R24,0x4E
    00CB5 E092      LDI	R25,2
    00CB6 01F5      MOVW	R30,R10
    00CB7 0FE8      ADD	R30,R24
    00CB8 1FF9      ADC	R31,R25
    00CB9 9027      ELPM	R2,Z+
    00CBA 9036      ELPM	R3,Z
    00CBB 863B      STD	Y+11,R3
    00CBC 862A      STD	Y+10,R2
    00CBD E48C      LDI	R24,0x4C
    00CBE E092      LDI	R25,2
    00CBF 01F5      MOVW	R30,R10
    00CC0 0FE8      ADD	R30,R24
    00CC1 1FF9      ADC	R31,R25
    00CC2 9147      ELPM	R20,Z+
    00CC3 9156      ELPM	R21,Z
    00CC4 8759      STD	Y+9,R21
    00CC5 8748      STD	Y+8,R20
    00CC6 E582      LDI	R24,0x52
    00CC7 E092      LDI	R25,2
    00CC8 01F5      MOVW	R30,R10
    00CC9 0FE8      ADD	R30,R24
    00CCA 1FF9      ADC	R31,R25
    00CCB 9187      ELPM	R24,Z+
    00CCC 9196      ELPM	R25,Z
    00CCD 5684      SUBI	R24,0x64
    00CCE 4090      SBCI	R25,0
    00CCF 839F      STD	Y+7,R25
    00CD0 838E      STD	Y+6,R24
    00CD1 E580      LDI	R24,0x50
    00CD2 E092      LDI	R25,2
    00CD3 01F5      MOVW	R30,R10
    00CD4 0FE8      ADD	R30,R24
    00CD5 1FF9      ADC	R31,R25
    00CD6 9187      ELPM	R24,Z+
    00CD7 9196      ELPM	R25,Z
    00CD8 5B85      SUBI	R24,0xB5
    00CD9 4F9F      SBCI	R25,0xFF
    00CDA 839D      STD	Y+5,R25
    00CDB 838C      STD	Y+4,R24
    00CDC E48E      LDI	R24,0x4E
    00CDD E092      LDI	R25,2
    00CDE 01F5      MOVW	R30,R10
    00CDF 0FE8      ADD	R30,R24
    00CE0 1FF9      ADC	R31,R25
    00CE1 9187      ELPM	R24,Z+
    00CE2 9196      ELPM	R25,Z
    00CE3 5684      SUBI	R24,0x64
    00CE4 4090      SBCI	R25,0
    00CE5 839B      STD	Y+3,R25
    00CE6 838A      STD	Y+2,R24
    00CE7 01CA      MOVW	R24,R20
    00CE8 5B85      SUBI	R24,0xB5
    00CE9 4F9F      SBCI	R25,0xFF
    00CEA 8399      STD	Y+1,R25
    00CEB 8388      ST	Y,R24
    00CEC E02F      LDI	R18,0xF
    00CED 2700      CLR	R16
    00CEE 940E 3F14 CALL	_cut_pic
(0637)   }
    00CF0 C1CF      RJMP	0x0EC0
(0638)   else if(KeyID==4)
    00CF1 9180 0115 LDS	R24,KeyID
    00CF3 3084      CPI	R24,4
    00CF4 F009      BEQ	0x0CF6
    00CF5 C03D      RJMP	0x0D33
(0639)   {
(0640)     DisPage=BACKPAGE; 
    00CF6 E086      LDI	R24,6
    00CF7 9380 0114 STS	DisPage,R24
(0641)     cut_pic(0,16+BackSet/6,(BackSet%3)*241,(BackSet%6/3)*270,(BackSet%3)*241+239,(BackSet%6/3)*270+269,300,200);
    00CF9 EC88      LDI	R24,0xC8
    00CFA E090      LDI	R25,0
    00CFB 879B      STD	Y+11,R25
    00CFC 878A      STD	Y+10,R24
    00CFD E28C      LDI	R24,0x2C
    00CFE E091      LDI	R25,1
    00CFF 8799      STD	Y+9,R25
    00D00 8788      STD	Y+8,R24
    00D01 90A0 0116 LDS	R10,BackSet
    00D03 E026      LDI	R18,6
    00D04 E030      LDI	R19,0
    00D05 2D0A      MOV	R16,R10
    00D06 2711      CLR	R17
    00D07 940E 43E9 CALL	mod16s
    00D09 E023      LDI	R18,3
    00D0A E030      LDI	R19,0
    00D0B 940E 43ED CALL	div16s
    00D0D E08E      LDI	R24,0xE
    00D0E E091      LDI	R25,1
    00D0F 0198      MOVW	R18,R16
    00D10 018C      MOVW	R16,R24
    00D11 940E 44A5 CALL	empy16s
    00D13 01B8      MOVW	R22,R16
    00D14 01CB      MOVW	R24,R22
    00D15 5F83      SUBI	R24,0xF3
    00D16 4F9E      SBCI	R25,0xFE
    00D17 839F      STD	Y+7,R25
    00D18 838E      STD	Y+6,R24
    00D19 E013      LDI	R17,3
    00D1A 2D0A      MOV	R16,R10
    00D1B 940E 448D CALL	mod8u
    00D1D EF81      LDI	R24,0xF1
    00D1E 9F80      MUL	R24,R16
    00D1F 01A0      MOVW	R20,R0
    00D20 01CA      MOVW	R24,R20
    00D21 5181      SUBI	R24,0x11
    00D22 4F9F      SBCI	R25,0xFF
    00D23 839D      STD	Y+5,R25
    00D24 838C      STD	Y+4,R24
    00D25 837B      STD	Y+3,R23
    00D26 836A      STD	Y+2,R22
    00D27 8359      STD	Y+1,R21
    00D28 8348      ST	Y,R20
    00D29 E016      LDI	R17,6
    00D2A 2D0A      MOV	R16,R10
    00D2B 940E 448F CALL	div8u
    00D2D 2F20      MOV	R18,R16
    00D2E 5F20      SUBI	R18,0xF0
    00D2F 2700      CLR	R16
    00D30 940E 3F14 CALL	_cut_pic
(0642)   }
    00D32 C18D      RJMP	0x0EC0
(0643)   else if(KeyID==5)
    00D33 9180 0115 LDS	R24,KeyID
    00D35 3085      CPI	R24,5
    00D36 F4E9      BNE	0x0D54
(0644)   {
(0645)     DisPage=USBPAGE;
    00D37 E087      LDI	R24,7
    00D38 9380 0114 STS	DisPage,R24
(0646)     cut_pic(0,26,0,282,269,422,300,200);
    00D3A EC88      LDI	R24,0xC8
    00D3B E090      LDI	R25,0
    00D3C 879B      STD	Y+11,R25
    00D3D 878A      STD	Y+10,R24
    00D3E E28C      LDI	R24,0x2C
    00D3F E091      LDI	R25,1
    00D40 8799      STD	Y+9,R25
    00D41 8788      STD	Y+8,R24
    00D42 EA86      LDI	R24,0xA6
    00D43 839F      STD	Y+7,R25
    00D44 838E      STD	Y+6,R24
    00D45 E08D      LDI	R24,0xD
    00D46 839D      STD	Y+5,R25
    00D47 838C      STD	Y+4,R24
    00D48 E18A      LDI	R24,0x1A
    00D49 839B      STD	Y+3,R25
    00D4A 838A      STD	Y+2,R24
    00D4B 2422      CLR	R2
    00D4C 2433      CLR	R3
    00D4D 8239      STD	Y+1,R3
    00D4E 8228      ST	Y,R2
    00D4F E12A      LDI	R18,0x1A
    00D50 2700      CLR	R16
    00D51 940E 3F14 CALL	_cut_pic
(0647)   }
    00D53 C16C      RJMP	0x0EC0
(0648)   else if(KeyID==6)
    00D54 9180 0115 LDS	R24,KeyID
    00D56 3086      CPI	R24,6
    00D57 F009      BEQ	0x0D59
    00D58 C100      RJMP	0x0E59
(0649)   {
(0650)     if(Card_Type>1)
    00D59 E081      LDI	R24,1
    00D5A 9020 0399 LDS	R2,Card_Type
    00D5C 1582      CP	R24,R2
    00D5D F008      BCS	0x0D5F
    00D5E C0E1      RJMP	0x0E40
(0651) 	{
(0652)      DisPage=CARDPAGE;
    00D5F E088      LDI	R24,0x8
    00D60 9380 0114 STS	DisPage,R24
(0653) 	 text_ptr=255;
    00D62 EF8F      LDI	R24,0xFF
    00D63 9380 03AB STS	text_ptr,R24
(0654)      cut_pic(0,18,0,0,269,369,300,100);
    00D65 E684      LDI	R24,0x64
    00D66 E090      LDI	R25,0
    00D67 879B      STD	Y+11,R25
    00D68 878A      STD	Y+10,R24
    00D69 E28C      LDI	R24,0x2C
    00D6A E091      LDI	R25,1
    00D6B 8799      STD	Y+9,R25
    00D6C 8788      STD	Y+8,R24
    00D6D E781      LDI	R24,0x71
    00D6E 839F      STD	Y+7,R25
    00D6F 838E      STD	Y+6,R24
    00D70 E08D      LDI	R24,0xD
    00D71 839D      STD	Y+5,R25
    00D72 838C      STD	Y+4,R24
    00D73 2422      CLR	R2
    00D74 2433      CLR	R3
    00D75 823B      STD	Y+3,R3
    00D76 822A      STD	Y+2,R2
    00D77 8239      STD	Y+1,R3
    00D78 8228      ST	Y,R2
    00D79 E122      LDI	R18,0x12
    00D7A 2700      CLR	R16
    00D7B 940E 3F14 CALL	_cut_pic
(0655) 	 Text[0]=User_ID/100+'0';
    00D7D E614      LDI	R17,0x64
    00D7E 9100 0398 LDS	R16,User_ID
    00D80 940E 448F CALL	div8u
    00D82 2F80      MOV	R24,R16
    00D83 5D80      SUBI	R24,0xD0
    00D84 9380 03FE STS	Text,R24
(0656)      Text[1]=(User_ID%100)/10+'0';
    00D86 E614      LDI	R17,0x64
    00D87 9100 0398 LDS	R16,User_ID
    00D89 940E 448D CALL	mod8u
    00D8B E01A      LDI	R17,0xA
    00D8C 940E 448F CALL	div8u
    00D8E 2F80      MOV	R24,R16
    00D8F 5D80      SUBI	R24,0xD0
    00D90 9380 03FF STS	Text+1,R24
(0657) 	 Text[2]=User_ID%10+'0';
    00D92 E01A      LDI	R17,0xA
    00D93 9100 0398 LDS	R16,User_ID
    00D95 940E 448D CALL	mod8u
    00D97 2F80      MOV	R24,R16
    00D98 5D80      SUBI	R24,0xD0
    00D99 9380 0400 STS	Text+2,R24
(0658)      Text[3]='\0';
    00D9B 2422      CLR	R2
    00D9C 9220 0401 STS	Text+3,R2
(0659) 	 print_texts(343,152,0,0xD1,2,0x04bb,0xffff,Text);
    00D9E EF8E      LDI	R24,0xFE
    00D9F E093      LDI	R25,3
    00DA0 879B      STD	Y+11,R25
    00DA1 878A      STD	Y+10,R24
    00DA2 EF8F      LDI	R24,0xFF
    00DA3 EF9F      LDI	R25,0xFF
    00DA4 8799      STD	Y+9,R25
    00DA5 8788      STD	Y+8,R24
    00DA6 EB8B      LDI	R24,0xBB
    00DA7 E094      LDI	R25,4
    00DA8 839F      STD	Y+7,R25
    00DA9 838E      STD	Y+6,R24
    00DAA E082      LDI	R24,2
    00DAB 838C      STD	Y+4,R24
    00DAC ED81      LDI	R24,0xD1
    00DAD 838A      STD	Y+2,R24
    00DAE 8228      ST	Y,R2
    00DAF E928      LDI	R18,0x98
    00DB0 E030      LDI	R19,0
    00DB1 E507      LDI	R16,0x57
    00DB2 E011      LDI	R17,1
    00DB3 940E 3F08 CALL	_print_texts
(0660) 	 User_Type=0;
    00DB5 2422      CLR	R2
    00DB6 9220 039A STS	User_Type,R2
(0661) 	 print_consttexts(406,152,0,0x81,2,0x04bb,0xffff,&user_type[User_Type][0]);
    00DB8 2D12      MOV	R17,R2
    00DB9 E006      LDI	R16,6
    00DBA 0301      MULSU	R16,R17
    00DBB 0110      MOVW	R2,R0
    00DBC E38C      LDI	R24,0x3C
    00DBD E091      LDI	R25,1
    00DBE 0E28      ADD	R2,R24
    00DBF 1E39      ADC	R3,R25
    00DC0 863B      STD	Y+11,R3
    00DC1 862A      STD	Y+10,R2
    00DC2 EF8F      LDI	R24,0xFF
    00DC3 EF9F      LDI	R25,0xFF
    00DC4 8799      STD	Y+9,R25
    00DC5 8788      STD	Y+8,R24
    00DC6 EB8B      LDI	R24,0xBB
    00DC7 E094      LDI	R25,4
    00DC8 839F      STD	Y+7,R25
    00DC9 838E      STD	Y+6,R24
    00DCA E082      LDI	R24,2
    00DCB 838C      STD	Y+4,R24
    00DCC E881      LDI	R24,0x81
    00DCD 838A      STD	Y+2,R24
    00DCE 2422      CLR	R2
    00DCF 8228      ST	Y,R2
    00DD0 E928      LDI	R18,0x98
    00DD1 E030      LDI	R19,0
    00DD2 E906      LDI	R16,0x96
    00DD3 E011      LDI	R17,1
    00DD4 940E 3F09 CALL	_print_consttexts
(0662) 	 User_Counter=10000;
    00DD6 E180      LDI	R24,0x10
    00DD7 E297      LDI	R25,0x27
    00DD8 9390 039E STS	User_Counter+1,R25
    00DDA 9380 039D STS	User_Counter,R24
(0663)      Text[4]=User_Counter/10000+'0';
    00DDC E120      LDI	R18,0x10
    00DDD E237      LDI	R19,0x27
    00DDE 018C      MOVW	R16,R24
    00DDF 940E 4409 CALL	div16u
    00DE1 01C8      MOVW	R24,R16
    00DE2 96C0      ADIW	R24,0x30
    00DE3 9380 0402 STS	Text+4,R24
(0664)      Text[5]=User_Counter%10000/1000+'0';
    00DE5 E120      LDI	R18,0x10
    00DE6 E237      LDI	R19,0x27
    00DE7 9100 039D LDS	R16,User_Counter
    00DE9 9110 039E LDS	R17,User_Counter+1
    00DEB 940E 4407 CALL	mod16u
    00DED EE28      LDI	R18,0xE8
    00DEE E033      LDI	R19,3
    00DEF 940E 4409 CALL	div16u
    00DF1 01C8      MOVW	R24,R16
    00DF2 96C0      ADIW	R24,0x30
    00DF3 9380 0403 STS	Text+5,R24
(0665) 	 Text[6]=User_Counter%1000/100+'0';
    00DF5 EE28      LDI	R18,0xE8
    00DF6 E033      LDI	R19,3
    00DF7 9100 039D LDS	R16,User_Counter
    00DF9 9110 039E LDS	R17,User_Counter+1
    00DFB 940E 4407 CALL	mod16u
    00DFD E624      LDI	R18,0x64
    00DFE E030      LDI	R19,0
    00DFF 940E 4409 CALL	div16u
    00E01 01C8      MOVW	R24,R16
    00E02 96C0      ADIW	R24,0x30
    00E03 9380 0404 STS	Text+6,R24
(0666) 	 Text[7]=User_Counter%100/10+'0';
    00E05 E624      LDI	R18,0x64
    00E06 E030      LDI	R19,0
    00E07 9100 039D LDS	R16,User_Counter
    00E09 9110 039E LDS	R17,User_Counter+1
    00E0B 940E 4407 CALL	mod16u
    00E0D E02A      LDI	R18,0xA
    00E0E E030      LDI	R19,0
    00E0F 940E 4409 CALL	div16u
    00E11 01C8      MOVW	R24,R16
    00E12 96C0      ADIW	R24,0x30
    00E13 9380 0405 STS	Text+7,R24
(0667) 	 Text[8]=User_Counter%10+'0';
    00E15 E02A      LDI	R18,0xA
    00E16 E030      LDI	R19,0
    00E17 9100 039D LDS	R16,User_Counter
    00E19 9110 039E LDS	R17,User_Counter+1
    00E1B 940E 4407 CALL	mod16u
    00E1D 01C8      MOVW	R24,R16
    00E1E 96C0      ADIW	R24,0x30
    00E1F 9380 0406 STS	Text+8,R24
(0668) 	 Text[9]='\0';
    00E21 2422      CLR	R2
    00E22 9220 0407 STS	Text+9,R2
(0669)      Text[10]=0;
    00E24 9220 0408 STS	Text+10,R2
(0670)      Text[11]='\0';
    00E26 9220 0409 STS	Text+11,R2
(0671) 	 print_texts(482,152,0,0xD1,2,0x04bb,0xffff,&Text[4]);
    00E28 E082      LDI	R24,2
    00E29 E094      LDI	R25,4
    00E2A 879B      STD	Y+11,R25
    00E2B 878A      STD	Y+10,R24
    00E2C EF8F      LDI	R24,0xFF
    00E2D EF9F      LDI	R25,0xFF
    00E2E 8799      STD	Y+9,R25
    00E2F 8788      STD	Y+8,R24
    00E30 EB8B      LDI	R24,0xBB
    00E31 E094      LDI	R25,4
    00E32 839F      STD	Y+7,R25
    00E33 838E      STD	Y+6,R24
    00E34 E082      LDI	R24,2
    00E35 838C      STD	Y+4,R24
    00E36 ED81      LDI	R24,0xD1
    00E37 838A      STD	Y+2,R24
    00E38 8228      ST	Y,R2
    00E39 E928      LDI	R18,0x98
    00E3A E030      LDI	R19,0
    00E3B EE02      LDI	R16,0xE2
    00E3C E011      LDI	R17,1
    00E3D 940E 3F08 CALL	_print_texts
(0672) 	}
    00E3F C080      RJMP	0x0EC0
(0673) 	else cut_pic(0,13,0,0,199,319,0,50); 
    00E40 E382      LDI	R24,0x32
    00E41 E090      LDI	R25,0
    00E42 879B      STD	Y+11,R25
    00E43 878A      STD	Y+10,R24
    00E44 2422      CLR	R2
    00E45 2433      CLR	R3
    00E46 8639      STD	Y+9,R3
    00E47 8628      STD	Y+8,R2
    00E48 E38F      LDI	R24,0x3F
    00E49 E091      LDI	R25,1
    00E4A 839F      STD	Y+7,R25
    00E4B 838E      STD	Y+6,R24
    00E4C EC87      LDI	R24,0xC7
    00E4D E090      LDI	R25,0
    00E4E 839D      STD	Y+5,R25
    00E4F 838C      STD	Y+4,R24
    00E50 823B      STD	Y+3,R3
    00E51 822A      STD	Y+2,R2
    00E52 8239      STD	Y+1,R3
    00E53 8228      ST	Y,R2
    00E54 E02D      LDI	R18,0xD
    00E55 2700      CLR	R16
    00E56 940E 3F14 CALL	_cut_pic
(0674)   }
    00E58 C067      RJMP	0x0EC0
(0675)   else if(KeyID==7)
    00E59 9180 0115 LDS	R24,KeyID
    00E5B 3087      CPI	R24,7
    00E5C F009      BEQ	0x0E5E
    00E5D C05D      RJMP	0x0EBB
(0676)   {
(0677)     DisPage=PASSWORDPAGE;
    00E5E E089      LDI	R24,0x9
    00E5F 9380 0114 STS	DisPage,R24
(0678) 	//EEPROMReadBytes(PasswordAddr,&PasswordTab,6);
(0679)     if((PasswordTab[0]>9)||(PasswordTab[1]>9)||(PasswordTab[2]>9)||(PasswordTab[3]>9)||(PasswordTab[4]>9)||(PasswordTab[5]>9))
    00E61 9020 07E9 LDS	R2,PasswordTab
    00E63 1582      CP	R24,R2
    00E64 F0A0      BCS	0x0E79
    00E65 9020 07EA LDS	R2,PasswordTab+1
    00E67 1582      CP	R24,R2
    00E68 F080      BCS	0x0E79
    00E69 9020 07EB LDS	R2,PasswordTab+2
    00E6B 1582      CP	R24,R2
    00E6C F060      BCS	0x0E79
    00E6D 9020 07EC LDS	R2,PasswordTab+3
    00E6F 1582      CP	R24,R2
    00E70 F040      BCS	0x0E79
    00E71 9020 07ED LDS	R2,PasswordTab+4
    00E73 1582      CP	R24,R2
    00E74 F020      BCS	0x0E79
    00E75 9020 07EE LDS	R2,PasswordTab+5
    00E77 1582      CP	R24,R2
    00E78 F468      BCC	0x0E86
(0680)     {
(0681)       PasswordTab[0]=6;
    00E79 E086      LDI	R24,6
    00E7A 9380 07E9 STS	PasswordTab,R24
(0682) 	  PasswordTab[1]=6;
    00E7C 9380 07EA STS	PasswordTab+1,R24
(0683) 	  PasswordTab[2]=6;
    00E7E 9380 07EB STS	PasswordTab+2,R24
(0684) 	  PasswordTab[3]=6;
    00E80 9380 07EC STS	PasswordTab+3,R24
(0685) 	  PasswordTab[4]=6;
    00E82 9380 07ED STS	PasswordTab+4,R24
(0686) 	  PasswordTab[5]=6;
    00E84 9380 07EE STS	PasswordTab+5,R24
(0687) 	  //EEPROMWriteBytes(PasswordAddr,&PasswordTab,6);
(0688)     }
(0689) 	cut_pic(0,27,0,0,269,325,300,100);
    00E86 E684      LDI	R24,0x64
    00E87 E090      LDI	R25,0
    00E88 879B      STD	Y+11,R25
    00E89 878A      STD	Y+10,R24
    00E8A E28C      LDI	R24,0x2C
    00E8B E091      LDI	R25,1
    00E8C 8799      STD	Y+9,R25
    00E8D 8788      STD	Y+8,R24
    00E8E E485      LDI	R24,0x45
    00E8F 839F      STD	Y+7,R25
    00E90 838E      STD	Y+6,R24
    00E91 E08D      LDI	R24,0xD
    00E92 839D      STD	Y+5,R25
    00E93 838C      STD	Y+4,R24
    00E94 2422      CLR	R2
    00E95 2433      CLR	R3
    00E96 823B      STD	Y+3,R3
    00E97 822A      STD	Y+2,R2
    00E98 8239      STD	Y+1,R3
    00E99 8228      ST	Y,R2
    00E9A E12B      LDI	R18,0x1B
    00E9B 2700      CLR	R16
    00E9C 940E 3F14 CALL	_cut_pic
(0690) 	text_ptr=0;
    00E9E 2422      CLR	R2
    00E9F 9220 03AB STS	text_ptr,R2
(0691) 	Text[0]=' ';
    00EA1 E280      LDI	R24,0x20
    00EA2 9380 03FE STS	Text,R24
(0692) 	Text[1]=' ';
    00EA4 9380 03FF STS	Text+1,R24
(0693) 	Text[2]=' ';
    00EA6 9380 0400 STS	Text+2,R24
(0694) 	Text[3]=' ';
    00EA8 9380 0401 STS	Text+3,R24
(0695) 	Text[4]=' ';
    00EAA 9380 0402 STS	Text+4,R24
(0696) 	Text[5]=' ';
    00EAC 9380 0403 STS	Text+5,R24
(0697) 	Text[6]='\0';
    00EAE 9220 0404 STS	Text+6,R2
(0698) 	Text[7]='*';
    00EB0 E28A      LDI	R24,0x2A
    00EB1 9380 0405 STS	Text+7,R24
(0699)     Text[8]='\0';
    00EB3 9220 0406 STS	Text+8,R2
(0700) 	Text[9]=' ';
    00EB5 E280      LDI	R24,0x20
    00EB6 9380 0407 STS	Text+9,R24
(0701)     Text[10]='\0';
    00EB8 9220 0408 STS	Text+10,R2
(0702)   }
    00EBA C005      RJMP	0x0EC0
(0703)   else if(KeyID==8)
    00EBB 9180 0115 LDS	R24,KeyID
    00EBD 3088      CPI	R24,0x8
    00EBE F409      BNE	0x0EC0
(0704)   {
(0705)     DisWelcome();
    00EBF DA4A      RCALL	_DisWelcome
(0706)   }
    00EC0 962C      ADIW	R28,0xC
    00EC1 940C 452A JMP	pop_xgsetF00C
(0707) }
(0708) void StartKeyUp(void)
(0709) {
(0710)   if(DisPage!=STARTPAGE) return;
_StartKeyUp:
    00EC3 9180 0114 LDS	R24,DisPage
    00EC5 3081      CPI	R24,1
    00EC6 F009      BEQ	0x0EC8
    00EC7 C022      RJMP	0x0EEA
(0711)   if(KeyID==1)
    00EC8 9180 0115 LDS	R24,KeyID
    00ECA 3081      CPI	R24,1
    00ECB F4B9      BNE	0x0EE3
(0712)   {
(0713)     Chack_screen();
    00ECC 940E 3F11 CALL	_Chack_screen
(0714)     while((R_buf[1]!=0xE4)||(R_buf[2]!=0x4F)||(R_buf[3]!=0x4B));
    00ECE 9180 0134 LDS	R24,R_buf+1
    00ED0 3E84      CPI	R24,0xE4
    00ED1 F7E1      BNE	0x0ECE
    00ED2 9180 0135 LDS	R24,R_buf+2
    00ED4 348F      CPI	R24,0x4F
    00ED5 F7C1      BNE	0x0ECE
    00ED6 9180 0136 LDS	R24,R_buf+3
    00ED8 348B      CPI	R24,0x4B
    00ED9 F7A1      BNE	0x0ECE
(0715) 	Delay_MS(100);
    00EDA E604      LDI	R16,0x64
    00EDB E010      LDI	R17,0
    00EDC 940E 2F84 CALL	_Delay_MS
(0716) 	DisWelcome();
    00EDE DA2B      RCALL	_DisWelcome
(0717) 	DisPage=WELCOMEPAGE;
    00EDF 2422      CLR	R2
    00EE0 9220 0114 STS	DisPage,R2
(0718)   }
    00EE2 C007      RJMP	0x0EEA
(0719)    else if(KeyID==8)
    00EE3 9180 0115 LDS	R24,KeyID
    00EE5 3088      CPI	R24,0x8
    00EE6 F419      BNE	0x0EEA
(0720)   {
(0721) 	DisPage=WELCOMEPAGE;
    00EE7 2422      CLR	R2
    00EE8 9220 0114 STS	DisPage,R2
(0722)   }
    00EEA 9508      RET
_TimeKeyDown:
    00EEB 940E 450F CALL	push_xgset300C
    00EED 972C      SBIW	R28,0xC
(0723) }
(0724) 
(0725) void TimeKeyDown(void)
(0726) {
(0727)   if(DisPage!=TIMEPAGE) return;
    00EEE 9180 0114 LDS	R24,DisPage
    00EF0 3082      CPI	R24,2
    00EF1 F009      BEQ	0x0EF3
    00EF2 C215      RJMP	0x1108
(0728)   KeyID=GetKeyID(Time_Key,13); 
    00EF3 E02D      LDI	R18,0xD
    00EF4 EC0C      LDI	R16,0xCC
    00EF5 E011      LDI	R17,1
    00EF6 DB5F      RCALL	_GetKeyID
    00EF7 9300 0115 STS	KeyID,R16
(0729)   if(KeyID<10)
    00EF9 300A      CPI	R16,0xA
    00EFA F008      BCS	0x0EFC
    00EFB C0D1      RJMP	0x0FCD
(0730)   {
(0731)     if((text_ptr==3)&&(KeyID>1));
    00EFC 9180 03AB LDS	R24,text_ptr
    00EFE 3083      CPI	R24,3
    00EFF F421      BNE	0x0F04
    00F00 E081      LDI	R24,1
    00F01 1780      CP	R24,R16
    00F02 F408      BCC	0x0F04
    00F03 C204      RJMP	0x1108
(0732) 	else if((text_ptr==4)&&(Text[3]=='1')&&(KeyID>2));
    00F04 9180 03AB LDS	R24,text_ptr
    00F06 3084      CPI	R24,4
    00F07 F451      BNE	0x0F12
    00F08 9180 0401 LDS	R24,Text+3
    00F0A 3381      CPI	R24,0x31
    00F0B F431      BNE	0x0F12
    00F0C E082      LDI	R24,2
    00F0D 9020 0115 LDS	R2,KeyID
    00F0F 1582      CP	R24,R2
    00F10 F408      BCC	0x0F12
    00F11 C1F6      RJMP	0x1108
(0733) 	else if((text_ptr==6)&&(KeyID>3));
    00F12 9180 03AB LDS	R24,text_ptr
    00F14 3086      CPI	R24,6
    00F15 F431      BNE	0x0F1C
    00F16 E083      LDI	R24,3
    00F17 9020 0115 LDS	R2,KeyID
    00F19 1582      CP	R24,R2
    00F1A F408      BCC	0x0F1C
    00F1B C1EC      RJMP	0x1108
(0734) 	else if((text_ptr==7)&&(Text[6]=='3')&&(KeyID>1)); 
    00F1C 9180 03AB LDS	R24,text_ptr
    00F1E 3087      CPI	R24,7
    00F1F F451      BNE	0x0F2A
    00F20 9180 0404 LDS	R24,Text+6
    00F22 3383      CPI	R24,0x33
    00F23 F431      BNE	0x0F2A
    00F24 E081      LDI	R24,1
    00F25 9020 0115 LDS	R2,KeyID
    00F27 1582      CP	R24,R2
    00F28 F408      BCC	0x0F2A
    00F29 C1DE      RJMP	0x1108
(0735)     else if((text_ptr==9)&&(KeyID>2));
    00F2A 9180 03AB LDS	R24,text_ptr
    00F2C 3089      CPI	R24,0x9
    00F2D F431      BNE	0x0F34
    00F2E E082      LDI	R24,2
    00F2F 9020 0115 LDS	R2,KeyID
    00F31 1582      CP	R24,R2
    00F32 F408      BCC	0x0F34
    00F33 C1D4      RJMP	0x1108
(0736) 	else if((text_ptr==10)&&(Text[9]=='2')&&(KeyID>3)); 
    00F34 9180 03AB LDS	R24,text_ptr
    00F36 308A      CPI	R24,0xA
    00F37 F451      BNE	0x0F42
    00F38 9180 0407 LDS	R24,Text+9
    00F3A 3382      CPI	R24,0x32
    00F3B F431      BNE	0x0F42
    00F3C E083      LDI	R24,3
    00F3D 9020 0115 LDS	R2,KeyID
    00F3F 1582      CP	R24,R2
    00F40 F408      BCC	0x0F42
    00F41 C1C6      RJMP	0x1108
(0737) 	else if((text_ptr==12)&&(KeyID>5));
    00F42 9180 03AB LDS	R24,text_ptr
    00F44 308C      CPI	R24,0xC
    00F45 F431      BNE	0x0F4C
    00F46 E085      LDI	R24,5
    00F47 9020 0115 LDS	R2,KeyID
    00F49 1582      CP	R24,R2
    00F4A F408      BCC	0x0F4C
    00F4B C1BC      RJMP	0x1108
(0738) 	else if((text_ptr==15)&&(KeyID>5));
    00F4C 9180 03AB LDS	R24,text_ptr
    00F4E 308F      CPI	R24,0xF
    00F4F F431      BNE	0x0F56
    00F50 E085      LDI	R24,5
    00F51 9020 0115 LDS	R2,KeyID
    00F53 1582      CP	R24,R2
    00F54 F408      BCC	0x0F56
    00F55 C1B2      RJMP	0x1108
(0739) 	else
(0740) 	{
(0741) 	  cut_pic(0,14,Time_Key[KeyID].XS-28,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-28,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    00F56 9020 0115 LDS	R2,KeyID
    00F58 2433      CLR	R3
    00F59 0C22      LSL	R2
    00F5A 1C33      ROL	R3
    00F5B 0C22      LSL	R2
    00F5C 1C33      ROL	R3
    00F5D 0C22      LSL	R2
    00F5E 1C33      ROL	R3
    00F5F 0121      MOVW	R4,R2
    00F60 EC8E      LDI	R24,0xCE
    00F61 E091      LDI	R25,1
    00F62 01F1      MOVW	R30,R2
    00F63 0FE8      ADD	R30,R24
    00F64 1FF9      ADC	R31,R25
    00F65 9027      ELPM	R2,Z+
    00F66 9036      ELPM	R3,Z
    00F67 863B      STD	Y+11,R3
    00F68 862A      STD	Y+10,R2
    00F69 EC8C      LDI	R24,0xCC
    00F6A E091      LDI	R25,1
    00F6B 01F2      MOVW	R30,R4
    00F6C 0FE8      ADD	R30,R24
    00F6D 1FF9      ADC	R31,R25
    00F6E 9147      ELPM	R20,Z+
    00F6F 9156      ELPM	R21,Z
    00F70 8759      STD	Y+9,R21
    00F71 8748      STD	Y+8,R20
    00F72 ED82      LDI	R24,0xD2
    00F73 E091      LDI	R25,1
    00F74 01F2      MOVW	R30,R4
    00F75 0FE8      ADD	R30,R24
    00F76 1FF9      ADC	R31,R25
    00F77 9187      ELPM	R24,Z+
    00F78 9196      ELPM	R25,Z
    00F79 5684      SUBI	R24,0x64
    00F7A 4090      SBCI	R25,0
    00F7B 839F      STD	Y+7,R25
    00F7C 838E      STD	Y+6,R24
    00F7D ED80      LDI	R24,0xD0
    00F7E E091      LDI	R25,1
    00F7F 01F2      MOVW	R30,R4
    00F80 0FE8      ADD	R30,R24
    00F81 1FF9      ADC	R31,R25
    00F82 9187      ELPM	R24,Z+
    00F83 9196      ELPM	R25,Z
    00F84 974C      SBIW	R24,0x1C
    00F85 839D      STD	Y+5,R25
    00F86 838C      STD	Y+4,R24
    00F87 EC8E      LDI	R24,0xCE
    00F88 E091      LDI	R25,1
    00F89 01F2      MOVW	R30,R4
    00F8A 0FE8      ADD	R30,R24
    00F8B 1FF9      ADC	R31,R25
    00F8C 9187      ELPM	R24,Z+
    00F8D 9196      ELPM	R25,Z
    00F8E 5684      SUBI	R24,0x64
    00F8F 4090      SBCI	R25,0
    00F90 839B      STD	Y+3,R25
    00F91 838A      STD	Y+2,R24
    00F92 01CA      MOVW	R24,R20
    00F93 974C      SBIW	R24,0x1C
    00F94 8399      STD	Y+1,R25
    00F95 8388      ST	Y,R24
    00F96 E02E      LDI	R18,0xE
    00F97 2700      CLR	R16
    00F98 940E 3F14 CALL	_cut_pic
(0742) 	  Text[text_ptr]=KeyID+'0';
    00F9A EF8E      LDI	R24,0xFE
    00F9B E093      LDI	R25,3
    00F9C 91E0 03AB LDS	R30,text_ptr
    00F9E 27FF      CLR	R31
    00F9F 0FE8      ADD	R30,R24
    00FA0 1FF9      ADC	R31,R25
    00FA1 9180 0115 LDS	R24,KeyID
    00FA3 5D80      SUBI	R24,0xD0
    00FA4 8380      ST	Z,R24
(0743) 	  Text[18]=Text[text_ptr];
    00FA5 EF8E      LDI	R24,0xFE
    00FA6 E093      LDI	R25,3
    00FA7 91E0 03AB LDS	R30,text_ptr
    00FA9 27FF      CLR	R31
    00FAA 0FE8      ADD	R30,R24
    00FAB 1FF9      ADC	R31,R25
    00FAC 8020      LD	R2,Z
    00FAD 9220 0410 STS	Text+18,R2
(0744)       print_texts(335+text_ptr*12,156,0,0xD1,2,0xffff,0x04bb,&Text[18]);
    00FAF E180      LDI	R24,0x10
    00FB0 E094      LDI	R25,4
    00FB1 879B      STD	Y+11,R25
    00FB2 878A      STD	Y+10,R24
    00FB3 EB8B      LDI	R24,0xBB
    00FB4 E094      LDI	R25,4
    00FB5 8799      STD	Y+9,R25
    00FB6 8788      STD	Y+8,R24
    00FB7 EF8F      LDI	R24,0xFF
    00FB8 EF9F      LDI	R25,0xFF
    00FB9 839F      STD	Y+7,R25
    00FBA 838E      STD	Y+6,R24
    00FBB E082      LDI	R24,2
    00FBC 838C      STD	Y+4,R24
    00FBD ED81      LDI	R24,0xD1
    00FBE 838A      STD	Y+2,R24
    00FBF 2422      CLR	R2
    00FC0 8228      ST	Y,R2
    00FC1 E92C      LDI	R18,0x9C
    00FC2 E030      LDI	R19,0
    00FC3 9110 03AB LDS	R17,text_ptr
    00FC5 E00C      LDI	R16,0xC
    00FC6 0301      MULSU	R16,R17
    00FC7 0180      MOVW	R16,R0
    00FC8 5B01      SUBI	R16,0xB1
    00FC9 4F1E      SBCI	R17,0xFE
    00FCA 940E 3F08 CALL	_print_texts
(0745) 	}
(0746) 	
(0747)   }
    00FCC C13B      RJMP	0x1108
(0748)   else if(KeyID==10)
    00FCD 9180 0115 LDS	R24,KeyID
    00FCF 308A      CPI	R24,0xA
    00FD0 F009      BEQ	0x0FD2
    00FD1 C09C      RJMP	0x106E
(0749)   {
(0750)     cut_pic(0,14,Time_Key[KeyID].XS-28,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-28,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    00FD2 2EA8      MOV	R10,R24
    00FD3 24BB      CLR	R11
    00FD4 0CAA      LSL	R10
    00FD5 1CBB      ROL	R11
    00FD6 0CAA      LSL	R10
    00FD7 1CBB      ROL	R11
    00FD8 0CAA      LSL	R10
    00FD9 1CBB      ROL	R11
    00FDA EC8E      LDI	R24,0xCE
    00FDB E091      LDI	R25,1
    00FDC 01F5      MOVW	R30,R10
    00FDD 0FE8      ADD	R30,R24
    00FDE 1FF9      ADC	R31,R25
    00FDF 9027      ELPM	R2,Z+
    00FE0 9036      ELPM	R3,Z
    00FE1 863B      STD	Y+11,R3
    00FE2 862A      STD	Y+10,R2
    00FE3 EC8C      LDI	R24,0xCC
    00FE4 E091      LDI	R25,1
    00FE5 01F5      MOVW	R30,R10
    00FE6 0FE8      ADD	R30,R24
    00FE7 1FF9      ADC	R31,R25
    00FE8 9147      ELPM	R20,Z+
    00FE9 9156      ELPM	R21,Z
    00FEA 8759      STD	Y+9,R21
    00FEB 8748      STD	Y+8,R20
    00FEC ED82      LDI	R24,0xD2
    00FED E091      LDI	R25,1
    00FEE 01F5      MOVW	R30,R10
    00FEF 0FE8      ADD	R30,R24
    00FF0 1FF9      ADC	R31,R25
    00FF1 9187      ELPM	R24,Z+
    00FF2 9196      ELPM	R25,Z
    00FF3 5684      SUBI	R24,0x64
    00FF4 4090      SBCI	R25,0
    00FF5 839F      STD	Y+7,R25
    00FF6 838E      STD	Y+6,R24
    00FF7 ED80      LDI	R24,0xD0
    00FF8 E091      LDI	R25,1
    00FF9 01F5      MOVW	R30,R10
    00FFA 0FE8      ADD	R30,R24
    00FFB 1FF9      ADC	R31,R25
    00FFC 9187      ELPM	R24,Z+
    00FFD 9196      ELPM	R25,Z
    00FFE 974C      SBIW	R24,0x1C
    00FFF 839D      STD	Y+5,R25
    01000 838C      STD	Y+4,R24
    01001 EC8E      LDI	R24,0xCE
    01002 E091      LDI	R25,1
    01003 01F5      MOVW	R30,R10
    01004 0FE8      ADD	R30,R24
    01005 1FF9      ADC	R31,R25
    01006 9187      ELPM	R24,Z+
    01007 9196      ELPM	R25,Z
    01008 5684      SUBI	R24,0x64
    01009 4090      SBCI	R25,0
    0100A 839B      STD	Y+3,R25
    0100B 838A      STD	Y+2,R24
    0100C 01CA      MOVW	R24,R20
    0100D 974C      SBIW	R24,0x1C
    0100E 8399      STD	Y+1,R25
    0100F 8388      ST	Y,R24
    01010 E02E      LDI	R18,0xE
    01011 2700      CLR	R16
    01012 940E 3F14 CALL	_cut_pic
(0751)     if(text_ptr<16) text_ptr++;
    01014 9180 03AB LDS	R24,text_ptr
    01016 3180      CPI	R24,0x10
    01017 F420      BCC	0x101C
    01018 5F8F      SUBI	R24,0xFF
    01019 9380 03AB STS	text_ptr,R24
    0101B C003      RJMP	0x101F
(0752) 	else text_ptr=0;
    0101C 2422      CLR	R2
    0101D 9220 03AB STS	text_ptr,R2
(0753) 	if((text_ptr==2)||(text_ptr==5)||(text_ptr==8)||(text_ptr==11)||(text_ptr==14)) text_ptr++;
    0101F 9140 03AB LDS	R20,text_ptr
    01021 3042      CPI	R20,2
    01022 F041      BEQ	0x102B
    01023 3045      CPI	R20,5
    01024 F031      BEQ	0x102B
    01025 3048      CPI	R20,0x8
    01026 F021      BEQ	0x102B
    01027 304B      CPI	R20,0xB
    01028 F011      BEQ	0x102B
    01029 304E      CPI	R20,0xE
    0102A F429      BNE	0x1030
    0102B 9180 03AB LDS	R24,text_ptr
    0102D 5F8F      SUBI	R24,0xFF
    0102E 9380 03AB STS	text_ptr,R24
(0754) 	Text[18]=Text[text_ptr];
    01030 EF8E      LDI	R24,0xFE
    01031 E093      LDI	R25,3
    01032 91E0 03AB LDS	R30,text_ptr
    01034 27FF      CLR	R31
    01035 0FE8      ADD	R30,R24
    01036 1FF9      ADC	R31,R25
    01037 8020      LD	R2,Z
    01038 9220 0410 STS	Text+18,R2
(0755) 	print_texts(335,156,0,0xD1,2,0x04bb,0xffff,Text);
    0103A 879B      STD	Y+11,R25
    0103B 878A      STD	Y+10,R24
    0103C EF8F      LDI	R24,0xFF
    0103D EF9F      LDI	R25,0xFF
    0103E 8799      STD	Y+9,R25
    0103F 8788      STD	Y+8,R24
    01040 EB8B      LDI	R24,0xBB
    01041 E094      LDI	R25,4
    01042 839F      STD	Y+7,R25
    01043 838E      STD	Y+6,R24
    01044 E082      LDI	R24,2
    01045 838C      STD	Y+4,R24
    01046 ED81      LDI	R24,0xD1
    01047 838A      STD	Y+2,R24
    01048 2422      CLR	R2
    01049 8228      ST	Y,R2
    0104A E92C      LDI	R18,0x9C
    0104B E030      LDI	R19,0
    0104C E40F      LDI	R16,0x4F
    0104D E011      LDI	R17,1
    0104E 940E 3F08 CALL	_print_texts
(0756)     print_texts(335+text_ptr*12,156,0,0xD1,2,0xffff,0x04bb,&Text[18]);
    01050 E180      LDI	R24,0x10
    01051 E094      LDI	R25,4
    01052 879B      STD	Y+11,R25
    01053 878A      STD	Y+10,R24
    01054 EB8B      LDI	R24,0xBB
    01055 E094      LDI	R25,4
    01056 8799      STD	Y+9,R25
    01057 8788      STD	Y+8,R24
    01058 EF8F      LDI	R24,0xFF
    01059 EF9F      LDI	R25,0xFF
    0105A 839F      STD	Y+7,R25
    0105B 838E      STD	Y+6,R24
    0105C E082      LDI	R24,2
    0105D 838C      STD	Y+4,R24
    0105E ED81      LDI	R24,0xD1
    0105F 838A      STD	Y+2,R24
    01060 2422      CLR	R2
    01061 8228      ST	Y,R2
    01062 E92C      LDI	R18,0x9C
    01063 E030      LDI	R19,0
    01064 9110 03AB LDS	R17,text_ptr
    01066 E00C      LDI	R16,0xC
    01067 0301      MULSU	R16,R17
    01068 0180      MOVW	R16,R0
    01069 5B01      SUBI	R16,0xB1
    0106A 4F1E      SBCI	R17,0xFE
    0106B 940E 3F08 CALL	_print_texts
(0757)   }
    0106D C09A      RJMP	0x1108
(0758)   else if(KeyID==11)
    0106E 9180 0115 LDS	R24,KeyID
    01070 308B      CPI	R24,0xB
    01071 F009      BEQ	0x1073
    01072 C095      RJMP	0x1108
(0759)   {
(0760)     cut_pic(0,14,Time_Key[KeyID].XS-28,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-28,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    01073 2EA8      MOV	R10,R24
    01074 24BB      CLR	R11
    01075 0CAA      LSL	R10
    01076 1CBB      ROL	R11
    01077 0CAA      LSL	R10
    01078 1CBB      ROL	R11
    01079 0CAA      LSL	R10
    0107A 1CBB      ROL	R11
    0107B EC8E      LDI	R24,0xCE
    0107C E091      LDI	R25,1
    0107D 01F5      MOVW	R30,R10
    0107E 0FE8      ADD	R30,R24
    0107F 1FF9      ADC	R31,R25
    01080 9027      ELPM	R2,Z+
    01081 9036      ELPM	R3,Z
    01082 863B      STD	Y+11,R3
    01083 862A      STD	Y+10,R2
    01084 EC8C      LDI	R24,0xCC
    01085 E091      LDI	R25,1
    01086 01F5      MOVW	R30,R10
    01087 0FE8      ADD	R30,R24
    01088 1FF9      ADC	R31,R25
    01089 9147      ELPM	R20,Z+
    0108A 9156      ELPM	R21,Z
    0108B 8759      STD	Y+9,R21
    0108C 8748      STD	Y+8,R20
    0108D ED82      LDI	R24,0xD2
    0108E E091      LDI	R25,1
    0108F 01F5      MOVW	R30,R10
    01090 0FE8      ADD	R30,R24
    01091 1FF9      ADC	R31,R25
    01092 9187      ELPM	R24,Z+
    01093 9196      ELPM	R25,Z
    01094 5684      SUBI	R24,0x64
    01095 4090      SBCI	R25,0
    01096 839F      STD	Y+7,R25
    01097 838E      STD	Y+6,R24
    01098 ED80      LDI	R24,0xD0
    01099 E091      LDI	R25,1
    0109A 01F5      MOVW	R30,R10
    0109B 0FE8      ADD	R30,R24
    0109C 1FF9      ADC	R31,R25
    0109D 9187      ELPM	R24,Z+
    0109E 9196      ELPM	R25,Z
    0109F 974C      SBIW	R24,0x1C
    010A0 839D      STD	Y+5,R25
    010A1 838C      STD	Y+4,R24
    010A2 EC8E      LDI	R24,0xCE
    010A3 E091      LDI	R25,1
    010A4 01F5      MOVW	R30,R10
    010A5 0FE8      ADD	R30,R24
    010A6 1FF9      ADC	R31,R25
    010A7 9187      ELPM	R24,Z+
    010A8 9196      ELPM	R25,Z
    010A9 5684      SUBI	R24,0x64
    010AA 4090      SBCI	R25,0
    010AB 839B      STD	Y+3,R25
    010AC 838A      STD	Y+2,R24
    010AD 01CA      MOVW	R24,R20
    010AE 974C      SBIW	R24,0x1C
    010AF 8399      STD	Y+1,R25
    010B0 8388      ST	Y,R24
    010B1 E02E      LDI	R18,0xE
    010B2 2700      CLR	R16
    010B3 940E 3F14 CALL	_cut_pic
(0761) 	datetime[0]=((Text[0]-'0')<<4)|(Text[1]-'0');
    010B5 9180 03FF LDS	R24,Text+1
    010B7 5380      SUBI	R24,0x30
    010B8 9190 03FE LDS	R25,Text
    010BA 5390      SUBI	R25,0x30
    010BB 709F      ANDI	R25,0xF
    010BC 9592      SWAP	R25
    010BD 2B98      OR	R25,R24
    010BE 9390 03AC STS	datetime,R25
(0762) 	datetime[1]=((Text[3]-'0')<<4)|(Text[4]-'0');
    010C0 9180 0402 LDS	R24,Text+4
    010C2 5380      SUBI	R24,0x30
    010C3 9190 0401 LDS	R25,Text+3
    010C5 5390      SUBI	R25,0x30
    010C6 709F      ANDI	R25,0xF
    010C7 9592      SWAP	R25
    010C8 2B98      OR	R25,R24
    010C9 9390 03AD STS	datetime+1,R25
(0763) 	datetime[2]=((Text[6]-'0')<<4)|(Text[7]-'0');
    010CB 9180 0405 LDS	R24,Text+7
    010CD 5380      SUBI	R24,0x30
    010CE 9190 0404 LDS	R25,Text+6
    010D0 5390      SUBI	R25,0x30
    010D1 709F      ANDI	R25,0xF
    010D2 9592      SWAP	R25
    010D3 2B98      OR	R25,R24
    010D4 9390 03AE STS	datetime+2,R25
(0764)   datetime[4]=((Text[9]-'0')<<4)|(Text[10]-'0');
    010D6 9180 0408 LDS	R24,Text+10
    010D8 5380      SUBI	R24,0x30
    010D9 9190 0407 LDS	R25,Text+9
    010DB 5390      SUBI	R25,0x30
    010DC 709F      ANDI	R25,0xF
    010DD 9592      SWAP	R25
    010DE 2B98      OR	R25,R24
    010DF 9390 03B0 STS	datetime+4,R25
(0765) 	datetime[5]=((Text[12]-'0')<<4)|(Text[13]-'0');
    010E1 9180 040B LDS	R24,Text+13
    010E3 5380      SUBI	R24,0x30
    010E4 9190 040A LDS	R25,Text+12
    010E6 5390      SUBI	R25,0x30
    010E7 709F      ANDI	R25,0xF
    010E8 9592      SWAP	R25
    010E9 2B98      OR	R25,R24
    010EA 9390 03B1 STS	datetime+5,R25
(0766) 	datetime[6]=((Text[15]-'0')<<4)|(Text[16]-'0');
    010EC 9180 040E LDS	R24,Text+16
    010EE 5380      SUBI	R24,0x30
    010EF 9190 040D LDS	R25,Text+15
    010F1 5390      SUBI	R25,0x30
    010F2 709F      ANDI	R25,0xF
    010F3 9592      SWAP	R25
    010F4 2B98      OR	R25,R24
    010F5 9390 03B2 STS	datetime+6,R25
(0767) 	clock_set(datetime[0],datetime[1],datetime[2],datetime[4],datetime[5],datetime[6]);
    010F7 2E29      MOV	R2,R25
    010F8 822E      STD	Y+6,R2
    010F9 9020 03B1 LDS	R2,datetime+5
    010FB 822C      STD	Y+4,R2
    010FC 9020 03B0 LDS	R2,datetime+4
    010FE 822A      STD	Y+2,R2
    010FF 9020 03AE LDS	R2,datetime+2
    01101 8228      ST	Y,R2
    01102 9120 03AD LDS	R18,datetime+1
    01104 9100 03AC LDS	R16,datetime
    01106 940E 3F43 CALL	_clock_set
(0768)   }
    01108 962C      ADIW	R28,0xC
    01109 940C 4514 JMP	pop_xgset300C
_TimeKeyUp:
    0110B 972C      SBIW	R28,0xC
(0769) }
(0770) void TimeKeyUp(void)
(0771) {
(0772)   if(DisPage!=TIMEPAGE) return;
    0110C 9180 0114 LDS	R24,DisPage
    0110E 3082      CPI	R24,2
    0110F F009      BEQ	0x1111
    01110 C111      RJMP	0x1222
(0773)   if(KeyID<12)
    01111 9180 0115 LDS	R24,KeyID
    01113 308C      CPI	R24,0xC
    01114 F4D0      BCC	0x112F
(0774)   {
(0775)    cut_pic(0,14,0,90,269,330,300,190);
    01115 EB8E      LDI	R24,0xBE
    01116 E090      LDI	R25,0
    01117 879B      STD	Y+11,R25
    01118 878A      STD	Y+10,R24
    01119 E28C      LDI	R24,0x2C
    0111A E091      LDI	R25,1
    0111B 8799      STD	Y+9,R25
    0111C 8788      STD	Y+8,R24
    0111D E48A      LDI	R24,0x4A
    0111E 839F      STD	Y+7,R25
    0111F 838E      STD	Y+6,R24
    01120 E08D      LDI	R24,0xD
    01121 839D      STD	Y+5,R25
    01122 838C      STD	Y+4,R24
    01123 E58A      LDI	R24,0x5A
    01124 E090      LDI	R25,0
    01125 839B      STD	Y+3,R25
    01126 838A      STD	Y+2,R24
    01127 2422      CLR	R2
    01128 2433      CLR	R3
    01129 8239      STD	Y+1,R3
    0112A 8228      ST	Y,R2
    0112B E02E      LDI	R18,0xE
    0112C 2700      CLR	R16
    0112D 940E 3F14 CALL	_cut_pic
(0776)   }
(0777)   if(KeyID<10)
    0112F 9180 0115 LDS	R24,KeyID
    01131 308A      CPI	R24,0xA
    01132 F008      BCS	0x1134
    01133 C0DB      RJMP	0x120F
(0778)   {
(0779)     if((text_ptr==3)&&(KeyID>1));
    01134 9180 03AB LDS	R24,text_ptr
    01136 3083      CPI	R24,3
    01137 F431      BNE	0x113E
    01138 E081      LDI	R24,1
    01139 9020 0115 LDS	R2,KeyID
    0113B 1582      CP	R24,R2
    0113C F408      BCC	0x113E
    0113D C0E4      RJMP	0x1222
(0780) 	else if((text_ptr==4)&&(Text[3]=='1')&&(KeyID>2));
    0113E 9180 03AB LDS	R24,text_ptr
    01140 3084      CPI	R24,4
    01141 F451      BNE	0x114C
    01142 9180 0401 LDS	R24,Text+3
    01144 3381      CPI	R24,0x31
    01145 F431      BNE	0x114C
    01146 E082      LDI	R24,2
    01147 9020 0115 LDS	R2,KeyID
    01149 1582      CP	R24,R2
    0114A F408      BCC	0x114C
    0114B C0D6      RJMP	0x1222
(0781) 	else if((text_ptr==6)&&(KeyID>3));
    0114C 9180 03AB LDS	R24,text_ptr
    0114E 3086      CPI	R24,6
    0114F F431      BNE	0x1156
    01150 E083      LDI	R24,3
    01151 9020 0115 LDS	R2,KeyID
    01153 1582      CP	R24,R2
    01154 F408      BCC	0x1156
    01155 C0CC      RJMP	0x1222
(0782) 	else if((text_ptr==7)&&(Text[6]=='3')&&(KeyID>1)); 
    01156 9180 03AB LDS	R24,text_ptr
    01158 3087      CPI	R24,7
    01159 F451      BNE	0x1164
    0115A 9180 0404 LDS	R24,Text+6
    0115C 3383      CPI	R24,0x33
    0115D F431      BNE	0x1164
    0115E E081      LDI	R24,1
    0115F 9020 0115 LDS	R2,KeyID
    01161 1582      CP	R24,R2
    01162 F408      BCC	0x1164
    01163 C0BE      RJMP	0x1222
(0783)     else if((text_ptr==9)&&(KeyID>2));
    01164 9180 03AB LDS	R24,text_ptr
    01166 3089      CPI	R24,0x9
    01167 F431      BNE	0x116E
    01168 E082      LDI	R24,2
    01169 9020 0115 LDS	R2,KeyID
    0116B 1582      CP	R24,R2
    0116C F408      BCC	0x116E
    0116D C0B4      RJMP	0x1222
(0784) 	else if((text_ptr==10)&&(Text[9]=='2')&&(KeyID>3)); 
    0116E 9180 03AB LDS	R24,text_ptr
    01170 308A      CPI	R24,0xA
    01171 F451      BNE	0x117C
    01172 9180 0407 LDS	R24,Text+9
    01174 3382      CPI	R24,0x32
    01175 F431      BNE	0x117C
    01176 E083      LDI	R24,3
    01177 9020 0115 LDS	R2,KeyID
    01179 1582      CP	R24,R2
    0117A F408      BCC	0x117C
    0117B C0A6      RJMP	0x1222
(0785) 	else if((text_ptr==12)&&(KeyID>5));
    0117C 9180 03AB LDS	R24,text_ptr
    0117E 308C      CPI	R24,0xC
    0117F F431      BNE	0x1186
    01180 E085      LDI	R24,5
    01181 9020 0115 LDS	R2,KeyID
    01183 1582      CP	R24,R2
    01184 F408      BCC	0x1186
    01185 C09C      RJMP	0x1222
(0786) 	else if((text_ptr==15)&&(KeyID>5));
    01186 9180 03AB LDS	R24,text_ptr
    01188 308F      CPI	R24,0xF
    01189 F431      BNE	0x1190
    0118A E085      LDI	R24,5
    0118B 9020 0115 LDS	R2,KeyID
    0118D 1582      CP	R24,R2
    0118E F408      BCC	0x1190
    0118F C092      RJMP	0x1222
(0787) 	else
(0788) 	{
(0789) 	  if((Text[3]=='1')&&(Text[4]>'2')) Text[4]='0';
    01190 9180 0401 LDS	R24,Text+3
    01192 3381      CPI	R24,0x31
    01193 F441      BNE	0x119C
    01194 E382      LDI	R24,0x32
    01195 9020 0402 LDS	R2,Text+4
    01197 1582      CP	R24,R2
    01198 F418      BCC	0x119C
    01199 E380      LDI	R24,0x30
    0119A 9380 0402 STS	Text+4,R24
(0790) 	  if((Text[6]=='3')&&(Text[7]>'1')) Text[7]='0';
    0119C 9180 0404 LDS	R24,Text+6
    0119E 3383      CPI	R24,0x33
    0119F F441      BNE	0x11A8
    011A0 E381      LDI	R24,0x31
    011A1 9020 0405 LDS	R2,Text+7
    011A3 1582      CP	R24,R2
    011A4 F418      BCC	0x11A8
    011A5 E380      LDI	R24,0x30
    011A6 9380 0405 STS	Text+7,R24
(0791) 	  if((Text[9]=='2')&&(Text[10]>'3')) Text[10]='0';
    011A8 9180 0407 LDS	R24,Text+9
    011AA 3382      CPI	R24,0x32
    011AB F441      BNE	0x11B4
    011AC E383      LDI	R24,0x33
    011AD 9020 0408 LDS	R2,Text+10
    011AF 1582      CP	R24,R2
    011B0 F418      BCC	0x11B4
    011B1 E380      LDI	R24,0x30
    011B2 9380 0408 STS	Text+10,R24
(0792) 	  if(text_ptr<16) text_ptr++;
    011B4 9180 03AB LDS	R24,text_ptr
    011B6 3180      CPI	R24,0x10
    011B7 F420      BCC	0x11BC
    011B8 5F8F      SUBI	R24,0xFF
    011B9 9380 03AB STS	text_ptr,R24
    011BB C003      RJMP	0x11BF
(0793) 	  else text_ptr=0;
    011BC 2422      CLR	R2
    011BD 9220 03AB STS	text_ptr,R2
(0794) 	  if((text_ptr==2)||(text_ptr==5)||(text_ptr==8)||(text_ptr==11)||(text_ptr==14)) text_ptr++;
    011BF 9020 03AB LDS	R2,text_ptr
    011C1 2D82      MOV	R24,R2
    011C2 3082      CPI	R24,2
    011C3 F041      BEQ	0x11CC
    011C4 3085      CPI	R24,5
    011C5 F031      BEQ	0x11CC
    011C6 3088      CPI	R24,0x8
    011C7 F021      BEQ	0x11CC
    011C8 308B      CPI	R24,0xB
    011C9 F011      BEQ	0x11CC
    011CA 308E      CPI	R24,0xE
    011CB F429      BNE	0x11D1
    011CC 9180 03AB LDS	R24,text_ptr
    011CE 5F8F      SUBI	R24,0xFF
    011CF 9380 03AB STS	text_ptr,R24
(0795) 	  Text[18]=Text[text_ptr];
    011D1 EF8E      LDI	R24,0xFE
    011D2 E093      LDI	R25,3
    011D3 91E0 03AB LDS	R30,text_ptr
    011D5 27FF      CLR	R31
    011D6 0FE8      ADD	R30,R24
    011D7 1FF9      ADC	R31,R25
    011D8 8020      LD	R2,Z
    011D9 9220 0410 STS	Text+18,R2
(0796) 	  print_texts(335,156,0,0xD1,2,0x04bb,0xffff,Text);
    011DB 879B      STD	Y+11,R25
    011DC 878A      STD	Y+10,R24
    011DD EF8F      LDI	R24,0xFF
    011DE EF9F      LDI	R25,0xFF
    011DF 8799      STD	Y+9,R25
    011E0 8788      STD	Y+8,R24
    011E1 EB8B      LDI	R24,0xBB
    011E2 E094      LDI	R25,4
    011E3 839F      STD	Y+7,R25
    011E4 838E      STD	Y+6,R24
    011E5 E082      LDI	R24,2
    011E6 838C      STD	Y+4,R24
    011E7 ED81      LDI	R24,0xD1
    011E8 838A      STD	Y+2,R24
    011E9 2422      CLR	R2
    011EA 8228      ST	Y,R2
    011EB E92C      LDI	R18,0x9C
    011EC E030      LDI	R19,0
    011ED E40F      LDI	R16,0x4F
    011EE E011      LDI	R17,1
    011EF 940E 3F08 CALL	_print_texts
(0797)       print_texts(335+text_ptr*12,156,0,0xD1,2,0xffff,0x04bb,&Text[18]);
    011F1 E180      LDI	R24,0x10
    011F2 E094      LDI	R25,4
    011F3 879B      STD	Y+11,R25
    011F4 878A      STD	Y+10,R24
    011F5 EB8B      LDI	R24,0xBB
    011F6 E094      LDI	R25,4
    011F7 8799      STD	Y+9,R25
    011F8 8788      STD	Y+8,R24
    011F9 EF8F      LDI	R24,0xFF
    011FA EF9F      LDI	R25,0xFF
    011FB 839F      STD	Y+7,R25
    011FC 838E      STD	Y+6,R24
    011FD E082      LDI	R24,2
    011FE 838C      STD	Y+4,R24
    011FF ED81      LDI	R24,0xD1
    01200 838A      STD	Y+2,R24
    01201 2422      CLR	R2
    01202 8228      ST	Y,R2
    01203 E92C      LDI	R18,0x9C
    01204 E030      LDI	R19,0
    01205 9110 03AB LDS	R17,text_ptr
    01207 E00C      LDI	R16,0xC
    01208 0301      MULSU	R16,R17
    01209 0180      MOVW	R16,R0
    0120A 5B01      SUBI	R16,0xB1
    0120B 4F1E      SBCI	R17,0xFE
    0120C 940E 3F08 CALL	_print_texts
(0798) 	}
(0799)   }
    0120E C013      RJMP	0x1222
(0800)   else if(KeyID==11)
    0120F 9180 0115 LDS	R24,KeyID
    01211 308B      CPI	R24,0xB
    01212 F431      BNE	0x1219
(0801)   {
(0802)     DisWelcome();
    01213 940E 090A CALL	_DisWelcome
(0803) 	DisPage=0;
    01215 2422      CLR	R2
    01216 9220 0114 STS	DisPage,R2
(0804)   }
    01218 C009      RJMP	0x1222
(0805)   else if(KeyID==12)
    01219 9180 0115 LDS	R24,KeyID
    0121B 308C      CPI	R24,0xC
    0121C F429      BNE	0x1222
(0806)   {
(0807)     DisWelcome();
    0121D 940E 090A CALL	_DisWelcome
(0808) 	DisPage=WELCOMEPAGE;
    0121F 2422      CLR	R2
    01220 9220 0114 STS	DisPage,R2
(0809)   }
    01222 962C      ADIW	R28,0xC
    01223 9508      RET
_SoundKeyDown:
    01224 972C      SBIW	R28,0xC
(0810) }
(0811) void SoundKeyDown(void)
(0812) {
(0813)   if(DisPage!=SOUNDPAGE) return;
    01225 9180 0114 LDS	R24,DisPage
    01227 3084      CPI	R24,4
    01228 F009      BEQ	0x122A
    01229 C088      RJMP	0x12B2
(0814)   KeyID=GetKeyID(Sound_Key,3); 
    0122A E023      LDI	R18,3
    0122B E304      LDI	R16,0x34
    0122C E012      LDI	R17,2
    0122D D828      RCALL	_GetKeyID
    0122E 9300 0115 STS	KeyID,R16
(0815)   if(KeyID==0)
    01230 2300      TST	R16
    01231 F409      BNE	0x1233
(0816)   {
(0817)     
(0818)   }
    01232 C07F      RJMP	0x12B2
(0819)   else if(KeyID==1)
    01233 9180 0115 LDS	R24,KeyID
    01235 3081      CPI	R24,1
    01236 F4F9      BNE	0x1256
(0820)   {
(0821)     SoundSet=0;
    01237 2422      CLR	R2
    01238 9220 011F STS	SoundSet,R2
(0822)     //EEPROMWriteBytes(SoundSetAddr,&SoundSet,1);
(0823)     cut_pic(0,14,0,331,179,531,300,200);
    0123A EC88      LDI	R24,0xC8
    0123B E090      LDI	R25,0
    0123C 879B      STD	Y+11,R25
    0123D 878A      STD	Y+10,R24
    0123E E28C      LDI	R24,0x2C
    0123F E091      LDI	R25,1
    01240 8799      STD	Y+9,R25
    01241 8788      STD	Y+8,R24
    01242 E183      LDI	R24,0x13
    01243 E092      LDI	R25,2
    01244 839F      STD	Y+7,R25
    01245 838E      STD	Y+6,R24
    01246 EB83      LDI	R24,0xB3
    01247 E090      LDI	R25,0
    01248 839D      STD	Y+5,R25
    01249 838C      STD	Y+4,R24
    0124A E48B      LDI	R24,0x4B
    0124B E091      LDI	R25,1
    0124C 839B      STD	Y+3,R25
    0124D 838A      STD	Y+2,R24
    0124E 2433      CLR	R3
    0124F 8239      STD	Y+1,R3
    01250 8228      ST	Y,R2
    01251 E02E      LDI	R18,0xE
    01252 2700      CLR	R16
    01253 940E 3F14 CALL	_cut_pic
(0824) 	//cut_pic(0,13,669,402+(SoundSet>0)*50,699,450+(SoundSet>0)*50,669,552);
(0825)   }
    01255 C05C      RJMP	0x12B2
(0826)   else if(KeyID==2)
    01256 9180 0115 LDS	R24,KeyID
    01258 3082      CPI	R24,2
    01259 F009      BEQ	0x125B
    0125A C057      RJMP	0x12B2
(0827)   {
(0828)     cut_pic(0,14,181,331,360,531,300,200);
    0125B EC88      LDI	R24,0xC8
    0125C E090      LDI	R25,0
    0125D 879B      STD	Y+11,R25
    0125E 878A      STD	Y+10,R24
    0125F E28C      LDI	R24,0x2C
    01260 E091      LDI	R25,1
    01261 8799      STD	Y+9,R25
    01262 8788      STD	Y+8,R24
    01263 E183      LDI	R24,0x13
    01264 E092      LDI	R25,2
    01265 839F      STD	Y+7,R25
    01266 838E      STD	Y+6,R24
    01267 E688      LDI	R24,0x68
    01268 E091      LDI	R25,1
    01269 839D      STD	Y+5,R25
    0126A 838C      STD	Y+4,R24
    0126B E48B      LDI	R24,0x4B
    0126C 839B      STD	Y+3,R25
    0126D 838A      STD	Y+2,R24
    0126E EB85      LDI	R24,0xB5
    0126F E090      LDI	R25,0
    01270 8399      STD	Y+1,R25
    01271 8388      ST	Y,R24
    01272 E02E      LDI	R18,0xE
    01273 2700      CLR	R16
    01274 940E 3F14 CALL	_cut_pic
(0829) 	cut_pic(0,14,1,371,170,371+(Touch_Y-240)/15*15,301,240);
    01276 EF80      LDI	R24,0xF0
    01277 E090      LDI	R25,0
    01278 879B      STD	Y+11,R25
    01279 878A      STD	Y+10,R24
    0127A E28D      LDI	R24,0x2D
    0127B E091      LDI	R25,1
    0127C 8799      STD	Y+9,R25
    0127D 8788      STD	Y+8,R24
    0127E E02F      LDI	R18,0xF
    0127F E030      LDI	R19,0
    01280 9100 03E6 LDS	R16,Touch_Y
    01282 9110 03E7 LDS	R17,Touch_Y+1
    01284 5F00      SUBI	R16,0xF0
    01285 4010      SBCI	R17,0
    01286 940E 4409 CALL	div16u
    01288 0198      MOVW	R18,R16
    01289 E00F      LDI	R16,0xF
    0128A E010      LDI	R17,0
    0128B 940E 44A5 CALL	empy16s
    0128D 01C8      MOVW	R24,R16
    0128E 588D      SUBI	R24,0x8D
    0128F 4F9E      SBCI	R25,0xFE
    01290 839F      STD	Y+7,R25
    01291 838E      STD	Y+6,R24
    01292 EA8A      LDI	R24,0xAA
    01293 E090      LDI	R25,0
    01294 839D      STD	Y+5,R25
    01295 838C      STD	Y+4,R24
    01296 E783      LDI	R24,0x73
    01297 E091      LDI	R25,1
    01298 839B      STD	Y+3,R25
    01299 838A      STD	Y+2,R24
    0129A E081      LDI	R24,1
    0129B E090      LDI	R25,0
    0129C 8399      STD	Y+1,R25
    0129D 8388      ST	Y,R24
    0129E E02E      LDI	R18,0xE
    0129F 2700      CLR	R16
    012A0 940E 3F14 CALL	_cut_pic
(0830) 	//cut_pic(0,13,669,402+(SoundSet>0)*50,699,450+(SoundSet>0)*50,669,552);
(0831) 	SoundSet=10-(Touch_Y-240)/15;
    012A2 E02F      LDI	R18,0xF
    012A3 E030      LDI	R19,0
    012A4 9100 03E6 LDS	R16,Touch_Y
    012A6 9110 03E7 LDS	R17,Touch_Y+1
    012A8 5F00      SUBI	R16,0xF0
    012A9 4010      SBCI	R17,0
    012AA 940E 4409 CALL	div16u
    012AC E08A      LDI	R24,0xA
    012AD E090      LDI	R25,0
    012AE 1B80      SUB	R24,R16
    012AF 0B91      SBC	R25,R17
    012B0 9380 011F STS	SoundSet,R24
(0832)     //EEPROMWriteBytes(SoundSetAddr,&SoundSet,1);
(0833)   }
    012B2 962C      ADIW	R28,0xC
    012B3 9508      RET
(0834) }
(0835) void SoundKeyUP(void)
(0836) {
(0837)  if(DisPage!=SOUNDPAGE) return; 
_SoundKeyUP:
    012B4 9180 0114 LDS	R24,DisPage
    012B6 3084      CPI	R24,4
    012B7 F009      BEQ	0x12B9
    012B8 C009      RJMP	0x12C2
(0838)  if(KeyID==0)
    012B9 9020 0115 LDS	R2,KeyID
    012BB 2022      TST	R2
    012BC F429      BNE	0x12C2
(0839)   {
(0840)     DisWelcome();
    012BD 940E 090A CALL	_DisWelcome
(0841) 	DisPage=WELCOMEPAGE;
    012BF 2422      CLR	R2
    012C0 9220 0114 STS	DisPage,R2
(0842)   }
    012C2 9508      RET
_LanguageKeyDown:
    012C3 934A      ST	-Y,R20
    012C4 935A      ST	-Y,R21
    012C5 972C      SBIW	R28,0xC
(0843) }
(0844) void LanguageKeyDown(void)
(0845) {
(0846)  if(DisPage!=LANGUAGEPAGE) return;
    012C6 9180 0114 LDS	R24,DisPage
    012C8 3085      CPI	R24,5
    012C9 F009      BEQ	0x12CB
    012CA C071      RJMP	0x133C
(0847)  KeyID=GetKeyID(Language_Key,17); 
    012CB E121      LDI	R18,0x11
    012CC E40C      LDI	R16,0x4C
    012CD E012      LDI	R17,2
    012CE 940E 0A56 CALL	_GetKeyID
    012D0 9300 0115 STS	KeyID,R16
(0848)  if(KeyID<16)
    012D2 2F80      MOV	R24,R16
    012D3 3100      CPI	R16,0x10
    012D4 F008      BCS	0x12D6
    012D5 C062      RJMP	0x1338
(0849)  {
(0850)    Language=KeyID;
    012D6 2E28      MOV	R2,R24
    012D7 9220 0122 STS	Language,R2
(0851)    cut_pic(0,15,0,0,374,400,300,100);
    012D9 E684      LDI	R24,0x64
    012DA E090      LDI	R25,0
    012DB 879B      STD	Y+11,R25
    012DC 878A      STD	Y+10,R24
    012DD E28C      LDI	R24,0x2C
    012DE E091      LDI	R25,1
    012DF 8799      STD	Y+9,R25
    012E0 8788      STD	Y+8,R24
    012E1 E980      LDI	R24,0x90
    012E2 839F      STD	Y+7,R25
    012E3 838E      STD	Y+6,R24
    012E4 E786      LDI	R24,0x76
    012E5 839D      STD	Y+5,R25
    012E6 838C      STD	Y+4,R24
    012E7 2422      CLR	R2
    012E8 2433      CLR	R3
    012E9 823B      STD	Y+3,R3
    012EA 822A      STD	Y+2,R2
    012EB 8239      STD	Y+1,R3
    012EC 8228      ST	Y,R2
    012ED E02F      LDI	R18,0xF
    012EE 2700      CLR	R16
    012EF 940E 3F14 CALL	_cut_pic
(0852)    cut_pic(0,15,Language_Key[KeyID].XS+75,Language_Key[KeyID].YS-100,Language_Key[KeyID].XE+75,Language_Key[KeyID].YE-100,Language_Key[KeyID].XS,Language_Key[KeyID].YS);
    012F1 9020 0115 LDS	R2,KeyID
    012F3 2433      CLR	R3
    012F4 0C22      LSL	R2
    012F5 1C33      ROL	R3
    012F6 0C22      LSL	R2
    012F7 1C33      ROL	R3
    012F8 0C22      LSL	R2
    012F9 1C33      ROL	R3
    012FA 0121      MOVW	R4,R2
    012FB E48E      LDI	R24,0x4E
    012FC E092      LDI	R25,2
    012FD 01F1      MOVW	R30,R2
    012FE 0FE8      ADD	R30,R24
    012FF 1FF9      ADC	R31,R25
    01300 9027      ELPM	R2,Z+
    01301 9036      ELPM	R3,Z
    01302 863B      STD	Y+11,R3
    01303 862A      STD	Y+10,R2
    01304 E48C      LDI	R24,0x4C
    01305 E092      LDI	R25,2
    01306 01F2      MOVW	R30,R4
    01307 0FE8      ADD	R30,R24
    01308 1FF9      ADC	R31,R25
    01309 9147      ELPM	R20,Z+
    0130A 9156      ELPM	R21,Z
    0130B 8759      STD	Y+9,R21
    0130C 8748      STD	Y+8,R20
    0130D E582      LDI	R24,0x52
    0130E E092      LDI	R25,2
    0130F 01F2      MOVW	R30,R4
    01310 0FE8      ADD	R30,R24
    01311 1FF9      ADC	R31,R25
    01312 9187      ELPM	R24,Z+
    01313 9196      ELPM	R25,Z
    01314 5684      SUBI	R24,0x64
    01315 4090      SBCI	R25,0
    01316 839F      STD	Y+7,R25
    01317 838E      STD	Y+6,R24
    01318 E580      LDI	R24,0x50
    01319 E092      LDI	R25,2
    0131A 01F2      MOVW	R30,R4
    0131B 0FE8      ADD	R30,R24
    0131C 1FF9      ADC	R31,R25
    0131D 9187      ELPM	R24,Z+
    0131E 9196      ELPM	R25,Z
    0131F 5B85      SUBI	R24,0xB5
    01320 4F9F      SBCI	R25,0xFF
    01321 839D      STD	Y+5,R25
    01322 838C      STD	Y+4,R24
    01323 E48E      LDI	R24,0x4E
    01324 E092      LDI	R25,2
    01325 01F2      MOVW	R30,R4
    01326 0FE8      ADD	R30,R24
    01327 1FF9      ADC	R31,R25
    01328 9187      ELPM	R24,Z+
    01329 9196      ELPM	R25,Z
    0132A 5684      SUBI	R24,0x64
    0132B 4090      SBCI	R25,0
    0132C 839B      STD	Y+3,R25
    0132D 838A      STD	Y+2,R24
    0132E 01CA      MOVW	R24,R20
    0132F 5B85      SUBI	R24,0xB5
    01330 4F9F      SBCI	R25,0xFF
    01331 8399      STD	Y+1,R25
    01332 8388      ST	Y,R24
    01333 E02F      LDI	R18,0xF
    01334 2700      CLR	R16
    01335 940E 3F14 CALL	_cut_pic
(0853)  }
    01337 C004      RJMP	0x133C
(0854)  else if(KeyID==16)
    01338 9180 0115 LDS	R24,KeyID
    0133A 3180      CPI	R24,0x10
    0133B F401      BNE	0x133C
(0855)  {
(0856) 
(0857)  }
    0133C 962C      ADIW	R28,0xC
    0133D 9159      LD	R21,Y+
    0133E 9149      LD	R20,Y+
    0133F 9508      RET
(0858) }
(0859) void LanguageKeyUp(void)
(0860) {
(0861)  if(DisPage!=LANGUAGEPAGE) return;
_LanguageKeyUp:
    01340 9180 0114 LDS	R24,DisPage
    01342 3085      CPI	R24,5
    01343 F009      BEQ	0x1345
    01344 C007      RJMP	0x134C
(0862)  if(KeyID==16)
    01345 9180 0115 LDS	R24,KeyID
    01347 3180      CPI	R24,0x10
    01348 F419      BNE	0x134C
(0863)  {
(0864)    //EEPROMWriteBytes(LanguageAddr,&Language,1);
(0865)   // DisWelcome();
(0866)    DisPage=WELCOMEPAGE;
    01349 2422      CLR	R2
    0134A 9220 0114 STS	DisPage,R2
(0867)  }
    0134C 9508      RET
_BackKeyDown:
    0134D 940E 4523 CALL	push_xgsetF00C
    0134F 972C      SBIW	R28,0xC
(0868) }
(0869) void BackKeyDown(void)
(0870) {
(0871)  if(DisPage!=BACKPAGE) return;
    01350 9180 0114 LDS	R24,DisPage
    01352 3086      CPI	R24,6
    01353 F009      BEQ	0x1355
    01354 C094      RJMP	0x13E9
(0872)  KeyID=GetKeyID(Back_Key,4); 
    01355 E024      LDI	R18,4
    01356 ED04      LDI	R16,0xD4
    01357 E012      LDI	R17,2
    01358 940E 0A56 CALL	_GetKeyID
    0135A 9300 0115 STS	KeyID,R16
(0873)  if((KeyID==0)&&(BackSet>0)) 
    0135C 2300      TST	R16
    0135D F009      BEQ	0x135F
    0135E C044      RJMP	0x13A3
    0135F E080      LDI	R24,0
    01360 9020 0116 LDS	R2,BackSet
    01362 1582      CP	R24,R2
    01363 F008      BCS	0x1365
    01364 C03E      RJMP	0x13A3
(0874)  {
(0875)    BackSet--;
    01365 2D82      MOV	R24,R2
    01366 5081      SUBI	R24,1
    01367 9380 0116 STS	BackSet,R24
(0876)    cut_pic(0,16+BackSet/6,(BackSet%3)*241,(BackSet%6/3)*270,(BackSet%3)*241+239,(BackSet%6/3)*270+269,300,200);
    01369 EC88      LDI	R24,0xC8
    0136A E090      LDI	R25,0
    0136B 879B      STD	Y+11,R25
    0136C 878A      STD	Y+10,R24
    0136D E28C      LDI	R24,0x2C
    0136E E091      LDI	R25,1
    0136F 8799      STD	Y+9,R25
    01370 8788      STD	Y+8,R24
    01371 9020 0116 LDS	R2,BackSet
    01373 E026      LDI	R18,6
    01374 E030      LDI	R19,0
    01375 2D02      MOV	R16,R2
    01376 2711      CLR	R17
    01377 940E 43E9 CALL	mod16s
    01379 E023      LDI	R18,3
    0137A E030      LDI	R19,0
    0137B 940E 43ED CALL	div16s
    0137D E08E      LDI	R24,0xE
    0137E E091      LDI	R25,1
    0137F 0198      MOVW	R18,R16
    01380 018C      MOVW	R16,R24
    01381 940E 44A5 CALL	empy16s
    01383 01B8      MOVW	R22,R16
    01384 01CB      MOVW	R24,R22
    01385 5F83      SUBI	R24,0xF3
    01386 4F9E      SBCI	R25,0xFE
    01387 839F      STD	Y+7,R25
    01388 838E      STD	Y+6,R24
    01389 E013      LDI	R17,3
    0138A 2D02      MOV	R16,R2
    0138B 940E 448D CALL	mod8u
    0138D EF81      LDI	R24,0xF1
    0138E 9F80      MUL	R24,R16
    0138F 01A0      MOVW	R20,R0
    01390 01CA      MOVW	R24,R20
    01391 5181      SUBI	R24,0x11
    01392 4F9F      SBCI	R25,0xFF
    01393 839D      STD	Y+5,R25
    01394 838C      STD	Y+4,R24
    01395 837B      STD	Y+3,R23
    01396 836A      STD	Y+2,R22
    01397 8359      STD	Y+1,R21
    01398 8348      ST	Y,R20
    01399 E016      LDI	R17,6
    0139A 2D02      MOV	R16,R2
    0139B 940E 448F CALL	div8u
    0139D 2F20      MOV	R18,R16
    0139E 5F20      SUBI	R18,0xF0
    0139F 2700      CLR	R16
    013A0 940E 3F14 CALL	_cut_pic
(0877)  } 
    013A2 C046      RJMP	0x13E9
(0878)  else if((KeyID==1)&&(BackSet<9)) 
    013A3 9180 0115 LDS	R24,KeyID
    013A5 3081      CPI	R24,1
    013A6 F009      BEQ	0x13A8
    013A7 C041      RJMP	0x13E9
    013A8 9180 0116 LDS	R24,BackSet
    013AA 3089      CPI	R24,0x9
    013AB F008      BCS	0x13AD
    013AC C03C      RJMP	0x13E9
(0879)  {
(0880)    BackSet++;
    013AD 5F8F      SUBI	R24,0xFF
    013AE 9380 0116 STS	BackSet,R24
(0881)    cut_pic(0,16+BackSet/6,(BackSet%3)*241,(BackSet%6/3)*270,(BackSet%3)*241+239,(BackSet%6/3)*270+269,300,200);
    013B0 EC88      LDI	R24,0xC8
    013B1 E090      LDI	R25,0
    013B2 879B      STD	Y+11,R25
    013B3 878A      STD	Y+10,R24
    013B4 E28C      LDI	R24,0x2C
    013B5 E091      LDI	R25,1
    013B6 8799      STD	Y+9,R25
    013B7 8788      STD	Y+8,R24
    013B8 90A0 0116 LDS	R10,BackSet
    013BA E026      LDI	R18,6
    013BB E030      LDI	R19,0
    013BC 2D0A      MOV	R16,R10
    013BD 2711      CLR	R17
    013BE 940E 43E9 CALL	mod16s
    013C0 E023      LDI	R18,3
    013C1 E030      LDI	R19,0
    013C2 940E 43ED CALL	div16s
    013C4 E08E      LDI	R24,0xE
    013C5 E091      LDI	R25,1
    013C6 0198      MOVW	R18,R16
    013C7 018C      MOVW	R16,R24
    013C8 940E 44A5 CALL	empy16s
    013CA 01B8      MOVW	R22,R16
    013CB 01CB      MOVW	R24,R22
    013CC 5F83      SUBI	R24,0xF3
    013CD 4F9E      SBCI	R25,0xFE
    013CE 839F      STD	Y+7,R25
    013CF 838E      STD	Y+6,R24
    013D0 E013      LDI	R17,3
    013D1 2D0A      MOV	R16,R10
    013D2 940E 448D CALL	mod8u
    013D4 EF81      LDI	R24,0xF1
    013D5 9F80      MUL	R24,R16
    013D6 01A0      MOVW	R20,R0
    013D7 01CA      MOVW	R24,R20
    013D8 5181      SUBI	R24,0x11
    013D9 4F9F      SBCI	R25,0xFF
    013DA 839D      STD	Y+5,R25
    013DB 838C      STD	Y+4,R24
    013DC 837B      STD	Y+3,R23
    013DD 836A      STD	Y+2,R22
    013DE 8359      STD	Y+1,R21
    013DF 8348      ST	Y,R20
    013E0 E016      LDI	R17,6
    013E1 2D0A      MOV	R16,R10
    013E2 940E 448F CALL	div8u
    013E4 2F20      MOV	R18,R16
    013E5 5F20      SUBI	R18,0xF0
    013E6 2700      CLR	R16
    013E7 940E 3F14 CALL	_cut_pic
(0882)  } 
    013E9 962C      ADIW	R28,0xC
    013EA 940C 452A JMP	pop_xgsetF00C
(0883) }
(0884) void BackKeyUp(void)
(0885) {
(0886)  if(DisPage!=BACKPAGE) return;
_BackKeyUp:
    013EC 9180 0114 LDS	R24,DisPage
    013EE 3086      CPI	R24,6
    013EF F009      BEQ	0x13F1
    013F0 C013      RJMP	0x1404
(0887)  if(KeyID==2)
    013F1 9180 0115 LDS	R24,KeyID
    013F3 3082      CPI	R24,2
    013F4 F431      BNE	0x13FB
(0888)  {
(0889)    //EEPROMWriteBytes(BackSetAddr,&BackSet,1);
(0890)    DisWelcome();
    013F5 940E 090A CALL	_DisWelcome
(0891)    DisPage=WELCOMEPAGE;
    013F7 2422      CLR	R2
    013F8 9220 0114 STS	DisPage,R2
(0892)  } 
    013FA C009      RJMP	0x1404
(0893)  else if(KeyID==3)
    013FB 9180 0115 LDS	R24,KeyID
    013FD 3083      CPI	R24,3
    013FE F429      BNE	0x1404
(0894)  {
(0895)    //EEPROMReadBytes(BackSetAddr,&BackSet,1);
(0896)    DisWelcome();
    013FF 940E 090A CALL	_DisWelcome
(0897)    DisPage=WELCOMEPAGE;
    01401 2422      CLR	R2
    01402 9220 0114 STS	DisPage,R2
(0898)  }  
    01404 9508      RET
_USBKeyDown:
    01405 972C      SBIW	R28,0xC
(0899) }
(0900) void USBKeyDown(void)
(0901) {
(0902)  if(DisPage!=USBPAGE) return;
    01406 9180 0114 LDS	R24,DisPage
    01408 3087      CPI	R24,7
    01409 F009      BEQ	0x140B
    0140A C037      RJMP	0x1442
(0903)  KeyID=GetKeyID(USB_Key,3); 
    0140B E023      LDI	R18,3
    0140C EF04      LDI	R16,0xF4
    0140D E012      LDI	R17,2
    0140E 940E 0A56 CALL	_GetKeyID
    01410 9300 0115 STS	KeyID,R16
(0904)  if(KeyID==0)
    01412 2300      TST	R16
    01413 F009      BEQ	0x1415
    01414 C02D      RJMP	0x1442
(0905)  {
(0906)    cut_pic(0,26,USB_Key[0].XS-300,USB_Key[0].YS+223,USB_Key[0].XE-300,USB_Key[0].YE+223,USB_Key[0].XS,USB_Key[0].YS);
    01415 EFE6      LDI	R30,0xF6
    01416 E0F2      LDI	R31,2
    01417 9027      ELPM	R2,Z+
    01418 9036      ELPM	R3,Z
    01419 863B      STD	Y+11,R3
    0141A 862A      STD	Y+10,R2
    0141B EFE4      LDI	R30,0xF4
    0141C E0F2      LDI	R31,2
    0141D 9027      ELPM	R2,Z+
    0141E 9036      ELPM	R3,Z
    0141F 8639      STD	Y+9,R3
    01420 8628      STD	Y+8,R2
    01421 EFEA      LDI	R30,0xFA
    01422 E0F2      LDI	R31,2
    01423 9187      ELPM	R24,Z+
    01424 9196      ELPM	R25,Z
    01425 5281      SUBI	R24,0x21
    01426 4F9F      SBCI	R25,0xFF
    01427 839F      STD	Y+7,R25
    01428 838E      STD	Y+6,R24
    01429 EFE8      LDI	R30,0xF8
    0142A E0F2      LDI	R31,2
    0142B 9187      ELPM	R24,Z+
    0142C 9196      ELPM	R25,Z
    0142D 528C      SUBI	R24,0x2C
    0142E 4091      SBCI	R25,1
    0142F 839D      STD	Y+5,R25
    01430 838C      STD	Y+4,R24
    01431 EFE6      LDI	R30,0xF6
    01432 E0F2      LDI	R31,2
    01433 9187      ELPM	R24,Z+
    01434 9196      ELPM	R25,Z
    01435 5281      SUBI	R24,0x21
    01436 4F9F      SBCI	R25,0xFF
    01437 839B      STD	Y+3,R25
    01438 838A      STD	Y+2,R24
    01439 01C1      MOVW	R24,R2
    0143A 528C      SUBI	R24,0x2C
    0143B 4091      SBCI	R25,1
    0143C 8399      STD	Y+1,R25
    0143D 8388      ST	Y,R24
    0143E E12A      LDI	R18,0x1A
    0143F 2700      CLR	R16
    01440 940E 3F14 CALL	_cut_pic
(0907)  }
    01442 962C      ADIW	R28,0xC
    01443 9508      RET
_USBKeyUp:
    01444 972C      SBIW	R28,0xC
(0908) }
(0909) void USBKeyUp(void)
(0910) {
(0911)  if(DisPage!=USBPAGE) return;
    01445 9180 0114 LDS	R24,DisPage
    01447 3087      CPI	R24,7
    01448 F009      BEQ	0x144A
    01449 C047      RJMP	0x1491
(0912)  if(KeyID==0)
    0144A 9020 0115 LDS	R2,KeyID
    0144C 2022      TST	R2
    0144D F009      BEQ	0x144F
    0144E C039      RJMP	0x1488
(0913)  {
(0914)    cut_pic(0,26,USB_Key[0].XS-300,USB_Key[0].YS+82,USB_Key[0].XE-300,USB_Key[0].YE+82,USB_Key[0].XS,USB_Key[0].YS);
    0144F EFE6      LDI	R30,0xF6
    01450 E0F2      LDI	R31,2
    01451 9027      ELPM	R2,Z+
    01452 9036      ELPM	R3,Z
    01453 863B      STD	Y+11,R3
    01454 862A      STD	Y+10,R2
    01455 EFE4      LDI	R30,0xF4
    01456 E0F2      LDI	R31,2
    01457 9027      ELPM	R2,Z+
    01458 9036      ELPM	R3,Z
    01459 8639      STD	Y+9,R3
    0145A 8628      STD	Y+8,R2
    0145B EFEA      LDI	R30,0xFA
    0145C E0F2      LDI	R31,2
    0145D 9187      ELPM	R24,Z+
    0145E 9196      ELPM	R25,Z
    0145F 5A8E      SUBI	R24,0xAE
    01460 4F9F      SBCI	R25,0xFF
    01461 839F      STD	Y+7,R25
    01462 838E      STD	Y+6,R24
    01463 EFE8      LDI	R30,0xF8
    01464 E0F2      LDI	R31,2
    01465 9187      ELPM	R24,Z+
    01466 9196      ELPM	R25,Z
    01467 528C      SUBI	R24,0x2C
    01468 4091      SBCI	R25,1
    01469 839D      STD	Y+5,R25
    0146A 838C      STD	Y+4,R24
    0146B EFE6      LDI	R30,0xF6
    0146C E0F2      LDI	R31,2
    0146D 9187      ELPM	R24,Z+
    0146E 9196      ELPM	R25,Z
    0146F 5A8E      SUBI	R24,0xAE
    01470 4F9F      SBCI	R25,0xFF
    01471 839B      STD	Y+3,R25
    01472 838A      STD	Y+2,R24
    01473 01C1      MOVW	R24,R2
    01474 528C      SUBI	R24,0x2C
    01475 4091      SBCI	R25,1
    01476 8399      STD	Y+1,R25
    01477 8388      ST	Y,R24
    01478 E12A      LDI	R18,0x1A
    01479 2700      CLR	R16
    0147A 940E 3F14 CALL	_cut_pic
(0915)    Up_Pic();
    0147C 940E 40EB CALL	_Up_Pic
(0916)    Delay_MS(1000);
    0147E EE08      LDI	R16,0xE8
    0147F E013      LDI	R17,3
    01480 940E 2F84 CALL	_Delay_MS
(0917)    DisWelcome();
    01482 940E 090A CALL	_DisWelcome
(0918)    DisPage=WELCOMEPAGE;
    01484 2422      CLR	R2
    01485 9220 0114 STS	DisPage,R2
(0919)  }
    01487 C009      RJMP	0x1491
(0920)  else if(KeyID==2)
    01488 9180 0115 LDS	R24,KeyID
    0148A 3082      CPI	R24,2
    0148B F429      BNE	0x1491
(0921)  {
(0922)    DisWelcome();
    0148C 940E 090A CALL	_DisWelcome
(0923)    DisPage=WELCOMEPAGE;
    0148E 2422      CLR	R2
    0148F 9220 0114 STS	DisPage,R2
(0924)  } 
    01491 962C      ADIW	R28,0xC
    01492 9508      RET
_CardKeyDown:
    01493 934A      ST	-Y,R20
    01494 935A      ST	-Y,R21
    01495 972C      SBIW	R28,0xC
(0925) }
(0926) void CardKeyDown(void)
(0927) {
(0928)  if(DisPage!=CARDPAGE) return;
    01496 9180 0114 LDS	R24,DisPage
    01498 3088      CPI	R24,0x8
    01499 F009      BEQ	0x149B
    0149A C336      RJMP	0x17D1
(0929)  KeyID=GetKeyID(Card_Key,16);
    0149B E120      LDI	R18,0x10
    0149C E00C      LDI	R16,0xC
    0149D E013      LDI	R17,3
    0149E 940E 0A56 CALL	_GetKeyID
    014A0 9300 0115 STS	KeyID,R16
(0930)  if(KeyID<15)
    014A2 2F80      MOV	R24,R16
    014A3 300F      CPI	R16,0xF
    014A4 F008      BCS	0x14A6
    014A5 C043      RJMP	0x14E9
(0931)  {
(0932)    cut_pic(0,18,Card_Key[KeyID].XS-29,Card_Key[KeyID].YS-100,Card_Key[KeyID].XE-29,Card_Key[KeyID].YE-100,Card_Key[KeyID].XS,Card_Key[KeyID].YS);
    014A6 2E28      MOV	R2,R24
    014A7 2433      CLR	R3
    014A8 0C22      LSL	R2
    014A9 1C33      ROL	R3
    014AA 0C22      LSL	R2
    014AB 1C33      ROL	R3
    014AC 0C22      LSL	R2
    014AD 1C33      ROL	R3
    014AE 0121      MOVW	R4,R2
    014AF E08E      LDI	R24,0xE
    014B0 E093      LDI	R25,3
    014B1 01F1      MOVW	R30,R2
    014B2 0FE8      ADD	R30,R24
    014B3 1FF9      ADC	R31,R25
    014B4 9027      ELPM	R2,Z+
    014B5 9036      ELPM	R3,Z
    014B6 863B      STD	Y+11,R3
    014B7 862A      STD	Y+10,R2
    014B8 E08C      LDI	R24,0xC
    014B9 E093      LDI	R25,3
    014BA 01F2      MOVW	R30,R4
    014BB 0FE8      ADD	R30,R24
    014BC 1FF9      ADC	R31,R25
    014BD 9147      ELPM	R20,Z+
    014BE 9156      ELPM	R21,Z
    014BF 8759      STD	Y+9,R21
    014C0 8748      STD	Y+8,R20
    014C1 E182      LDI	R24,0x12
    014C2 E093      LDI	R25,3
    014C3 01F2      MOVW	R30,R4
    014C4 0FE8      ADD	R30,R24
    014C5 1FF9      ADC	R31,R25
    014C6 9187      ELPM	R24,Z+
    014C7 9196      ELPM	R25,Z
    014C8 5684      SUBI	R24,0x64
    014C9 4090      SBCI	R25,0
    014CA 839F      STD	Y+7,R25
    014CB 838E      STD	Y+6,R24
    014CC E180      LDI	R24,0x10
    014CD E093      LDI	R25,3
    014CE 01F2      MOVW	R30,R4
    014CF 0FE8      ADD	R30,R24
    014D0 1FF9      ADC	R31,R25
    014D1 9187      ELPM	R24,Z+
    014D2 9196      ELPM	R25,Z
    014D3 974D      SBIW	R24,0x1D
    014D4 839D      STD	Y+5,R25
    014D5 838C      STD	Y+4,R24
    014D6 E08E      LDI	R24,0xE
    014D7 E093      LDI	R25,3
    014D8 01F2      MOVW	R30,R4
    014D9 0FE8      ADD	R30,R24
    014DA 1FF9      ADC	R31,R25
    014DB 9187      ELPM	R24,Z+
    014DC 9196      ELPM	R25,Z
    014DD 5684      SUBI	R24,0x64
    014DE 4090      SBCI	R25,0
    014DF 839B      STD	Y+3,R25
    014E0 838A      STD	Y+2,R24
    014E1 01CA      MOVW	R24,R20
    014E2 974D      SBIW	R24,0x1D
    014E3 8399      STD	Y+1,R25
    014E4 8388      ST	Y,R24
    014E5 E122      LDI	R18,0x12
    014E6 2700      CLR	R16
    014E7 940E 3F14 CALL	_cut_pic
(0933)  }
(0934)  if((KeyID<10)&&(text_ptr<9))
    014E9 9180 0115 LDS	R24,KeyID
    014EB 308A      CPI	R24,0xA
    014EC F008      BCS	0x14EE
    014ED C05C      RJMP	0x154A
    014EE 9180 03AB LDS	R24,text_ptr
    014F0 3089      CPI	R24,0x9
    014F1 F008      BCS	0x14F3
    014F2 C057      RJMP	0x154A
(0935)  {
(0936)    Text[text_ptr]=KeyID+'0';
    014F3 EF8E      LDI	R24,0xFE
    014F4 E093      LDI	R25,3
    014F5 91E0 03AB LDS	R30,text_ptr
    014F7 27FF      CLR	R31
    014F8 0FE8      ADD	R30,R24
    014F9 1FF9      ADC	R31,R25
    014FA 9180 0115 LDS	R24,KeyID
    014FC 5D80      SUBI	R24,0xD0
    014FD 8380      ST	Z,R24
(0937)    Text[10]=Text[text_ptr];
    014FE EF8E      LDI	R24,0xFE
    014FF E093      LDI	R25,3
    01500 91E0 03AB LDS	R30,text_ptr
    01502 27FF      CLR	R31
    01503 0FE8      ADD	R30,R24
    01504 1FF9      ADC	R31,R25
    01505 8020      LD	R2,Z
    01506 9220 0408 STS	Text+10,R2
(0938)    if(text_ptr<3) print_texts(343+text_ptr*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    01508 9180 03AB LDS	R24,text_ptr
    0150A 3083      CPI	R24,3
    0150B F4F0      BCC	0x152A
    0150C E088      LDI	R24,0x8
    0150D E094      LDI	R25,4
    0150E 879B      STD	Y+11,R25
    0150F 878A      STD	Y+10,R24
    01510 EB8B      LDI	R24,0xBB
    01511 E094      LDI	R25,4
    01512 8799      STD	Y+9,R25
    01513 8788      STD	Y+8,R24
    01514 EF8F      LDI	R24,0xFF
    01515 EF9F      LDI	R25,0xFF
    01516 839F      STD	Y+7,R25
    01517 838E      STD	Y+6,R24
    01518 E082      LDI	R24,2
    01519 838C      STD	Y+4,R24
    0151A ED81      LDI	R24,0xD1
    0151B 838A      STD	Y+2,R24
    0151C 2422      CLR	R2
    0151D 8228      ST	Y,R2
    0151E E928      LDI	R18,0x98
    0151F E030      LDI	R19,0
    01520 9110 03AB LDS	R17,text_ptr
    01522 E00C      LDI	R16,0xC
    01523 0301      MULSU	R16,R17
    01524 0180      MOVW	R16,R0
    01525 5A09      SUBI	R16,0xA9
    01526 4F1E      SBCI	R17,0xFE
    01527 940E 3F08 CALL	_print_texts
    01529 C2A7      RJMP	0x17D1
(0939)    else print_texts(482+(text_ptr-4)*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    0152A E088      LDI	R24,0x8
    0152B E094      LDI	R25,4
    0152C 879B      STD	Y+11,R25
    0152D 878A      STD	Y+10,R24
    0152E EB8B      LDI	R24,0xBB
    0152F E094      LDI	R25,4
    01530 8799      STD	Y+9,R25
    01531 8788      STD	Y+8,R24
    01532 EF8F      LDI	R24,0xFF
    01533 EF9F      LDI	R25,0xFF
    01534 839F      STD	Y+7,R25
    01535 838E      STD	Y+6,R24
    01536 E082      LDI	R24,2
    01537 838C      STD	Y+4,R24
    01538 ED81      LDI	R24,0xD1
    01539 838A      STD	Y+2,R24
    0153A 2422      CLR	R2
    0153B 8228      ST	Y,R2
    0153C E928      LDI	R18,0x98
    0153D E030      LDI	R19,0
    0153E 9110 03AB LDS	R17,text_ptr
    01540 E00C      LDI	R16,0xC
    01541 0301      MULSU	R16,R17
    01542 0180      MOVW	R16,R0
    01543 5300      SUBI	R16,0x30
    01544 4010      SBCI	R17,0
    01545 510E      SUBI	R16,0x1E
    01546 4F1E      SBCI	R17,0xFE
    01547 940E 3F08 CALL	_print_texts
(0940)  }
    01549 C287      RJMP	0x17D1
(0941)  else if((KeyID==10)&&(text_ptr<9))
    0154A 9180 0115 LDS	R24,KeyID
    0154C 308A      CPI	R24,0xA
    0154D F009      BEQ	0x154F
    0154E C09D      RJMP	0x15EC
    0154F 9180 03AB LDS	R24,text_ptr
    01551 3089      CPI	R24,0x9
    01552 F008      BCS	0x1554
    01553 C098      RJMP	0x15EC
(0942)  {
(0943)    print_texts(343,152,0,0xD1,2,0x04bb,0xffff,Text);
    01554 EF8E      LDI	R24,0xFE
    01555 E093      LDI	R25,3
    01556 879B      STD	Y+11,R25
    01557 878A      STD	Y+10,R24
    01558 EF8F      LDI	R24,0xFF
    01559 EF9F      LDI	R25,0xFF
    0155A 8799      STD	Y+9,R25
    0155B 8788      STD	Y+8,R24
    0155C EB8B      LDI	R24,0xBB
    0155D E094      LDI	R25,4
    0155E 839F      STD	Y+7,R25
    0155F 838E      STD	Y+6,R24
    01560 E082      LDI	R24,2
    01561 838C      STD	Y+4,R24
    01562 ED81      LDI	R24,0xD1
    01563 838A      STD	Y+2,R24
    01564 2422      CLR	R2
    01565 8228      ST	Y,R2
    01566 E928      LDI	R18,0x98
    01567 E030      LDI	R19,0
    01568 E507      LDI	R16,0x57
    01569 E011      LDI	R17,1
    0156A 940E 3F08 CALL	_print_texts
(0944)    print_texts(482,152,0,0xD1,2,0x04bb,0xffff,&Text[4]);
    0156C E082      LDI	R24,2
    0156D E094      LDI	R25,4
    0156E 879B      STD	Y+11,R25
    0156F 878A      STD	Y+10,R24
    01570 EF8F      LDI	R24,0xFF
    01571 EF9F      LDI	R25,0xFF
    01572 8799      STD	Y+9,R25
    01573 8788      STD	Y+8,R24
    01574 EB8B      LDI	R24,0xBB
    01575 E094      LDI	R25,4
    01576 839F      STD	Y+7,R25
    01577 838E      STD	Y+6,R24
    01578 E082      LDI	R24,2
    01579 838C      STD	Y+4,R24
    0157A ED81      LDI	R24,0xD1
    0157B 838A      STD	Y+2,R24
    0157C 2422      CLR	R2
    0157D 8228      ST	Y,R2
    0157E E928      LDI	R18,0x98
    0157F E030      LDI	R19,0
    01580 EE02      LDI	R16,0xE2
    01581 E011      LDI	R17,1
    01582 940E 3F08 CALL	_print_texts
(0945)    if(text_ptr<3)
    01584 9180 03AB LDS	R24,text_ptr
    01586 3083      CPI	R24,3
    01587 F588      BCC	0x15B9
(0946)    {
(0947)     if(text_ptr>0) text_ptr--;
    01588 E080      LDI	R24,0
    01589 9020 03AB LDS	R2,text_ptr
    0158B 1582      CP	R24,R2
    0158C F420      BCC	0x1591
    0158D 2D82      MOV	R24,R2
    0158E 5081      SUBI	R24,1
    0158F 9380 03AB STS	text_ptr,R24
(0948) 	Text[10]=Text[text_ptr];
    01591 EF8E      LDI	R24,0xFE
    01592 E093      LDI	R25,3
    01593 91E0 03AB LDS	R30,text_ptr
    01595 27FF      CLR	R31
    01596 0FE8      ADD	R30,R24
    01597 1FF9      ADC	R31,R25
    01598 8020      LD	R2,Z
    01599 9220 0408 STS	Text+10,R2
(0949) 	print_texts(343+text_ptr*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    0159B E088      LDI	R24,0x8
    0159C E094      LDI	R25,4
    0159D 879B      STD	Y+11,R25
    0159E 878A      STD	Y+10,R24
    0159F EB8B      LDI	R24,0xBB
    015A0 E094      LDI	R25,4
    015A1 8799      STD	Y+9,R25
    015A2 8788      STD	Y+8,R24
    015A3 EF8F      LDI	R24,0xFF
    015A4 EF9F      LDI	R25,0xFF
    015A5 839F      STD	Y+7,R25
    015A6 838E      STD	Y+6,R24
    015A7 E082      LDI	R24,2
    015A8 838C      STD	Y+4,R24
    015A9 ED81      LDI	R24,0xD1
    015AA 838A      STD	Y+2,R24
    015AB 2422      CLR	R2
    015AC 8228      ST	Y,R2
    015AD E928      LDI	R18,0x98
    015AE E030      LDI	R19,0
    015AF 9110 03AB LDS	R17,text_ptr
    015B1 E00C      LDI	R16,0xC
    015B2 0301      MULSU	R16,R17
    015B3 0180      MOVW	R16,R0
    015B4 5A09      SUBI	R16,0xA9
    015B5 4F1E      SBCI	R17,0xFE
    015B6 940E 3F08 CALL	_print_texts
(0950)    }
    015B8 C218      RJMP	0x17D1
(0951)    else
(0952)    {
(0953)     if(text_ptr>4) text_ptr--;
    015B9 E084      LDI	R24,4
    015BA 9020 03AB LDS	R2,text_ptr
    015BC 1582      CP	R24,R2
    015BD F420      BCC	0x15C2
    015BE 2D82      MOV	R24,R2
    015BF 5081      SUBI	R24,1
    015C0 9380 03AB STS	text_ptr,R24
(0954) 	Text[10]=Text[text_ptr];
    015C2 EF8E      LDI	R24,0xFE
    015C3 E093      LDI	R25,3
    015C4 91E0 03AB LDS	R30,text_ptr
    015C6 27FF      CLR	R31
    015C7 0FE8      ADD	R30,R24
    015C8 1FF9      ADC	R31,R25
    015C9 8020      LD	R2,Z
    015CA 9220 0408 STS	Text+10,R2
(0955) 	print_texts(482+(text_ptr-4)*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    015CC E088      LDI	R24,0x8
    015CD E094      LDI	R25,4
    015CE 879B      STD	Y+11,R25
    015CF 878A      STD	Y+10,R24
    015D0 EB8B      LDI	R24,0xBB
    015D1 E094      LDI	R25,4
    015D2 8799      STD	Y+9,R25
    015D3 8788      STD	Y+8,R24
    015D4 EF8F      LDI	R24,0xFF
    015D5 EF9F      LDI	R25,0xFF
    015D6 839F      STD	Y+7,R25
    015D7 838E      STD	Y+6,R24
    015D8 E082      LDI	R24,2
    015D9 838C      STD	Y+4,R24
    015DA ED81      LDI	R24,0xD1
    015DB 838A      STD	Y+2,R24
    015DC 2422      CLR	R2
    015DD 8228      ST	Y,R2
    015DE E928      LDI	R18,0x98
    015DF E030      LDI	R19,0
    015E0 9110 03AB LDS	R17,text_ptr
    015E2 E00C      LDI	R16,0xC
    015E3 0301      MULSU	R16,R17
    015E4 0180      MOVW	R16,R0
    015E5 5300      SUBI	R16,0x30
    015E6 4010      SBCI	R17,0
    015E7 510E      SUBI	R16,0x1E
    015E8 4F1E      SBCI	R17,0xFE
    015E9 940E 3F08 CALL	_print_texts
(0956)    }
(0957)  }
    015EB C1E5      RJMP	0x17D1
(0958)  else if(KeyID==11)
    015EC 9180 0115 LDS	R24,KeyID
    015EE 308B      CPI	R24,0xB
    015EF F009      BEQ	0x15F1
    015F0 C0C3      RJMP	0x16B4
(0959)  {
(0960)    if(text_ptr<3)
    015F1 9180 03AB LDS	R24,text_ptr
    015F3 3083      CPI	R24,3
    015F4 F4E0      BCC	0x1611
(0961)    {
(0962)      User_ID=(int)(Text[0]-'0')*100+(int)(Text[1]-'0')*10+(int)(Text[2]-'0');
    015F5 9110 03FF LDS	R17,Text+1
    015F7 E00A      LDI	R16,0xA
    015F8 0301      MULSU	R16,R17
    015F9 01C0      MOVW	R24,R0
    015FA 5E80      SUBI	R24,0xE0
    015FB 4091      SBCI	R25,1
    015FC 9110 03FE LDS	R17,Text
    015FE E604      LDI	R16,0x64
    015FF 0301      MULSU	R16,R17
    01600 01F0      MOVW	R30,R0
    01601 5CE0      SUBI	R30,0xC0
    01602 41F2      SBCI	R31,0x12
    01603 0FE8      ADD	R30,R24
    01604 1FF9      ADC	R31,R25
    01605 9180 0400 LDS	R24,Text+2
    01607 2799      CLR	R25
    01608 97C0      SBIW	R24,0x30
    01609 0FE8      ADD	R30,R24
    0160A 1FF9      ADC	R31,R25
    0160B 93E0 0398 STS	User_ID,R30
(0963) 	 //EEPROMWriteBytes(UserIDAddr,&User_ID,1);
(0964) 	 Card_Data[1]=User_ID;
    0160D 2E2E      MOV	R2,R30
    0160E 9220 03A0 STS	Card_Data+1,R2
(0965)    }
    01610 C06F      RJMP	0x1680
(0966)    else
(0967)    {
(0968)      User_Counter=(int)(Text[4]-'0')*10000+(int)(Text[5]-'0')*1000+(int)(Text[6]-'0')*100+(int)(Text[7]-'0')*10+(int)(Text[8]-'0');
    01611 9120 0403 LDS	R18,Text+5
    01613 2733      CLR	R19
    01614 EE08      LDI	R16,0xE8
    01615 E013      LDI	R17,3
    01616 940E 44A5 CALL	empy16s
    01618 01C8      MOVW	R24,R16
    01619 5880      SUBI	R24,0x80
    0161A 4B9B      SBCI	R25,0xBB
    0161B 9120 0402 LDS	R18,Text+4
    0161D 2733      CLR	R19
    0161E E100      LDI	R16,0x10
    0161F E217      LDI	R17,0x27
    01620 940E 44A5 CALL	empy16s
    01622 01F8      MOVW	R30,R16
    01623 50E0      SUBI	R30,0
    01624 45F3      SBCI	R31,0x53
    01625 011F      MOVW	R2,R30
    01626 0E28      ADD	R2,R24
    01627 1E39      ADC	R3,R25
    01628 9110 0404 LDS	R17,Text+6
    0162A E604      LDI	R16,0x64
    0162B 0301      MULSU	R16,R17
    0162C 01C0      MOVW	R24,R0
    0162D 5C80      SUBI	R24,0xC0
    0162E 4192      SBCI	R25,0x12
    0162F 0E28      ADD	R2,R24
    01630 1E39      ADC	R3,R25
    01631 9110 0405 LDS	R17,Text+7
    01633 E00A      LDI	R16,0xA
    01634 0301      MULSU	R16,R17
    01635 01C0      MOVW	R24,R0
    01636 5E80      SUBI	R24,0xE0
    01637 4091      SBCI	R25,1
    01638 0E28      ADD	R2,R24
    01639 1E39      ADC	R3,R25
    0163A 9180 0406 LDS	R24,Text+8
    0163C 2799      CLR	R25
    0163D 97C0      SBIW	R24,0x30
    0163E 0E28      ADD	R2,R24
    0163F 1E39      ADC	R3,R25
    01640 9230 039E STS	User_Counter+1,R3
    01642 9220 039D STS	User_Counter,R2
(0969) 	 if(User_Type>0)//忱???
    01644 E080      LDI	R24,0
    01645 9020 039A LDS	R2,User_Type
    01647 1582      CP	R24,R2
    01648 F4E8      BCC	0x1666
(0970)      {
(0971)        if((User_Type<Card_Type)&&(Card_Type<4)) return;
    01649 9140 0399 LDS	R20,Card_Type
    0164B 1624      CP	R2,R20
    0164C F418      BCC	0x1650
    0164D 3044      CPI	R20,4
    0164E F408      BCC	0x1650
    0164F C181      RJMP	0x17D1
(0972)        Card_Data[0]=User_Type;
    01650 9020 039A LDS	R2,User_Type
    01652 9220 039F STS	Card_Data,R2
(0973)        Card_Data[1]=User_ID;
    01654 9020 0398 LDS	R2,User_ID
    01656 9220 03A0 STS	Card_Data+1,R2
(0974)        Card_Data[2]=User_Counter;
    01658 9020 039D LDS	R2,User_Counter
    0165A 9030 039E LDS	R3,User_Counter+1
    0165C 9220 03A1 STS	Card_Data+2,R2
(0975)        Card_Data[3]=User_Counter>>8;
    0165E 2C23      MOV	R2,R3
    0165F 2433      CLR	R3
    01660 9220 03A2 STS	Card_Data+3,R2
(0976)        Card_Command=2;
    01662 E082      LDI	R24,2
    01663 9380 0396 STS	Card_Command,R24
(0977)      }
    01665 C01A      RJMP	0x1680
(0978)      else if((Card_Type>1)&&(Card_Type<4))//忱???
    01666 9140 0399 LDS	R20,Card_Type
    01668 E081      LDI	R24,1
    01669 1784      CP	R24,R20
    0166A F4A8      BCC	0x1680
    0166B 3044      CPI	R20,4
    0166C F498      BCC	0x1680
(0979)      {
(0980)        Card_Data[0]=Card_Type;
    0166D 2E24      MOV	R2,R20
    0166E 9220 039F STS	Card_Data,R2
(0981)        Card_Data[1]=User_ID;
    01670 9020 0398 LDS	R2,User_ID
    01672 9220 03A0 STS	Card_Data+1,R2
(0982)        Card_Data[2]=User_Counter;
    01674 9020 039D LDS	R2,User_Counter
    01676 9030 039E LDS	R3,User_Counter+1
    01678 9220 03A1 STS	Card_Data+2,R2
(0983)        Card_Data[3]=User_Counter>>8;
    0167A 2C23      MOV	R2,R3
    0167B 2433      CLR	R3
    0167C 9220 03A2 STS	Card_Data+3,R2
(0984)        Card_Command=1;
    0167E 9380 0396 STS	Card_Command,R24
(0985)      }
(0986)    }
(0987)    text_ptr=255;
    01680 EF8F      LDI	R24,0xFF
    01681 9380 03AB STS	text_ptr,R24
(0988)    print_texts(343,152,0,0xD1,2,0x04bb,0xffff,Text);
    01683 EF8E      LDI	R24,0xFE
    01684 E093      LDI	R25,3
    01685 879B      STD	Y+11,R25
    01686 878A      STD	Y+10,R24
    01687 EF8F      LDI	R24,0xFF
    01688 EF9F      LDI	R25,0xFF
    01689 8799      STD	Y+9,R25
    0168A 8788      STD	Y+8,R24
    0168B EB8B      LDI	R24,0xBB
    0168C E094      LDI	R25,4
    0168D 839F      STD	Y+7,R25
    0168E 838E      STD	Y+6,R24
    0168F E082      LDI	R24,2
    01690 838C      STD	Y+4,R24
    01691 ED81      LDI	R24,0xD1
    01692 838A      STD	Y+2,R24
    01693 2422      CLR	R2
    01694 8228      ST	Y,R2
    01695 E928      LDI	R18,0x98
    01696 E030      LDI	R19,0
    01697 E507      LDI	R16,0x57
    01698 E011      LDI	R17,1
    01699 940E 3F08 CALL	_print_texts
(0989)    print_texts(482,152,0,0xD1,2,0x04bb,0xffff,&Text[4]);
    0169B E082      LDI	R24,2
    0169C E094      LDI	R25,4
    0169D 879B      STD	Y+11,R25
    0169E 878A      STD	Y+10,R24
    0169F EF8F      LDI	R24,0xFF
    016A0 EF9F      LDI	R25,0xFF
    016A1 8799      STD	Y+9,R25
    016A2 8788      STD	Y+8,R24
    016A3 EB8B      LDI	R24,0xBB
    016A4 E094      LDI	R25,4
    016A5 839F      STD	Y+7,R25
    016A6 838E      STD	Y+6,R24
    016A7 E082      LDI	R24,2
    016A8 838C      STD	Y+4,R24
    016A9 ED81      LDI	R24,0xD1
    016AA 838A      STD	Y+2,R24
    016AB 2422      CLR	R2
    016AC 8228      ST	Y,R2
    016AD E928      LDI	R18,0x98
    016AE E030      LDI	R19,0
    016AF EE02      LDI	R16,0xE2
    016B0 E011      LDI	R17,1
    016B1 940E 3F08 CALL	_print_texts
(0990)  }
    016B3 C11D      RJMP	0x17D1
(0991)  else if(KeyID==12)
    016B4 9180 0115 LDS	R24,KeyID
    016B6 308C      CPI	R24,0xC
    016B7 F009      BEQ	0x16B9
    016B8 C066      RJMP	0x171F
(0992)  {
(0993)    if(Card_Type==3)
    016B9 9180 0399 LDS	R24,Card_Type
    016BB 3083      CPI	R24,3
    016BC F009      BEQ	0x16BE
    016BD C113      RJMP	0x17D1
(0994)    {
(0995)      if(text_ptr<2) text_ptr++;
    016BE 9180 03AB LDS	R24,text_ptr
    016C0 3082      CPI	R24,2
    016C1 F420      BCC	0x16C6
    016C2 5F8F      SUBI	R24,0xFF
    016C3 9380 03AB STS	text_ptr,R24
    016C5 C003      RJMP	0x16C9
(0996)      else text_ptr=0;
    016C6 2422      CLR	R2
    016C7 9220 03AB STS	text_ptr,R2
(0997)      Text[10]=Text[text_ptr];
    016C9 EF8E      LDI	R24,0xFE
    016CA E093      LDI	R25,3
    016CB 91E0 03AB LDS	R30,text_ptr
    016CD 27FF      CLR	R31
    016CE 0FE8      ADD	R30,R24
    016CF 1FF9      ADC	R31,R25
    016D0 8020      LD	R2,Z
    016D1 9220 0408 STS	Text+10,R2
(0998)      print_texts(343,152,0,0xD1,2,0x04bb,0xffff,Text);
    016D3 879B      STD	Y+11,R25
    016D4 878A      STD	Y+10,R24
    016D5 EF8F      LDI	R24,0xFF
    016D6 EF9F      LDI	R25,0xFF
    016D7 8799      STD	Y+9,R25
    016D8 8788      STD	Y+8,R24
    016D9 EB8B      LDI	R24,0xBB
    016DA E094      LDI	R25,4
    016DB 839F      STD	Y+7,R25
    016DC 838E      STD	Y+6,R24
    016DD E082      LDI	R24,2
    016DE 838C      STD	Y+4,R24
    016DF ED81      LDI	R24,0xD1
    016E0 838A      STD	Y+2,R24
    016E1 2422      CLR	R2
    016E2 8228      ST	Y,R2
    016E3 E928      LDI	R18,0x98
    016E4 E030      LDI	R19,0
    016E5 E507      LDI	R16,0x57
    016E6 E011      LDI	R17,1
    016E7 940E 3F08 CALL	_print_texts
(0999)      print_texts(343+text_ptr*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    016E9 E088      LDI	R24,0x8
    016EA E094      LDI	R25,4
    016EB 879B      STD	Y+11,R25
    016EC 878A      STD	Y+10,R24
    016ED EB8B      LDI	R24,0xBB
    016EE E094      LDI	R25,4
    016EF 8799      STD	Y+9,R25
    016F0 8788      STD	Y+8,R24
    016F1 EF8F      LDI	R24,0xFF
    016F2 EF9F      LDI	R25,0xFF
    016F3 839F      STD	Y+7,R25
    016F4 838E      STD	Y+6,R24
    016F5 E082      LDI	R24,2
    016F6 838C      STD	Y+4,R24
    016F7 ED81      LDI	R24,0xD1
    016F8 838A      STD	Y+2,R24
    016F9 2422      CLR	R2
    016FA 8228      ST	Y,R2
    016FB E928      LDI	R18,0x98
    016FC E030      LDI	R19,0
    016FD 9110 03AB LDS	R17,text_ptr
    016FF E00C      LDI	R16,0xC
    01700 0301      MULSU	R16,R17
    01701 0180      MOVW	R16,R0
    01702 5A09      SUBI	R16,0xA9
    01703 4F1E      SBCI	R17,0xFE
    01704 940E 3F08 CALL	_print_texts
(1000)      print_texts(482,152,0,0xD1,2,0x04bb,0xffff,&Text[4]);
    01706 E082      LDI	R24,2
    01707 E094      LDI	R25,4
    01708 879B      STD	Y+11,R25
    01709 878A      STD	Y+10,R24
    0170A EF8F      LDI	R24,0xFF
    0170B EF9F      LDI	R25,0xFF
    0170C 8799      STD	Y+9,R25
    0170D 8788      STD	Y+8,R24
    0170E EB8B      LDI	R24,0xBB
    0170F E094      LDI	R25,4
    01710 839F      STD	Y+7,R25
    01711 838E      STD	Y+6,R24
    01712 E082      LDI	R24,2
    01713 838C      STD	Y+4,R24
    01714 ED81      LDI	R24,0xD1
    01715 838A      STD	Y+2,R24
    01716 2422      CLR	R2
    01717 8228      ST	Y,R2
    01718 E928      LDI	R18,0x98
    01719 E030      LDI	R19,0
    0171A EE02      LDI	R16,0xE2
    0171B E011      LDI	R17,1
    0171C 940E 3F08 CALL	_print_texts
(1001)    }
(1002)  }
    0171E C0B2      RJMP	0x17D1
(1003)  else if(KeyID==13)
    0171F 9180 0115 LDS	R24,KeyID
    01721 308D      CPI	R24,0xD
    01722 F009      BEQ	0x1724
    01723 C03F      RJMP	0x1763
(1004)  {
(1005)    if(Card_Type==3)
    01724 9180 0399 LDS	R24,Card_Type
    01726 3083      CPI	R24,3
    01727 F461      BNE	0x1734
(1006)    {
(1007)     if(User_Type<3) User_Type++;
    01728 9180 039A LDS	R24,User_Type
    0172A 3083      CPI	R24,3
    0172B F420      BCC	0x1730
    0172C 5F8F      SUBI	R24,0xFF
    0172D 9380 039A STS	User_Type,R24
    0172F C013      RJMP	0x1743
(1008)     else User_Type=0;
    01730 2422      CLR	R2
    01731 9220 039A STS	User_Type,R2
(1009)    }
    01733 C00F      RJMP	0x1743
(1010)    else if(Card_Type==2)
    01734 9180 0399 LDS	R24,Card_Type
    01736 3082      CPI	R24,2
    01737 F459      BNE	0x1743
(1011)    {
(1012)     if(User_Type<1) User_Type++;
    01738 9180 039A LDS	R24,User_Type
    0173A 3081      CPI	R24,1
    0173B F420      BCC	0x1740
    0173C 5F8F      SUBI	R24,0xFF
    0173D 9380 039A STS	User_Type,R24
    0173F C003      RJMP	0x1743
(1013)     else User_Type=0;
    01740 2422      CLR	R2
    01741 9220 039A STS	User_Type,R2
(1014)    }
(1015)    print_consttexts(406,152,0,0xC1,2,0x04bb,0xffff,&user_type[User_Type][0]);
    01743 9110 039A LDS	R17,User_Type
    01745 E006      LDI	R16,6
    01746 0301      MULSU	R16,R17
    01747 0110      MOVW	R2,R0
    01748 E38C      LDI	R24,0x3C
    01749 E091      LDI	R25,1
    0174A 0E28      ADD	R2,R24
    0174B 1E39      ADC	R3,R25
    0174C 863B      STD	Y+11,R3
    0174D 862A      STD	Y+10,R2
    0174E EF8F      LDI	R24,0xFF
    0174F EF9F      LDI	R25,0xFF
    01750 8799      STD	Y+9,R25
    01751 8788      STD	Y+8,R24
    01752 EB8B      LDI	R24,0xBB
    01753 E094      LDI	R25,4
    01754 839F      STD	Y+7,R25
    01755 838E      STD	Y+6,R24
    01756 E082      LDI	R24,2
    01757 838C      STD	Y+4,R24
    01758 EC81      LDI	R24,0xC1
    01759 838A      STD	Y+2,R24
    0175A 2422      CLR	R2
    0175B 8228      ST	Y,R2
    0175C E928      LDI	R18,0x98
    0175D E030      LDI	R19,0
    0175E E906      LDI	R16,0x96
    0175F E011      LDI	R17,1
    01760 940E 3F09 CALL	_print_consttexts
(1016)  }
    01762 C06E      RJMP	0x17D1
(1017)  else if(KeyID==14)
    01763 9180 0115 LDS	R24,KeyID
    01765 308E      CPI	R24,0xE
    01766 F009      BEQ	0x1768
    01767 C069      RJMP	0x17D1
(1018)  {
(1019)    if(text_ptr<8) text_ptr++;
    01768 9180 03AB LDS	R24,text_ptr
    0176A 3088      CPI	R24,0x8
    0176B F420      BCC	0x1770
    0176C 5F8F      SUBI	R24,0xFF
    0176D 9380 03AB STS	text_ptr,R24
    0176F C003      RJMP	0x1773
(1020)    else text_ptr=4;
    01770 E084      LDI	R24,4
    01771 9380 03AB STS	text_ptr,R24
(1021)    if(text_ptr<4) text_ptr=4;
    01773 9180 03AB LDS	R24,text_ptr
    01775 3084      CPI	R24,4
    01776 F418      BCC	0x177A
    01777 E084      LDI	R24,4
    01778 9380 03AB STS	text_ptr,R24
(1022)    Text[10]=Text[text_ptr];
    0177A EF8E      LDI	R24,0xFE
    0177B E093      LDI	R25,3
    0177C 91E0 03AB LDS	R30,text_ptr
    0177E 27FF      CLR	R31
    0177F 0FE8      ADD	R30,R24
    01780 1FF9      ADC	R31,R25
    01781 8020      LD	R2,Z
    01782 9220 0408 STS	Text+10,R2
(1023)    print_texts(343,152,0,0xD1,2,0x04bb,0xffff,Text);
    01784 879B      STD	Y+11,R25
    01785 878A      STD	Y+10,R24
    01786 EF8F      LDI	R24,0xFF
    01787 EF9F      LDI	R25,0xFF
    01788 8799      STD	Y+9,R25
    01789 8788      STD	Y+8,R24
    0178A EB8B      LDI	R24,0xBB
    0178B E094      LDI	R25,4
    0178C 839F      STD	Y+7,R25
    0178D 838E      STD	Y+6,R24
    0178E E082      LDI	R24,2
    0178F 838C      STD	Y+4,R24
    01790 ED81      LDI	R24,0xD1
    01791 838A      STD	Y+2,R24
    01792 2422      CLR	R2
    01793 8228      ST	Y,R2
    01794 E928      LDI	R18,0x98
    01795 E030      LDI	R19,0
    01796 E507      LDI	R16,0x57
    01797 E011      LDI	R17,1
    01798 940E 3F08 CALL	_print_texts
(1024)    print_texts(482,152,0,0xD1,2,0x04bb,0xffff,&Text[4]);
    0179A E082      LDI	R24,2
    0179B E094      LDI	R25,4
    0179C 879B      STD	Y+11,R25
    0179D 878A      STD	Y+10,R24
    0179E EF8F      LDI	R24,0xFF
    0179F EF9F      LDI	R25,0xFF
    017A0 8799      STD	Y+9,R25
    017A1 8788      STD	Y+8,R24
    017A2 EB8B      LDI	R24,0xBB
    017A3 E094      LDI	R25,4
    017A4 839F      STD	Y+7,R25
    017A5 838E      STD	Y+6,R24
    017A6 E082      LDI	R24,2
    017A7 838C      STD	Y+4,R24
    017A8 ED81      LDI	R24,0xD1
    017A9 838A      STD	Y+2,R24
    017AA 2422      CLR	R2
    017AB 8228      ST	Y,R2
    017AC E928      LDI	R18,0x98
    017AD E030      LDI	R19,0
    017AE EE02      LDI	R16,0xE2
    017AF E011      LDI	R17,1
    017B0 940E 3F08 CALL	_print_texts
(1025)    print_texts(482+(text_ptr-4)*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    017B2 E088      LDI	R24,0x8
    017B3 E094      LDI	R25,4
    017B4 879B      STD	Y+11,R25
    017B5 878A      STD	Y+10,R24
    017B6 EB8B      LDI	R24,0xBB
    017B7 E094      LDI	R25,4
    017B8 8799      STD	Y+9,R25
    017B9 8788      STD	Y+8,R24
    017BA EF8F      LDI	R24,0xFF
    017BB EF9F      LDI	R25,0xFF
    017BC 839F      STD	Y+7,R25
    017BD 838E      STD	Y+6,R24
    017BE E082      LDI	R24,2
    017BF 838C      STD	Y+4,R24
    017C0 ED81      LDI	R24,0xD1
    017C1 838A      STD	Y+2,R24
    017C2 2422      CLR	R2
    017C3 8228      ST	Y,R2
    017C4 E928      LDI	R18,0x98
    017C5 E030      LDI	R19,0
    017C6 9110 03AB LDS	R17,text_ptr
    017C8 E00C      LDI	R16,0xC
    017C9 0301      MULSU	R16,R17
    017CA 0180      MOVW	R16,R0
    017CB 5300      SUBI	R16,0x30
    017CC 4010      SBCI	R17,0
    017CD 510E      SUBI	R16,0x1E
    017CE 4F1E      SBCI	R17,0xFE
    017CF 940E 3F08 CALL	_print_texts
(1026)  }
    017D1 962C      ADIW	R28,0xC
    017D2 9159      LD	R21,Y+
    017D3 9149      LD	R20,Y+
    017D4 9508      RET
_CardKeyUp:
    017D5 972C      SBIW	R28,0xC
(1027) }
(1028) void CardKeyUp(void)
(1029) {
(1030)  if(DisPage!=CARDPAGE) return;
    017D6 9180 0114 LDS	R24,DisPage
    017D8 3088      CPI	R24,0x8
    017D9 F009      BEQ	0x17DB
    017DA C0F7      RJMP	0x18D2
(1031)  if(KeyID<15)
    017DB 9180 0115 LDS	R24,KeyID
    017DD 308F      CPI	R24,0xF
    017DE F008      BCS	0x17E0
    017DF C045      RJMP	0x1825
(1032)  {
(1033)    cut_pic(0,18,Card_Key[KeyID].XS-300,Card_Key[KeyID].YS-100,Card_Key[KeyID].XE-300,Card_Key[KeyID].YE-100,Card_Key[KeyID].XS,Card_Key[KeyID].YS);
    017E0 2E28      MOV	R2,R24
    017E1 2433      CLR	R3
    017E2 0C22      LSL	R2
    017E3 1C33      ROL	R3
    017E4 0C22      LSL	R2
    017E5 1C33      ROL	R3
    017E6 0C22      LSL	R2
    017E7 1C33      ROL	R3
    017E8 0121      MOVW	R4,R2
    017E9 E08E      LDI	R24,0xE
    017EA E093      LDI	R25,3
    017EB 01F1      MOVW	R30,R2
    017EC 0FE8      ADD	R30,R24
    017ED 1FF9      ADC	R31,R25
    017EE 9027      ELPM	R2,Z+
    017EF 9036      ELPM	R3,Z
    017F0 863B      STD	Y+11,R3
    017F1 862A      STD	Y+10,R2
    017F2 E08C      LDI	R24,0xC
    017F3 E093      LDI	R25,3
    017F4 01F2      MOVW	R30,R4
    017F5 0FE8      ADD	R30,R24
    017F6 1FF9      ADC	R31,R25
    017F7 9027      ELPM	R2,Z+
    017F8 9036      ELPM	R3,Z
    017F9 8639      STD	Y+9,R3
    017FA 8628      STD	Y+8,R2
    017FB E182      LDI	R24,0x12
    017FC E093      LDI	R25,3
    017FD 01F2      MOVW	R30,R4
    017FE 0FE8      ADD	R30,R24
    017FF 1FF9      ADC	R31,R25
    01800 9187      ELPM	R24,Z+
    01801 9196      ELPM	R25,Z
    01802 5684      SUBI	R24,0x64
    01803 4090      SBCI	R25,0
    01804 839F      STD	Y+7,R25
    01805 838E      STD	Y+6,R24
    01806 E180      LDI	R24,0x10
    01807 E093      LDI	R25,3
    01808 01F2      MOVW	R30,R4
    01809 0FE8      ADD	R30,R24
    0180A 1FF9      ADC	R31,R25
    0180B 9187      ELPM	R24,Z+
    0180C 9196      ELPM	R25,Z
    0180D 528C      SUBI	R24,0x2C
    0180E 4091      SBCI	R25,1
    0180F 839D      STD	Y+5,R25
    01810 838C      STD	Y+4,R24
    01811 E08E      LDI	R24,0xE
    01812 E093      LDI	R25,3
    01813 01F2      MOVW	R30,R4
    01814 0FE8      ADD	R30,R24
    01815 1FF9      ADC	R31,R25
    01816 9187      ELPM	R24,Z+
    01817 9196      ELPM	R25,Z
    01818 5684      SUBI	R24,0x64
    01819 4090      SBCI	R25,0
    0181A 839B      STD	Y+3,R25
    0181B 838A      STD	Y+2,R24
    0181C 01C1      MOVW	R24,R2
    0181D 528C      SUBI	R24,0x2C
    0181E 4091      SBCI	R25,1
    0181F 8399      STD	Y+1,R25
    01820 8388      ST	Y,R24
    01821 E122      LDI	R18,0x12
    01822 2700      CLR	R16
    01823 940E 3F14 CALL	_cut_pic
(1034)  }
(1035)  if((KeyID<10)&&(text_ptr<9))
    01825 9180 0115 LDS	R24,KeyID
    01827 308A      CPI	R24,0xA
    01828 F008      BCS	0x182A
    01829 C09F      RJMP	0x18C9
    0182A 9180 03AB LDS	R24,text_ptr
    0182C 3089      CPI	R24,0x9
    0182D F008      BCS	0x182F
    0182E C09A      RJMP	0x18C9
(1036)  {
(1037)    print_texts(343,152,0,0xD1,2,0x04bb,0xffff,Text);
    0182F EF8E      LDI	R24,0xFE
    01830 E093      LDI	R25,3
    01831 879B      STD	Y+11,R25
    01832 878A      STD	Y+10,R24
    01833 EF8F      LDI	R24,0xFF
    01834 EF9F      LDI	R25,0xFF
    01835 8799      STD	Y+9,R25
    01836 8788      STD	Y+8,R24
    01837 EB8B      LDI	R24,0xBB
    01838 E094      LDI	R25,4
    01839 839F      STD	Y+7,R25
    0183A 838E      STD	Y+6,R24
    0183B E082      LDI	R24,2
    0183C 838C      STD	Y+4,R24
    0183D ED81      LDI	R24,0xD1
    0183E 838A      STD	Y+2,R24
    0183F 2422      CLR	R2
    01840 8228      ST	Y,R2
    01841 E928      LDI	R18,0x98
    01842 E030      LDI	R19,0
    01843 E507      LDI	R16,0x57
    01844 E011      LDI	R17,1
    01845 940E 3F08 CALL	_print_texts
(1038)    print_texts(482,152,0,0xD1,2,0x04bb,0xffff,&Text[4]);
    01847 E082      LDI	R24,2
    01848 E094      LDI	R25,4
    01849 879B      STD	Y+11,R25
    0184A 878A      STD	Y+10,R24
    0184B EF8F      LDI	R24,0xFF
    0184C EF9F      LDI	R25,0xFF
    0184D 8799      STD	Y+9,R25
    0184E 8788      STD	Y+8,R24
    0184F EB8B      LDI	R24,0xBB
    01850 E094      LDI	R25,4
    01851 839F      STD	Y+7,R25
    01852 838E      STD	Y+6,R24
    01853 E082      LDI	R24,2
    01854 838C      STD	Y+4,R24
    01855 ED81      LDI	R24,0xD1
    01856 838A      STD	Y+2,R24
    01857 2422      CLR	R2
    01858 8228      ST	Y,R2
    01859 E928      LDI	R18,0x98
    0185A E030      LDI	R19,0
    0185B EE02      LDI	R16,0xE2
    0185C E011      LDI	R17,1
    0185D 940E 3F08 CALL	_print_texts
(1039)    if(text_ptr<3)
    0185F 9180 03AB LDS	R24,text_ptr
    01861 3083      CPI	R24,3
    01862 F588      BCC	0x1894
(1040)    {
(1041)     if(text_ptr<2) text_ptr++;
    01863 3082      CPI	R24,2
    01864 F420      BCC	0x1869
    01865 5F8F      SUBI	R24,0xFF
    01866 9380 03AB STS	text_ptr,R24
    01868 C003      RJMP	0x186C
(1042)     else text_ptr=0;
    01869 2422      CLR	R2
    0186A 9220 03AB STS	text_ptr,R2
(1043) 	Text[10]=Text[text_ptr];
    0186C EF8E      LDI	R24,0xFE
    0186D E093      LDI	R25,3
    0186E 91E0 03AB LDS	R30,text_ptr
    01870 27FF      CLR	R31
    01871 0FE8      ADD	R30,R24
    01872 1FF9      ADC	R31,R25
    01873 8020      LD	R2,Z
    01874 9220 0408 STS	Text+10,R2
(1044) 	print_texts(343+text_ptr*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    01876 E088      LDI	R24,0x8
    01877 E094      LDI	R25,4
    01878 879B      STD	Y+11,R25
    01879 878A      STD	Y+10,R24
    0187A EB8B      LDI	R24,0xBB
    0187B E094      LDI	R25,4
    0187C 8799      STD	Y+9,R25
    0187D 8788      STD	Y+8,R24
    0187E EF8F      LDI	R24,0xFF
    0187F EF9F      LDI	R25,0xFF
    01880 839F      STD	Y+7,R25
    01881 838E      STD	Y+6,R24
    01882 E082      LDI	R24,2
    01883 838C      STD	Y+4,R24
    01884 ED81      LDI	R24,0xD1
    01885 838A      STD	Y+2,R24
    01886 2422      CLR	R2
    01887 8228      ST	Y,R2
    01888 E928      LDI	R18,0x98
    01889 E030      LDI	R19,0
    0188A 9110 03AB LDS	R17,text_ptr
    0188C E00C      LDI	R16,0xC
    0188D 0301      MULSU	R16,R17
    0188E 0180      MOVW	R16,R0
    0188F 5A09      SUBI	R16,0xA9
    01890 4F1E      SBCI	R17,0xFE
    01891 940E 3F08 CALL	_print_texts
(1045)    }
    01893 C03E      RJMP	0x18D2
(1046)    else
(1047)    {
(1048)     if(text_ptr<8) text_ptr++;
    01894 9180 03AB LDS	R24,text_ptr
    01896 3088      CPI	R24,0x8
    01897 F420      BCC	0x189C
    01898 5F8F      SUBI	R24,0xFF
    01899 9380 03AB STS	text_ptr,R24
    0189B C003      RJMP	0x189F
(1049)     else text_ptr=4;
    0189C E084      LDI	R24,4
    0189D 9380 03AB STS	text_ptr,R24
(1050) 	Text[10]=Text[text_ptr];
    0189F EF8E      LDI	R24,0xFE
    018A0 E093      LDI	R25,3
    018A1 91E0 03AB LDS	R30,text_ptr
    018A3 27FF      CLR	R31
    018A4 0FE8      ADD	R30,R24
    018A5 1FF9      ADC	R31,R25
    018A6 8020      LD	R2,Z
    018A7 9220 0408 STS	Text+10,R2
(1051) 	print_texts(482+(text_ptr-4)*12,152,0,0xD1,2,0xffff,0x04bb,&Text[10]);
    018A9 E088      LDI	R24,0x8
    018AA E094      LDI	R25,4
    018AB 879B      STD	Y+11,R25
    018AC 878A      STD	Y+10,R24
    018AD EB8B      LDI	R24,0xBB
    018AE E094      LDI	R25,4
    018AF 8799      STD	Y+9,R25
    018B0 8788      STD	Y+8,R24
    018B1 EF8F      LDI	R24,0xFF
    018B2 EF9F      LDI	R25,0xFF
    018B3 839F      STD	Y+7,R25
    018B4 838E      STD	Y+6,R24
    018B5 E082      LDI	R24,2
    018B6 838C      STD	Y+4,R24
    018B7 ED81      LDI	R24,0xD1
    018B8 838A      STD	Y+2,R24
    018B9 2422      CLR	R2
    018BA 8228      ST	Y,R2
    018BB E928      LDI	R18,0x98
    018BC E030      LDI	R19,0
    018BD 9110 03AB LDS	R17,text_ptr
    018BF E00C      LDI	R16,0xC
    018C0 0301      MULSU	R16,R17
    018C1 0180      MOVW	R16,R0
    018C2 5300      SUBI	R16,0x30
    018C3 4010      SBCI	R17,0
    018C4 510E      SUBI	R16,0x1E
    018C5 4F1E      SBCI	R17,0xFE
    018C6 940E 3F08 CALL	_print_texts
(1052)    }
(1053)  }
    018C8 C009      RJMP	0x18D2
(1054)  else if(KeyID==15)
    018C9 9180 0115 LDS	R24,KeyID
    018CB 308F      CPI	R24,0xF
    018CC F429      BNE	0x18D2
(1055)  {
(1056)    DisWelcome();
    018CD 940E 090A CALL	_DisWelcome
(1057)    DisPage=WELCOMEPAGE;
    018CF 2422      CLR	R2
    018D0 9220 0114 STS	DisPage,R2
(1058)  }
    018D2 962C      ADIW	R28,0xC
    018D3 9508      RET
_PasswordKeyDown:
    018D4 940E 450F CALL	push_xgset300C
    018D6 972C      SBIW	R28,0xC
(1059) }
(1060) void PasswordKeyDown(void)
(1061) {
(1062)   if(DisPage!=PASSWORDPAGE) return;
    018D7 9180 0114 LDS	R24,DisPage
    018D9 3089      CPI	R24,0x9
    018DA F009      BEQ	0x18DC
    018DB C238      RJMP	0x1B14
(1063)   KeyID=GetKeyID(Time_Key,13); 
    018DC E02D      LDI	R18,0xD
    018DD EC0C      LDI	R16,0xCC
    018DE E011      LDI	R17,1
    018DF 940E 0A56 CALL	_GetKeyID
    018E1 9300 0115 STS	KeyID,R16
(1064)   if((KeyID<10)&&(text_ptr<6))
    018E3 300A      CPI	R16,0xA
    018E4 F008      BCS	0x18E6
    018E5 C075      RJMP	0x195B
    018E6 9180 03AB LDS	R24,text_ptr
    018E8 3086      CPI	R24,6
    018E9 F008      BCS	0x18EB
    018EA C070      RJMP	0x195B
(1065)   {
(1066)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    018EB 2E20      MOV	R2,R16
    018EC 2433      CLR	R3
    018ED 0C22      LSL	R2
    018EE 1C33      ROL	R3
    018EF 0C22      LSL	R2
    018F0 1C33      ROL	R3
    018F1 0C22      LSL	R2
    018F2 1C33      ROL	R3
    018F3 0121      MOVW	R4,R2
    018F4 EC8E      LDI	R24,0xCE
    018F5 E091      LDI	R25,1
    018F6 01F1      MOVW	R30,R2
    018F7 0FE8      ADD	R30,R24
    018F8 1FF9      ADC	R31,R25
    018F9 9027      ELPM	R2,Z+
    018FA 9036      ELPM	R3,Z
    018FB 863B      STD	Y+11,R3
    018FC 862A      STD	Y+10,R2
    018FD EC8C      LDI	R24,0xCC
    018FE E091      LDI	R25,1
    018FF 01F2      MOVW	R30,R4
    01900 0FE8      ADD	R30,R24
    01901 1FF9      ADC	R31,R25
    01902 9147      ELPM	R20,Z+
    01903 9156      ELPM	R21,Z
    01904 8759      STD	Y+9,R21
    01905 8748      STD	Y+8,R20
    01906 ED82      LDI	R24,0xD2
    01907 E091      LDI	R25,1
    01908 01F2      MOVW	R30,R4
    01909 0FE8      ADD	R30,R24
    0190A 1FF9      ADC	R31,R25
    0190B 9187      ELPM	R24,Z+
    0190C 9196      ELPM	R25,Z
    0190D 5684      SUBI	R24,0x64
    0190E 4090      SBCI	R25,0
    0190F 839F      STD	Y+7,R25
    01910 838E      STD	Y+6,R24
    01911 ED80      LDI	R24,0xD0
    01912 E091      LDI	R25,1
    01913 01F2      MOVW	R30,R4
    01914 0FE8      ADD	R30,R24
    01915 1FF9      ADC	R31,R25
    01916 9187      ELPM	R24,Z+
    01917 9196      ELPM	R25,Z
    01918 974D      SBIW	R24,0x1D
    01919 839D      STD	Y+5,R25
    0191A 838C      STD	Y+4,R24
    0191B EC8E      LDI	R24,0xCE
    0191C E091      LDI	R25,1
    0191D 01F2      MOVW	R30,R4
    0191E 0FE8      ADD	R30,R24
    0191F 1FF9      ADC	R31,R25
    01920 9187      ELPM	R24,Z+
    01921 9196      ELPM	R25,Z
    01922 5684      SUBI	R24,0x64
    01923 4090      SBCI	R25,0
    01924 839B      STD	Y+3,R25
    01925 838A      STD	Y+2,R24
    01926 01CA      MOVW	R24,R20
    01927 974D      SBIW	R24,0x1D
    01928 8399      STD	Y+1,R25
    01929 8388      ST	Y,R24
    0192A E12B      LDI	R18,0x1B
    0192B 2700      CLR	R16
    0192C 940E 3F14 CALL	_cut_pic
(1067) 	print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,&Text[7]);
    0192E E085      LDI	R24,5
    0192F E094      LDI	R25,4
    01930 879B      STD	Y+11,R25
    01931 878A      STD	Y+10,R24
    01932 EF8F      LDI	R24,0xFF
    01933 EF9F      LDI	R25,0xFF
    01934 8799      STD	Y+9,R25
    01935 8788      STD	Y+8,R24
    01936 EB8B      LDI	R24,0xBB
    01937 E094      LDI	R25,4
    01938 839F      STD	Y+7,R25
    01939 838E      STD	Y+6,R24
    0193A E082      LDI	R24,2
    0193B 838C      STD	Y+4,R24
    0193C ED81      LDI	R24,0xD1
    0193D 838A      STD	Y+2,R24
    0193E 2422      CLR	R2
    0193F 8228      ST	Y,R2
    01940 E926      LDI	R18,0x96
    01941 E030      LDI	R19,0
    01942 9110 03AB LDS	R17,text_ptr
    01944 E00C      LDI	R16,0xC
    01945 0301      MULSU	R16,R17
    01946 0180      MOVW	R16,R0
    01947 5B01      SUBI	R16,0xB1
    01948 4F1E      SBCI	R17,0xFE
    01949 940E 3F08 CALL	_print_texts
(1068)     Text[text_ptr]=KeyID;
    0194B EF8E      LDI	R24,0xFE
    0194C E093      LDI	R25,3
    0194D 91E0 03AB LDS	R30,text_ptr
    0194F 27FF      CLR	R31
    01950 0FE8      ADD	R30,R24
    01951 1FF9      ADC	R31,R25
    01952 9020 0115 LDS	R2,KeyID
    01954 8220      ST	Z,R2
(1069) 	text_ptr++;
    01955 9180 03AB LDS	R24,text_ptr
    01957 5F8F      SUBI	R24,0xFF
    01958 9380 03AB STS	text_ptr,R24
(1070)   }
    0195A C1B9      RJMP	0x1B14
(1071)   else if((KeyID==10)&&(text_ptr>0))
    0195B 9180 0115 LDS	R24,KeyID
    0195D 308A      CPI	R24,0xA
    0195E F009      BEQ	0x1960
    0195F C074      RJMP	0x19D4
    01960 E080      LDI	R24,0
    01961 9020 03AB LDS	R2,text_ptr
    01963 1582      CP	R24,R2
    01964 F008      BCS	0x1966
    01965 C06E      RJMP	0x19D4
(1072)   {
(1073)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    01966 90A0 0115 LDS	R10,KeyID
    01968 24BB      CLR	R11
    01969 0CAA      LSL	R10
    0196A 1CBB      ROL	R11
    0196B 0CAA      LSL	R10
    0196C 1CBB      ROL	R11
    0196D 0CAA      LSL	R10
    0196E 1CBB      ROL	R11
    0196F EC8E      LDI	R24,0xCE
    01970 E091      LDI	R25,1
    01971 01F5      MOVW	R30,R10
    01972 0FE8      ADD	R30,R24
    01973 1FF9      ADC	R31,R25
    01974 9027      ELPM	R2,Z+
    01975 9036      ELPM	R3,Z
    01976 863B      STD	Y+11,R3
    01977 862A      STD	Y+10,R2
    01978 EC8C      LDI	R24,0xCC
    01979 E091      LDI	R25,1
    0197A 01F5      MOVW	R30,R10
    0197B 0FE8      ADD	R30,R24
    0197C 1FF9      ADC	R31,R25
    0197D 9147      ELPM	R20,Z+
    0197E 9156      ELPM	R21,Z
    0197F 8759      STD	Y+9,R21
    01980 8748      STD	Y+8,R20
    01981 ED82      LDI	R24,0xD2
    01982 E091      LDI	R25,1
    01983 01F5      MOVW	R30,R10
    01984 0FE8      ADD	R30,R24
    01985 1FF9      ADC	R31,R25
    01986 9187      ELPM	R24,Z+
    01987 9196      ELPM	R25,Z
    01988 5684      SUBI	R24,0x64
    01989 4090      SBCI	R25,0
    0198A 839F      STD	Y+7,R25
    0198B 838E      STD	Y+6,R24
    0198C ED80      LDI	R24,0xD0
    0198D E091      LDI	R25,1
    0198E 01F5      MOVW	R30,R10
    0198F 0FE8      ADD	R30,R24
    01990 1FF9      ADC	R31,R25
    01991 9187      ELPM	R24,Z+
    01992 9196      ELPM	R25,Z
    01993 974D      SBIW	R24,0x1D
    01994 839D      STD	Y+5,R25
    01995 838C      STD	Y+4,R24
    01996 EC8E      LDI	R24,0xCE
    01997 E091      LDI	R25,1
    01998 01F5      MOVW	R30,R10
    01999 0FE8      ADD	R30,R24
    0199A 1FF9      ADC	R31,R25
    0199B 9187      ELPM	R24,Z+
    0199C 9196      ELPM	R25,Z
    0199D 5684      SUBI	R24,0x64
    0199E 4090      SBCI	R25,0
    0199F 839B      STD	Y+3,R25
    019A0 838A      STD	Y+2,R24
    019A1 01CA      MOVW	R24,R20
    019A2 974D      SBIW	R24,0x1D
    019A3 8399      STD	Y+1,R25
    019A4 8388      ST	Y,R24
    019A5 E12B      LDI	R18,0x1B
    019A6 2700      CLR	R16
    019A7 940E 3F14 CALL	_cut_pic
(1074)     text_ptr--;
    019A9 9180 03AB LDS	R24,text_ptr
    019AB 5081      SUBI	R24,1
    019AC 9380 03AB STS	text_ptr,R24
(1075) 	Text[text_ptr]=0;
    019AE EF8E      LDI	R24,0xFE
    019AF E093      LDI	R25,3
    019B0 91E0 03AB LDS	R30,text_ptr
    019B2 27FF      CLR	R31
    019B3 0FE8      ADD	R30,R24
    019B4 1FF9      ADC	R31,R25
    019B5 2422      CLR	R2
    019B6 8220      ST	Z,R2
(1076) 	print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,&Text[9]);
    019B7 E087      LDI	R24,7
    019B8 E094      LDI	R25,4
    019B9 879B      STD	Y+11,R25
    019BA 878A      STD	Y+10,R24
    019BB EF8F      LDI	R24,0xFF
    019BC EF9F      LDI	R25,0xFF
    019BD 8799      STD	Y+9,R25
    019BE 8788      STD	Y+8,R24
    019BF EB8B      LDI	R24,0xBB
    019C0 E094      LDI	R25,4
    019C1 839F      STD	Y+7,R25
    019C2 838E      STD	Y+6,R24
    019C3 E082      LDI	R24,2
    019C4 838C      STD	Y+4,R24
    019C5 ED81      LDI	R24,0xD1
    019C6 838A      STD	Y+2,R24
    019C7 8228      ST	Y,R2
    019C8 E926      LDI	R18,0x96
    019C9 E030      LDI	R19,0
    019CA 9110 03AB LDS	R17,text_ptr
    019CC E00C      LDI	R16,0xC
    019CD 0301      MULSU	R16,R17
    019CE 0180      MOVW	R16,R0
    019CF 5B01      SUBI	R16,0xB1
    019D0 4F1E      SBCI	R17,0xFE
    019D1 940E 3F08 CALL	_print_texts
(1077)   }
    019D3 C140      RJMP	0x1B14
(1078)   else if((KeyID==11)&&(text_ptr==6))
    019D4 9180 0115 LDS	R24,KeyID
    019D6 308B      CPI	R24,0xB
    019D7 F009      BEQ	0x19D9
    019D8 C0F4      RJMP	0x1ACD
    019D9 9180 03AB LDS	R24,text_ptr
    019DB 3086      CPI	R24,6
    019DC F009      BEQ	0x19DE
    019DD C0EF      RJMP	0x1ACD
(1079)   {
(1080)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    019DE 90A0 0115 LDS	R10,KeyID
    019E0 24BB      CLR	R11
    019E1 0CAA      LSL	R10
    019E2 1CBB      ROL	R11
    019E3 0CAA      LSL	R10
    019E4 1CBB      ROL	R11
    019E5 0CAA      LSL	R10
    019E6 1CBB      ROL	R11
    019E7 EC8E      LDI	R24,0xCE
    019E8 E091      LDI	R25,1
    019E9 01F5      MOVW	R30,R10
    019EA 0FE8      ADD	R30,R24
    019EB 1FF9      ADC	R31,R25
    019EC 9027      ELPM	R2,Z+
    019ED 9036      ELPM	R3,Z
    019EE 863B      STD	Y+11,R3
    019EF 862A      STD	Y+10,R2
    019F0 EC8C      LDI	R24,0xCC
    019F1 E091      LDI	R25,1
    019F2 01F5      MOVW	R30,R10
    019F3 0FE8      ADD	R30,R24
    019F4 1FF9      ADC	R31,R25
    019F5 9147      ELPM	R20,Z+
    019F6 9156      ELPM	R21,Z
    019F7 8759      STD	Y+9,R21
    019F8 8748      STD	Y+8,R20
    019F9 ED82      LDI	R24,0xD2
    019FA E091      LDI	R25,1
    019FB 01F5      MOVW	R30,R10
    019FC 0FE8      ADD	R30,R24
    019FD 1FF9      ADC	R31,R25
    019FE 9187      ELPM	R24,Z+
    019FF 9196      ELPM	R25,Z
    01A00 5684      SUBI	R24,0x64
    01A01 4090      SBCI	R25,0
    01A02 839F      STD	Y+7,R25
    01A03 838E      STD	Y+6,R24
    01A04 ED80      LDI	R24,0xD0
    01A05 E091      LDI	R25,1
    01A06 01F5      MOVW	R30,R10
    01A07 0FE8      ADD	R30,R24
    01A08 1FF9      ADC	R31,R25
    01A09 9187      ELPM	R24,Z+
    01A0A 9196      ELPM	R25,Z
    01A0B 974D      SBIW	R24,0x1D
    01A0C 839D      STD	Y+5,R25
    01A0D 838C      STD	Y+4,R24
    01A0E EC8E      LDI	R24,0xCE
    01A0F E091      LDI	R25,1
    01A10 01F5      MOVW	R30,R10
    01A11 0FE8      ADD	R30,R24
    01A12 1FF9      ADC	R31,R25
    01A13 9187      ELPM	R24,Z+
    01A14 9196      ELPM	R25,Z
    01A15 5684      SUBI	R24,0x64
    01A16 4090      SBCI	R25,0
    01A17 839B      STD	Y+3,R25
    01A18 838A      STD	Y+2,R24
    01A19 01CA      MOVW	R24,R20
    01A1A 974D      SBIW	R24,0x1D
    01A1B 8399      STD	Y+1,R25
    01A1C 8388      ST	Y,R24
    01A1D E12B      LDI	R18,0x1B
    01A1E 2700      CLR	R16
    01A1F 940E 3F14 CALL	_cut_pic
(1081) 	if((Text[0]==PasswordTab[0])&&(Text[1]==PasswordTab[1])&&(Text[2]==PasswordTab[2])&&(Text[3]==PasswordTab[3])&&(Text[4]==PasswordTab[4])&&(Text[5]==PasswordTab[5]))
    01A21 9020 07E9 LDS	R2,PasswordTab
    01A23 9030 03FE LDS	R3,Text
    01A25 1432      CP	R3,R2
    01A26 F511      BNE	0x1A49
    01A27 9020 07EA LDS	R2,PasswordTab+1
    01A29 9030 03FF LDS	R3,Text+1
    01A2B 1432      CP	R3,R2
    01A2C F4E1      BNE	0x1A49
    01A2D 9020 07EB LDS	R2,PasswordTab+2
    01A2F 9030 0400 LDS	R3,Text+2
    01A31 1432      CP	R3,R2
    01A32 F4B1      BNE	0x1A49
    01A33 9020 07EC LDS	R2,PasswordTab+3
    01A35 9030 0401 LDS	R3,Text+3
    01A37 1432      CP	R3,R2
    01A38 F481      BNE	0x1A49
    01A39 9020 07ED LDS	R2,PasswordTab+4
    01A3B 9030 0402 LDS	R3,Text+4
    01A3D 1432      CP	R3,R2
    01A3E F451      BNE	0x1A49
    01A3F 9020 07EE LDS	R2,PasswordTab+5
    01A41 9030 0403 LDS	R3,Text+5
    01A43 1432      CP	R3,R2
    01A44 F421      BNE	0x1A49
(1082) 	{
(1083) 	  text_ptr=8;
    01A45 E088      LDI	R24,0x8
    01A46 9380 03AB STS	text_ptr,R24
(1084) 	}
    01A48 C0CB      RJMP	0x1B14
(1085) 	else if((Text[0]==1)&&(Text[1]==1)&&(Text[2]==1)&&(Text[3]==0)&&(Text[4]==0)&&(Text[5]==1))
    01A49 9180 03FE LDS	R24,Text
    01A4B 3081      CPI	R24,1
    01A4C F009      BEQ	0x1A4E
    01A4D C053      RJMP	0x1AA1
    01A4E 9180 03FF LDS	R24,Text+1
    01A50 3081      CPI	R24,1
    01A51 F009      BEQ	0x1A53
    01A52 C04E      RJMP	0x1AA1
    01A53 9180 0400 LDS	R24,Text+2
    01A55 3081      CPI	R24,1
    01A56 F009      BEQ	0x1A58
    01A57 C049      RJMP	0x1AA1
    01A58 9020 0401 LDS	R2,Text+3
    01A5A 2022      TST	R2
    01A5B F009      BEQ	0x1A5D
    01A5C C044      RJMP	0x1AA1
    01A5D 9020 0402 LDS	R2,Text+4
    01A5F 2022      TST	R2
    01A60 F009      BEQ	0x1A62
    01A61 C03F      RJMP	0x1AA1
    01A62 9180 0403 LDS	R24,Text+5
    01A64 3081      CPI	R24,1
    01A65 F5D9      BNE	0x1AA1
(1086) 	{
(1087) 	  PasswordTab[0]=1;
    01A66 E081      LDI	R24,1
    01A67 9380 07E9 STS	PasswordTab,R24
(1088) 	  PasswordTab[1]=2;
    01A69 E082      LDI	R24,2
    01A6A 9380 07EA STS	PasswordTab+1,R24
(1089) 	  PasswordTab[2]=0;
    01A6C 2422      CLR	R2
    01A6D 9220 07EB STS	PasswordTab+2,R2
(1090) 	  PasswordTab[3]=1;
    01A6F E081      LDI	R24,1
    01A70 9380 07EC STS	PasswordTab+3,R24
(1091) 	  PasswordTab[4]=0;
    01A72 9220 07ED STS	PasswordTab+4,R2
(1092) 	  PasswordTab[5]=1;
    01A74 9380 07EE STS	PasswordTab+5,R24
(1093) 	  text_ptr=0;
    01A76 9220 03AB STS	text_ptr,R2
(1094) 	  Text[0]=' ';
    01A78 E280      LDI	R24,0x20
    01A79 9380 03FE STS	Text,R24
(1095) 	  Text[1]=' ';
    01A7B 9380 03FF STS	Text+1,R24
(1096) 	  Text[2]=' ';
    01A7D 9380 0400 STS	Text+2,R24
(1097) 	  Text[3]=' ';
    01A7F 9380 0401 STS	Text+3,R24
(1098) 	  Text[4]=' ';
    01A81 9380 0402 STS	Text+4,R24
(1099) 	  Text[5]=' ';
    01A83 9380 0403 STS	Text+5,R24
(1100) 	  print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,Text);
    01A85 EF8E      LDI	R24,0xFE
    01A86 E093      LDI	R25,3
    01A87 879B      STD	Y+11,R25
    01A88 878A      STD	Y+10,R24
    01A89 EF8F      LDI	R24,0xFF
    01A8A EF9F      LDI	R25,0xFF
    01A8B 8799      STD	Y+9,R25
    01A8C 8788      STD	Y+8,R24
    01A8D EB8B      LDI	R24,0xBB
    01A8E E094      LDI	R25,4
    01A8F 839F      STD	Y+7,R25
    01A90 838E      STD	Y+6,R24
    01A91 E082      LDI	R24,2
    01A92 838C      STD	Y+4,R24
    01A93 ED81      LDI	R24,0xD1
    01A94 838A      STD	Y+2,R24
    01A95 8228      ST	Y,R2
    01A96 E926      LDI	R18,0x96
    01A97 E030      LDI	R19,0
    01A98 2D12      MOV	R17,R2
    01A99 E00C      LDI	R16,0xC
    01A9A 0301      MULSU	R16,R17
    01A9B 0180      MOVW	R16,R0
    01A9C 5B01      SUBI	R16,0xB1
    01A9D 4F1E      SBCI	R17,0xFE
    01A9E 940E 3F08 CALL	_print_texts
(1101) 	}
    01AA0 C073      RJMP	0x1B14
(1102) 	else
(1103)     {
(1104) 	  text_ptr=0;
    01AA1 2422      CLR	R2
    01AA2 9220 03AB STS	text_ptr,R2
(1105) 	  Text[0]=' ';
    01AA4 E280      LDI	R24,0x20
    01AA5 9380 03FE STS	Text,R24
(1106) 	  Text[1]=' ';
    01AA7 9380 03FF STS	Text+1,R24
(1107) 	  Text[2]=' ';
    01AA9 9380 0400 STS	Text+2,R24
(1108) 	  Text[3]=' ';
    01AAB 9380 0401 STS	Text+3,R24
(1109) 	  Text[4]=' ';
    01AAD 9380 0402 STS	Text+4,R24
(1110) 	  Text[5]=' ';
    01AAF 9380 0403 STS	Text+5,R24
(1111) 	  print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,Text);
    01AB1 EF8E      LDI	R24,0xFE
    01AB2 E093      LDI	R25,3
    01AB3 879B      STD	Y+11,R25
    01AB4 878A      STD	Y+10,R24
    01AB5 EF8F      LDI	R24,0xFF
    01AB6 EF9F      LDI	R25,0xFF
    01AB7 8799      STD	Y+9,R25
    01AB8 8788      STD	Y+8,R24
    01AB9 EB8B      LDI	R24,0xBB
    01ABA E094      LDI	R25,4
    01ABB 839F      STD	Y+7,R25
    01ABC 838E      STD	Y+6,R24
    01ABD E082      LDI	R24,2
    01ABE 838C      STD	Y+4,R24
    01ABF ED81      LDI	R24,0xD1
    01AC0 838A      STD	Y+2,R24
    01AC1 8228      ST	Y,R2
    01AC2 E926      LDI	R18,0x96
    01AC3 E030      LDI	R19,0
    01AC4 2D12      MOV	R17,R2
    01AC5 E00C      LDI	R16,0xC
    01AC6 0301      MULSU	R16,R17
    01AC7 0180      MOVW	R16,R0
    01AC8 5B01      SUBI	R16,0xB1
    01AC9 4F1E      SBCI	R17,0xFE
    01ACA 940E 3F08 CALL	_print_texts
(1112) 	}
(1113)   }
    01ACC C047      RJMP	0x1B14
(1114)   else if(KeyID==12)
    01ACD 9180 0115 LDS	R24,KeyID
    01ACF 308C      CPI	R24,0xC
    01AD0 F009      BEQ	0x1AD2
    01AD1 C042      RJMP	0x1B14
(1115)   {
(1116)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS); 
    01AD2 2EA8      MOV	R10,R24
    01AD3 24BB      CLR	R11
    01AD4 0CAA      LSL	R10
    01AD5 1CBB      ROL	R11
    01AD6 0CAA      LSL	R10
    01AD7 1CBB      ROL	R11
    01AD8 0CAA      LSL	R10
    01AD9 1CBB      ROL	R11
    01ADA EC8E      LDI	R24,0xCE
    01ADB E091      LDI	R25,1
    01ADC 01F5      MOVW	R30,R10
    01ADD 0FE8      ADD	R30,R24
    01ADE 1FF9      ADC	R31,R25
    01ADF 9027      ELPM	R2,Z+
    01AE0 9036      ELPM	R3,Z
    01AE1 863B      STD	Y+11,R3
    01AE2 862A      STD	Y+10,R2
    01AE3 EC8C      LDI	R24,0xCC
    01AE4 E091      LDI	R25,1
    01AE5 01F5      MOVW	R30,R10
    01AE6 0FE8      ADD	R30,R24
    01AE7 1FF9      ADC	R31,R25
    01AE8 9147      ELPM	R20,Z+
    01AE9 9156      ELPM	R21,Z
    01AEA 8759      STD	Y+9,R21
    01AEB 8748      STD	Y+8,R20
    01AEC ED82      LDI	R24,0xD2
    01AED E091      LDI	R25,1
    01AEE 01F5      MOVW	R30,R10
    01AEF 0FE8      ADD	R30,R24
    01AF0 1FF9      ADC	R31,R25
    01AF1 9187      ELPM	R24,Z+
    01AF2 9196      ELPM	R25,Z
    01AF3 5684      SUBI	R24,0x64
    01AF4 4090      SBCI	R25,0
    01AF5 839F      STD	Y+7,R25
    01AF6 838E      STD	Y+6,R24
    01AF7 ED80      LDI	R24,0xD0
    01AF8 E091      LDI	R25,1
    01AF9 01F5      MOVW	R30,R10
    01AFA 0FE8      ADD	R30,R24
    01AFB 1FF9      ADC	R31,R25
    01AFC 9187      ELPM	R24,Z+
    01AFD 9196      ELPM	R25,Z
    01AFE 974D      SBIW	R24,0x1D
    01AFF 839D      STD	Y+5,R25
    01B00 838C      STD	Y+4,R24
    01B01 EC8E      LDI	R24,0xCE
    01B02 E091      LDI	R25,1
    01B03 01F5      MOVW	R30,R10
    01B04 0FE8      ADD	R30,R24
    01B05 1FF9      ADC	R31,R25
    01B06 9187      ELPM	R24,Z+
    01B07 9196      ELPM	R25,Z
    01B08 5684      SUBI	R24,0x64
    01B09 4090      SBCI	R25,0
    01B0A 839B      STD	Y+3,R25
    01B0B 838A      STD	Y+2,R24
    01B0C 01CA      MOVW	R24,R20
    01B0D 974D      SBIW	R24,0x1D
    01B0E 8399      STD	Y+1,R25
    01B0F 8388      ST	Y,R24
    01B10 E12B      LDI	R18,0x1B
    01B11 2700      CLR	R16
    01B12 940E 3F14 CALL	_cut_pic
(1117)   }
    01B14 962C      ADIW	R28,0xC
    01B15 940C 4514 JMP	pop_xgset300C
_PasswordKeyUp:
    01B17 972C      SBIW	R28,0xC
(1118) } 
(1119) void PasswordKeyUp(void)
(1120) {
(1121)   if(DisPage!=PASSWORDPAGE) return;
    01B18 9180 0114 LDS	R24,DisPage
    01B1A 3089      CPI	R24,0x9
    01B1B F009      BEQ	0x1B1D
    01B1C C03A      RJMP	0x1B57
(1122)   if(KeyID<12)
    01B1D 9180 0115 LDS	R24,KeyID
    01B1F 308C      CPI	R24,0xC
    01B20 F4D0      BCC	0x1B3B
(1123)   {
(1124)     cut_pic(0,27,0,90,269,325,300,190);
    01B21 EB8E      LDI	R24,0xBE
    01B22 E090      LDI	R25,0
    01B23 879B      STD	Y+11,R25
    01B24 878A      STD	Y+10,R24
    01B25 E28C      LDI	R24,0x2C
    01B26 E091      LDI	R25,1
    01B27 8799      STD	Y+9,R25
    01B28 8788      STD	Y+8,R24
    01B29 E485      LDI	R24,0x45
    01B2A 839F      STD	Y+7,R25
    01B2B 838E      STD	Y+6,R24
    01B2C E08D      LDI	R24,0xD
    01B2D 839D      STD	Y+5,R25
    01B2E 838C      STD	Y+4,R24
    01B2F E58A      LDI	R24,0x5A
    01B30 E090      LDI	R25,0
    01B31 839B      STD	Y+3,R25
    01B32 838A      STD	Y+2,R24
    01B33 2422      CLR	R2
    01B34 2433      CLR	R3
    01B35 8239      STD	Y+1,R3
    01B36 8228      ST	Y,R2
    01B37 E12B      LDI	R18,0x1B
    01B38 2700      CLR	R16
    01B39 940E 3F14 CALL	_cut_pic
(1125)   }
(1126)   if((KeyID==11)&&(text_ptr==8))
    01B3B 9180 0115 LDS	R24,KeyID
    01B3D 308B      CPI	R24,0xB
    01B3E F479      BNE	0x1B4E
    01B3F 9180 03AB LDS	R24,text_ptr
    01B41 3088      CPI	R24,0x8
    01B42 F459      BNE	0x1B4E
(1127)   {
(1128)     clock_off();
    01B43 940E 3F40 CALL	_clock_off
(1129) 	dis_pic(19);
    01B45 E103      LDI	R16,0x13
    01B46 940E 3F13 CALL	_dis_pic
(1130) 	DisVer();
    01B48 940E 2DF4 CALL	_DisVer
(1131) 	DisPage=SYSTEMPAGE;
    01B4A E08A      LDI	R24,0xA
    01B4B 9380 0114 STS	DisPage,R24
(1132)   }
    01B4D C009      RJMP	0x1B57
(1133)   else if(KeyID==12)
    01B4E 9180 0115 LDS	R24,KeyID
    01B50 308C      CPI	R24,0xC
    01B51 F429      BNE	0x1B57
(1134)   {
(1135)     DisWelcome();
    01B52 940E 090A CALL	_DisWelcome
(1136)     DisPage=WELCOMEPAGE;
    01B54 2422      CLR	R2
    01B55 9220 0114 STS	DisPage,R2
(1137)   } 
    01B57 962C      ADIW	R28,0xC
    01B58 9508      RET
_SystemKeyDown:
  i                    --> R20
    01B59 940E 4506 CALL	push_xgset30FC
    01B5B 972C      SBIW	R28,0xC
(1138) }   
(1139) void SystemKeyDown(void)
(1140) {
(1141)  unsigned char i;
(1142)  if(DisPage!=SYSTEMPAGE) return;
    01B5C 9180 0114 LDS	R24,DisPage
    01B5E 308A      CPI	R24,0xA
    01B5F F009      BEQ	0x1B61
    01B60 C414      RJMP	0x1F75
(1143)  KeyID=GetKeyID(System_Key,10);
    01B61 E02A      LDI	R18,0xA
    01B62 E80C      LDI	R16,0x8C
    01B63 E013      LDI	R17,3
    01B64 940E 0A56 CALL	_GetKeyID
    01B66 9300 0115 STS	KeyID,R16
(1144)  if(KeyID==0)
    01B68 2E20      MOV	R2,R16
    01B69 2300      TST	R16
    01B6A F009      BEQ	0x1B6C
    01B6B C07D      RJMP	0x1BE9
(1145)  {
(1146)    cut_pic(0,20,System_Key[KeyID].XS,System_Key[KeyID].YS,System_Key[KeyID].XE,System_Key[KeyID].YE,System_Key[KeyID].XS,System_Key[KeyID].YS);
    01B6C 2433      CLR	R3
    01B6D 0C22      LSL	R2
    01B6E 1C33      ROL	R3
    01B6F 0C22      LSL	R2
    01B70 1C33      ROL	R3
    01B71 0C22      LSL	R2
    01B72 1C33      ROL	R3
    01B73 0121      MOVW	R4,R2
    01B74 E88E      LDI	R24,0x8E
    01B75 E093      LDI	R25,3
    01B76 01F1      MOVW	R30,R2
    01B77 0FE8      ADD	R30,R24
    01B78 1FF9      ADC	R31,R25
    01B79 9027      ELPM	R2,Z+
    01B7A 9036      ELPM	R3,Z
    01B7B 863B      STD	Y+11,R3
    01B7C 862A      STD	Y+10,R2
    01B7D E88C      LDI	R24,0x8C
    01B7E E093      LDI	R25,3
    01B7F 01F2      MOVW	R30,R4
    01B80 0FE8      ADD	R30,R24
    01B81 1FF9      ADC	R31,R25
    01B82 90A7      ELPM	R10,Z+
    01B83 90B6      ELPM	R11,Z
    01B84 86B9      STD	Y+9,R11
    01B85 86A8      STD	Y+8,R10
    01B86 E982      LDI	R24,0x92
    01B87 E093      LDI	R25,3
    01B88 01F2      MOVW	R30,R4
    01B89 0FE8      ADD	R30,R24
    01B8A 1FF9      ADC	R31,R25
    01B8B 9027      ELPM	R2,Z+
    01B8C 9036      ELPM	R3,Z
    01B8D 823F      STD	Y+7,R3
    01B8E 822E      STD	Y+6,R2
    01B8F E980      LDI	R24,0x90
    01B90 E093      LDI	R25,3
    01B91 01F2      MOVW	R30,R4
    01B92 0FE8      ADD	R30,R24
    01B93 1FF9      ADC	R31,R25
    01B94 9027      ELPM	R2,Z+
    01B95 9036      ELPM	R3,Z
    01B96 823D      STD	Y+5,R3
    01B97 822C      STD	Y+4,R2
    01B98 E88E      LDI	R24,0x8E
    01B99 E093      LDI	R25,3
    01B9A 01F2      MOVW	R30,R4
    01B9B 0FE8      ADD	R30,R24
    01B9C 1FF9      ADC	R31,R25
    01B9D 9027      ELPM	R2,Z+
    01B9E 9036      ELPM	R3,Z
    01B9F 823B      STD	Y+3,R3
    01BA0 822A      STD	Y+2,R2
    01BA1 82B9      STD	Y+1,R11
    01BA2 82A8      ST	Y,R10
    01BA3 E124      LDI	R18,0x14
    01BA4 2700      CLR	R16
    01BA5 940E 3F14 CALL	_cut_pic
(1147)    cut_pic(0,21,0,0,269,299,300,100);
    01BA7 E684      LDI	R24,0x64
    01BA8 E090      LDI	R25,0
    01BA9 879B      STD	Y+11,R25
    01BAA 878A      STD	Y+10,R24
    01BAB E28C      LDI	R24,0x2C
    01BAC E091      LDI	R25,1
    01BAD 8799      STD	Y+9,R25
    01BAE 8788      STD	Y+8,R24
    01BAF E28B      LDI	R24,0x2B
    01BB0 839F      STD	Y+7,R25
    01BB1 838E      STD	Y+6,R24
    01BB2 E08D      LDI	R24,0xD
    01BB3 839D      STD	Y+5,R25
    01BB4 838C      STD	Y+4,R24
    01BB5 2422      CLR	R2
    01BB6 2433      CLR	R3
    01BB7 823B      STD	Y+3,R3
    01BB8 822A      STD	Y+2,R2
    01BB9 8239      STD	Y+1,R3
    01BBA 8228      ST	Y,R2
    01BBB E125      LDI	R18,0x15
    01BBC 2700      CLR	R16
    01BBD 940E 3F14 CALL	_cut_pic
(1148) //   EEPROMReadBytes(CounterAddr+0,&Total_counter,4);
(1149) //   LtoA(Total_counter,Text);
(1150) //   print_texts(340,180,0,0xD1,2,0x04bb,0xffff,Text);
(1151) 
(1152) 	//EEPROMReadBytes(CounterAddr+hand[Intensity[8]]*4,&Total_counter,4);
(1153)     LtoA(Total_counter,Text);
    01BBF EF8E      LDI	R24,0xFE
    01BC0 E093      LDI	R25,3
    01BC1 8399      STD	Y+1,R25
    01BC2 8388      ST	Y,R24
    01BC3 9120 07D5 LDS	R18,Total_counter+2
    01BC5 9130 07D6 LDS	R19,Total_counter+3
    01BC7 9100 07D3 LDS	R16,Total_counter
    01BC9 9110 07D4 LDS	R17,Total_counter+1
    01BCB 940E 0756 CALL	_LtoA
(1154)     print_texts(340,260,0,0xD1,2,0x04bb,0xffff,Text);
    01BCD EF8E      LDI	R24,0xFE
    01BCE E093      LDI	R25,3
    01BCF 879B      STD	Y+11,R25
    01BD0 878A      STD	Y+10,R24
    01BD1 EF8F      LDI	R24,0xFF
    01BD2 EF9F      LDI	R25,0xFF
    01BD3 8799      STD	Y+9,R25
    01BD4 8788      STD	Y+8,R24
    01BD5 EB8B      LDI	R24,0xBB
    01BD6 E094      LDI	R25,4
    01BD7 839F      STD	Y+7,R25
    01BD8 838E      STD	Y+6,R24
    01BD9 E082      LDI	R24,2
    01BDA 838C      STD	Y+4,R24
    01BDB ED81      LDI	R24,0xD1
    01BDC 838A      STD	Y+2,R24
    01BDD 2422      CLR	R2
    01BDE 8228      ST	Y,R2
    01BDF E024      LDI	R18,4
    01BE0 E031      LDI	R19,1
    01BE1 E504      LDI	R16,0x54
    01BE2 E011      LDI	R17,1
    01BE3 940E 3F08 CALL	_print_texts
(1155) 	
(1156) //   EEPROMReadBytes(CounterAddr+8,&Total_counter,4);
(1157) //   LtoA(Total_counter,Text);
(1158) //   print_texts(340,340,0,0xD1,2,0x04bb,0xffff,Text);
(1159)    DisPage=WORKTIMEPAGE;
    01BE5 E08B      LDI	R24,0xB
    01BE6 9380 0114 STS	DisPage,R24
(1160)  }
    01BE8 C38C      RJMP	0x1F75
(1161)  else if(KeyID==1)
    01BE9 9180 0115 LDS	R24,KeyID
    01BEB 3081      CPI	R24,1
    01BEC F009      BEQ	0x1BEE
    01BED C0B2      RJMP	0x1CA0
(1162)  {
(1163)    cut_pic(0,20,System_Key[KeyID].XS,System_Key[KeyID].YS,System_Key[KeyID].XE,System_Key[KeyID].YE,System_Key[KeyID].XS,System_Key[KeyID].YS);
    01BEE 2EC8      MOV	R12,R24
    01BEF 24DD      CLR	R13
    01BF0 0CCC      LSL	R12
    01BF1 1CDD      ROL	R13
    01BF2 0CCC      LSL	R12
    01BF3 1CDD      ROL	R13
    01BF4 0CCC      LSL	R12
    01BF5 1CDD      ROL	R13
    01BF6 E88E      LDI	R24,0x8E
    01BF7 E093      LDI	R25,3
    01BF8 01F6      MOVW	R30,R12
    01BF9 0FE8      ADD	R30,R24
    01BFA 1FF9      ADC	R31,R25
    01BFB 9027      ELPM	R2,Z+
    01BFC 9036      ELPM	R3,Z
    01BFD 863B      STD	Y+11,R3
    01BFE 862A      STD	Y+10,R2
    01BFF E88C      LDI	R24,0x8C
    01C00 E093      LDI	R25,3
    01C01 01F6      MOVW	R30,R12
    01C02 0FE8      ADD	R30,R24
    01C03 1FF9      ADC	R31,R25
    01C04 90A7      ELPM	R10,Z+
    01C05 90B6      ELPM	R11,Z
    01C06 86B9      STD	Y+9,R11
    01C07 86A8      STD	Y+8,R10
    01C08 E982      LDI	R24,0x92
    01C09 E093      LDI	R25,3
    01C0A 01F6      MOVW	R30,R12
    01C0B 0FE8      ADD	R30,R24
    01C0C 1FF9      ADC	R31,R25
    01C0D 9027      ELPM	R2,Z+
    01C0E 9036      ELPM	R3,Z
    01C0F 823F      STD	Y+7,R3
    01C10 822E      STD	Y+6,R2
    01C11 E980      LDI	R24,0x90
    01C12 E093      LDI	R25,3
    01C13 01F6      MOVW	R30,R12
    01C14 0FE8      ADD	R30,R24
    01C15 1FF9      ADC	R31,R25
    01C16 9027      ELPM	R2,Z+
    01C17 9036      ELPM	R3,Z
    01C18 823D      STD	Y+5,R3
    01C19 822C      STD	Y+4,R2
    01C1A E88E      LDI	R24,0x8E
    01C1B E093      LDI	R25,3
    01C1C 01F6      MOVW	R30,R12
    01C1D 0FE8      ADD	R30,R24
    01C1E 1FF9      ADC	R31,R25
    01C1F 9027      ELPM	R2,Z+
    01C20 9036      ELPM	R3,Z
    01C21 823B      STD	Y+3,R3
    01C22 822A      STD	Y+2,R2
    01C23 82B9      STD	Y+1,R11
    01C24 82A8      ST	Y,R10
    01C25 E124      LDI	R18,0x14
    01C26 2700      CLR	R16
    01C27 940E 3F14 CALL	_cut_pic
(1164)    cut_pic(0,22,0,0,399,449,300,80);
    01C29 E580      LDI	R24,0x50
    01C2A E090      LDI	R25,0
    01C2B 879B      STD	Y+11,R25
    01C2C 878A      STD	Y+10,R24
    01C2D E28C      LDI	R24,0x2C
    01C2E E091      LDI	R25,1
    01C2F 8799      STD	Y+9,R25
    01C30 8788      STD	Y+8,R24
    01C31 EC81      LDI	R24,0xC1
    01C32 839F      STD	Y+7,R25
    01C33 838E      STD	Y+6,R24
    01C34 E88F      LDI	R24,0x8F
    01C35 839D      STD	Y+5,R25
    01C36 838C      STD	Y+4,R24
    01C37 2422      CLR	R2
    01C38 2433      CLR	R3
    01C39 823B      STD	Y+3,R3
    01C3A 822A      STD	Y+2,R2
    01C3B 8239      STD	Y+1,R3
    01C3C 8228      ST	Y,R2
    01C3D E126      LDI	R18,0x16
    01C3E 2700      CLR	R16
    01C3F 940E 3F14 CALL	_cut_pic
(1165)    for(i=0;i<4;i++)
    01C41 2744      CLR	R20
    01C42 C056      RJMP	0x1C99
(1166)    {
(1167)     cut_pic(0,22,Option_Key[i].XS+Function_Buf[i]*400-300,Option_Key[i].YS-80,Option_Key[i].XE+Function_Buf[i]*400-300,Option_Key[i].YE-80,Option_Key[i].XS,Option_Key[i].YS);
    01C43 2EE4      MOV	R14,R20
    01C44 24FF      CLR	R15
    01C45 0CEE      LSL	R14
    01C46 1CFF      ROL	R15
    01C47 0CEE      LSL	R14
    01C48 1CFF      ROL	R15
    01C49 0CEE      LSL	R14
    01C4A 1CFF      ROL	R15
    01C4B EE8E      LDI	R24,0xEE
    01C4C E093      LDI	R25,3
    01C4D 01F7      MOVW	R30,R14
    01C4E 0FE8      ADD	R30,R24
    01C4F 1FF9      ADC	R31,R25
    01C50 9027      ELPM	R2,Z+
    01C51 9036      ELPM	R3,Z
    01C52 863B      STD	Y+11,R3
    01C53 862A      STD	Y+10,R2
    01C54 EE8C      LDI	R24,0xEC
    01C55 E093      LDI	R25,3
    01C56 01F7      MOVW	R30,R14
    01C57 0FE8      ADD	R30,R24
    01C58 1FF9      ADC	R31,R25
    01C59 90C7      ELPM	R12,Z+
    01C5A 90D6      ELPM	R13,Z
    01C5B 86D9      STD	Y+9,R13
    01C5C 86C8      STD	Y+8,R12
    01C5D EF82      LDI	R24,0xF2
    01C5E E093      LDI	R25,3
    01C5F 01F7      MOVW	R30,R14
    01C60 0FE8      ADD	R30,R24
    01C61 1FF9      ADC	R31,R25
    01C62 9187      ELPM	R24,Z+
    01C63 9196      ELPM	R25,Z
    01C64 5580      SUBI	R24,0x50
    01C65 4090      SBCI	R25,0
    01C66 839F      STD	Y+7,R25
    01C67 838E      STD	Y+6,R24
    01C68 ED87      LDI	R24,0xD7
    01C69 E097      LDI	R25,7
    01C6A 2FE4      MOV	R30,R20
    01C6B 27FF      CLR	R31
    01C6C 0FE8      ADD	R30,R24
    01C6D 1FF9      ADC	R31,R25
    01C6E 8120      LD	R18,Z
    01C6F 2733      CLR	R19
    01C70 E900      LDI	R16,0x90
    01C71 E011      LDI	R17,1
    01C72 940E 44A5 CALL	empy16s
    01C74 0158      MOVW	R10,R16
    01C75 EF80      LDI	R24,0xF0
    01C76 E093      LDI	R25,3
    01C77 01F7      MOVW	R30,R14
    01C78 0FE8      ADD	R30,R24
    01C79 1FF9      ADC	R31,R25
    01C7A 9187      ELPM	R24,Z+
    01C7B 9196      ELPM	R25,Z
    01C7C 0F80      ADD	R24,R16
    01C7D 1F91      ADC	R25,R17
    01C7E 528C      SUBI	R24,0x2C
    01C7F 4091      SBCI	R25,1
    01C80 839D      STD	Y+5,R25
    01C81 838C      STD	Y+4,R24
    01C82 EE8E      LDI	R24,0xEE
    01C83 E093      LDI	R25,3
    01C84 01F7      MOVW	R30,R14
    01C85 0FE8      ADD	R30,R24
    01C86 1FF9      ADC	R31,R25
    01C87 9187      ELPM	R24,Z+
    01C88 9196      ELPM	R25,Z
    01C89 5580      SUBI	R24,0x50
    01C8A 4090      SBCI	R25,0
    01C8B 839B      STD	Y+3,R25
    01C8C 838A      STD	Y+2,R24
    01C8D 01C6      MOVW	R24,R12
    01C8E 0F80      ADD	R24,R16
    01C8F 1F91      ADC	R25,R17
    01C90 528C      SUBI	R24,0x2C
    01C91 4091      SBCI	R25,1
    01C92 8399      STD	Y+1,R25
    01C93 8388      ST	Y,R24
    01C94 E126      LDI	R18,0x16
    01C95 2700      CLR	R16
    01C96 940E 3F14 CALL	_cut_pic
    01C98 9543      INC	R20
    01C99 3044      CPI	R20,4
    01C9A F408      BCC	0x1C9C
    01C9B CFA7      RJMP	0x1C43
(1168)    }
(1169)    DisPage=OPTIONPAGE;
    01C9C E08C      LDI	R24,0xC
    01C9D 9380 0114 STS	DisPage,R24
(1170)  }
    01C9F C2D5      RJMP	0x1F75
(1171)  else if(KeyID==2)
    01CA0 9180 0115 LDS	R24,KeyID
    01CA2 3082      CPI	R24,2
    01CA3 F009      BEQ	0x1CA5
    01CA4 C0D5      RJMP	0x1D7A
(1172)  {
(1173)    cut_pic(0,20,System_Key[KeyID].XS,System_Key[KeyID].YS,System_Key[KeyID].XE,System_Key[KeyID].YE,System_Key[KeyID].XS,System_Key[KeyID].YS);
    01CA5 2EC8      MOV	R12,R24
    01CA6 24DD      CLR	R13
    01CA7 0CCC      LSL	R12
    01CA8 1CDD      ROL	R13
    01CA9 0CCC      LSL	R12
    01CAA 1CDD      ROL	R13
    01CAB 0CCC      LSL	R12
    01CAC 1CDD      ROL	R13
    01CAD E88E      LDI	R24,0x8E
    01CAE E093      LDI	R25,3
    01CAF 01F6      MOVW	R30,R12
    01CB0 0FE8      ADD	R30,R24
    01CB1 1FF9      ADC	R31,R25
    01CB2 9027      ELPM	R2,Z+
    01CB3 9036      ELPM	R3,Z
    01CB4 863B      STD	Y+11,R3
    01CB5 862A      STD	Y+10,R2
    01CB6 E88C      LDI	R24,0x8C
    01CB7 E093      LDI	R25,3
    01CB8 01F6      MOVW	R30,R12
    01CB9 0FE8      ADD	R30,R24
    01CBA 1FF9      ADC	R31,R25
    01CBB 90A7      ELPM	R10,Z+
    01CBC 90B6      ELPM	R11,Z
    01CBD 86B9      STD	Y+9,R11
    01CBE 86A8      STD	Y+8,R10
    01CBF E982      LDI	R24,0x92
    01CC0 E093      LDI	R25,3
    01CC1 01F6      MOVW	R30,R12
    01CC2 0FE8      ADD	R30,R24
    01CC3 1FF9      ADC	R31,R25
    01CC4 9027      ELPM	R2,Z+
    01CC5 9036      ELPM	R3,Z
    01CC6 823F      STD	Y+7,R3
    01CC7 822E      STD	Y+6,R2
    01CC8 E980      LDI	R24,0x90
    01CC9 E093      LDI	R25,3
    01CCA 01F6      MOVW	R30,R12
    01CCB 0FE8      ADD	R30,R24
    01CCC 1FF9      ADC	R31,R25
    01CCD 9027      ELPM	R2,Z+
    01CCE 9036      ELPM	R3,Z
    01CCF 823D      STD	Y+5,R3
    01CD0 822C      STD	Y+4,R2
    01CD1 E88E      LDI	R24,0x8E
    01CD2 E093      LDI	R25,3
    01CD3 01F6      MOVW	R30,R12
    01CD4 0FE8      ADD	R30,R24
    01CD5 1FF9      ADC	R31,R25
    01CD6 9027      ELPM	R2,Z+
    01CD7 9036      ELPM	R3,Z
    01CD8 823B      STD	Y+3,R3
    01CD9 822A      STD	Y+2,R2
    01CDA 82B9      STD	Y+1,R11
    01CDB 82A8      ST	Y,R10
    01CDC E124      LDI	R18,0x14
    01CDD 2700      CLR	R16
    01CDE 940E 3F14 CALL	_cut_pic
(1174)    cut_pic(0,21,0,300,269,460,300,200);
    01CE0 EC88      LDI	R24,0xC8
    01CE1 E090      LDI	R25,0
    01CE2 879B      STD	Y+11,R25
    01CE3 878A      STD	Y+10,R24
    01CE4 E28C      LDI	R24,0x2C
    01CE5 E091      LDI	R25,1
    01CE6 8799      STD	Y+9,R25
    01CE7 8788      STD	Y+8,R24
    01CE8 EC8C      LDI	R24,0xCC
    01CE9 839F      STD	Y+7,R25
    01CEA 838E      STD	Y+6,R24
    01CEB E08D      LDI	R24,0xD
    01CEC 839D      STD	Y+5,R25
    01CED 838C      STD	Y+4,R24
    01CEE E28C      LDI	R24,0x2C
    01CEF 839B      STD	Y+3,R25
    01CF0 838A      STD	Y+2,R24
    01CF1 2422      CLR	R2
    01CF2 2433      CLR	R3
    01CF3 8239      STD	Y+1,R3
    01CF4 8228      ST	Y,R2
    01CF5 E125      LDI	R18,0x15
    01CF6 2700      CLR	R16
    01CF7 940E 3F14 CALL	_cut_pic
(1175) 
(1176)     cut_pic(0,21,18+(WorktimeSet*272),372,95+(WorktimeSet*271),423,318,272);
    01CF9 E180      LDI	R24,0x10
    01CFA E091      LDI	R25,1
    01CFB 879B      STD	Y+11,R25
    01CFC 878A      STD	Y+10,R24
    01CFD E38E      LDI	R24,0x3E
    01CFE 8799      STD	Y+9,R25
    01CFF 8788      STD	Y+8,R24
    01D00 EA87      LDI	R24,0xA7
    01D01 839F      STD	Y+7,R25
    01D02 838E      STD	Y+6,R24
    01D03 90A0 0118 LDS	R10,WorktimeSet
    01D05 2D2A      MOV	R18,R10
    01D06 2733      CLR	R19
    01D07 E00F      LDI	R16,0xF
    01D08 E011      LDI	R17,1
    01D09 940E 44A5 CALL	empy16s
    01D0B 01C8      MOVW	R24,R16
    01D0C 5A81      SUBI	R24,0xA1
    01D0D 4F9F      SBCI	R25,0xFF
    01D0E 839D      STD	Y+5,R25
    01D0F 838C      STD	Y+4,R24
    01D10 E784      LDI	R24,0x74
    01D11 E091      LDI	R25,1
    01D12 839B      STD	Y+3,R25
    01D13 838A      STD	Y+2,R24
    01D14 2D2A      MOV	R18,R10
    01D15 2733      CLR	R19
    01D16 E100      LDI	R16,0x10
    01D17 E011      LDI	R17,1
    01D18 940E 44A5 CALL	empy16s
    01D1A 01C8      MOVW	R24,R16
    01D1B 9642      ADIW	R24,0x12
    01D1C 8399      STD	Y+1,R25
    01D1D 8388      ST	Y,R24
    01D1E E125      LDI	R18,0x15
    01D1F 2700      CLR	R16
    01D20 940E 3F14 CALL	_cut_pic
(1177)     cut_pic(0,21,96+(PressureSet*272),372,172+(PressureSet*271),423,396,272);	
    01D22 E180      LDI	R24,0x10
    01D23 E091      LDI	R25,1
    01D24 879B      STD	Y+11,R25
    01D25 878A      STD	Y+10,R24
    01D26 E88C      LDI	R24,0x8C
    01D27 8799      STD	Y+9,R25
    01D28 8788      STD	Y+8,R24
    01D29 EA87      LDI	R24,0xA7
    01D2A 839F      STD	Y+7,R25
    01D2B 838E      STD	Y+6,R24
    01D2C 90A0 0119 LDS	R10,PressureSet
    01D2E 2D2A      MOV	R18,R10
    01D2F 2733      CLR	R19
    01D30 E00F      LDI	R16,0xF
    01D31 E011      LDI	R17,1
    01D32 940E 44A5 CALL	empy16s
    01D34 01C8      MOVW	R24,R16
    01D35 5584      SUBI	R24,0x54
    01D36 4F9F      SBCI	R25,0xFF
    01D37 839D      STD	Y+5,R25
    01D38 838C      STD	Y+4,R24
    01D39 E784      LDI	R24,0x74
    01D3A E091      LDI	R25,1
    01D3B 839B      STD	Y+3,R25
    01D3C 838A      STD	Y+2,R24
    01D3D 2D2A      MOV	R18,R10
    01D3E 2733      CLR	R19
    01D3F E100      LDI	R16,0x10
    01D40 E011      LDI	R17,1
    01D41 940E 44A5 CALL	empy16s
    01D43 01C8      MOVW	R24,R16
    01D44 5A80      SUBI	R24,0xA0
    01D45 4F9F      SBCI	R25,0xFF
    01D46 8399      STD	Y+1,R25
    01D47 8388      ST	Y,R24
    01D48 E125      LDI	R18,0x15
    01D49 2700      CLR	R16
    01D4A 940E 3F14 CALL	_cut_pic
(1178)     cut_pic(0,21,173+(ClockSet*272),372,249+(ClockSet*271),423,473,272);			  
    01D4C E180      LDI	R24,0x10
    01D4D E091      LDI	R25,1
    01D4E 879B      STD	Y+11,R25
    01D4F 878A      STD	Y+10,R24
    01D50 ED89      LDI	R24,0xD9
    01D51 8799      STD	Y+9,R25
    01D52 8788      STD	Y+8,R24
    01D53 EA87      LDI	R24,0xA7
    01D54 839F      STD	Y+7,R25
    01D55 838E      STD	Y+6,R24
    01D56 90A0 0121 LDS	R10,ClockSet
    01D58 2D2A      MOV	R18,R10
    01D59 2733      CLR	R19
    01D5A E00F      LDI	R16,0xF
    01D5B E011      LDI	R17,1
    01D5C 940E 44A5 CALL	empy16s
    01D5E 01C8      MOVW	R24,R16
    01D5F 5087      SUBI	R24,7
    01D60 4F9F      SBCI	R25,0xFF
    01D61 839D      STD	Y+5,R25
    01D62 838C      STD	Y+4,R24
    01D63 E784      LDI	R24,0x74
    01D64 E091      LDI	R25,1
    01D65 839B      STD	Y+3,R25
    01D66 838A      STD	Y+2,R24
    01D67 2D2A      MOV	R18,R10
    01D68 2733      CLR	R19
    01D69 E100      LDI	R16,0x10
    01D6A E011      LDI	R17,1
    01D6B 940E 44A5 CALL	empy16s
    01D6D 01C8      MOVW	R24,R16
    01D6E 5583      SUBI	R24,0x53
    01D6F 4F9F      SBCI	R25,0xFF
    01D70 8399      STD	Y+1,R25
    01D71 8388      ST	Y,R24
    01D72 E125      LDI	R18,0x15
    01D73 2700      CLR	R16
    01D74 940E 3F14 CALL	_cut_pic
(1179)    DisPage=PARASPAGE;
    01D76 E08D      LDI	R24,0xD
    01D77 9380 0114 STS	DisPage,R24
(1180)  }
    01D79 C1FB      RJMP	0x1F75
(1181)  else if(KeyID==4)
    01D7A 9180 0115 LDS	R24,KeyID
    01D7C 3084      CPI	R24,4
    01D7D F009      BEQ	0x1D7F
    01D7E C095      RJMP	0x1E14
(1182)  {
(1183)    cut_pic(0,20,System_Key[KeyID].XS,System_Key[KeyID].YS,System_Key[KeyID].XE,System_Key[KeyID].YE,System_Key[KeyID].XS,System_Key[KeyID].YS);
    01D7F 2EC8      MOV	R12,R24
    01D80 24DD      CLR	R13
    01D81 0CCC      LSL	R12
    01D82 1CDD      ROL	R13
    01D83 0CCC      LSL	R12
    01D84 1CDD      ROL	R13
    01D85 0CCC      LSL	R12
    01D86 1CDD      ROL	R13
    01D87 E88E      LDI	R24,0x8E
    01D88 E093      LDI	R25,3
    01D89 01F6      MOVW	R30,R12
    01D8A 0FE8      ADD	R30,R24
    01D8B 1FF9      ADC	R31,R25
    01D8C 9027      ELPM	R2,Z+
    01D8D 9036      ELPM	R3,Z
    01D8E 863B      STD	Y+11,R3
    01D8F 862A      STD	Y+10,R2
    01D90 E88C      LDI	R24,0x8C
    01D91 E093      LDI	R25,3
    01D92 01F6      MOVW	R30,R12
    01D93 0FE8      ADD	R30,R24
    01D94 1FF9      ADC	R31,R25
    01D95 90A7      ELPM	R10,Z+
    01D96 90B6      ELPM	R11,Z
    01D97 86B9      STD	Y+9,R11
    01D98 86A8      STD	Y+8,R10
    01D99 E982      LDI	R24,0x92
    01D9A E093      LDI	R25,3
    01D9B 01F6      MOVW	R30,R12
    01D9C 0FE8      ADD	R30,R24
    01D9D 1FF9      ADC	R31,R25
    01D9E 9027      ELPM	R2,Z+
    01D9F 9036      ELPM	R3,Z
    01DA0 823F      STD	Y+7,R3
    01DA1 822E      STD	Y+6,R2
    01DA2 E980      LDI	R24,0x90
    01DA3 E093      LDI	R25,3
    01DA4 01F6      MOVW	R30,R12
    01DA5 0FE8      ADD	R30,R24
    01DA6 1FF9      ADC	R31,R25
    01DA7 9027      ELPM	R2,Z+
    01DA8 9036      ELPM	R3,Z
    01DA9 823D      STD	Y+5,R3
    01DAA 822C      STD	Y+4,R2
    01DAB E88E      LDI	R24,0x8E
    01DAC E093      LDI	R25,3
    01DAD 01F6      MOVW	R30,R12
    01DAE 0FE8      ADD	R30,R24
    01DAF 1FF9      ADC	R31,R25
    01DB0 9027      ELPM	R2,Z+
    01DB1 9036      ELPM	R3,Z
    01DB2 823B      STD	Y+3,R3
    01DB3 822A      STD	Y+2,R2
    01DB4 82B9      STD	Y+1,R11
    01DB5 82A8      ST	Y,R10
    01DB6 E124      LDI	R18,0x14
    01DB7 2700      CLR	R16
    01DB8 940E 3F14 CALL	_cut_pic
(1184)    cut_pic(0,24,0,0,269,139,300,200);
    01DBA EC88      LDI	R24,0xC8
    01DBB E090      LDI	R25,0
    01DBC 879B      STD	Y+11,R25
    01DBD 878A      STD	Y+10,R24
    01DBE E28C      LDI	R24,0x2C
    01DBF E091      LDI	R25,1
    01DC0 8799      STD	Y+9,R25
    01DC1 8788      STD	Y+8,R24
    01DC2 E88B      LDI	R24,0x8B
    01DC3 E090      LDI	R25,0
    01DC4 839F      STD	Y+7,R25
    01DC5 838E      STD	Y+6,R24
    01DC6 E08D      LDI	R24,0xD
    01DC7 E091      LDI	R25,1
    01DC8 839D      STD	Y+5,R25
    01DC9 838C      STD	Y+4,R24
    01DCA 2422      CLR	R2
    01DCB 2433      CLR	R3
    01DCC 823B      STD	Y+3,R3
    01DCD 822A      STD	Y+2,R2
    01DCE 8239      STD	Y+1,R3
    01DCF 8228      ST	Y,R2
    01DD0 E128      LDI	R18,0x18
    01DD1 2700      CLR	R16
    01DD2 940E 3F14 CALL	_cut_pic
(1185)    if(VerSet == TRUE)
    01DD4 9180 0117 LDS	R24,VerSet
    01DD6 3081      CPI	R24,1
    01DD7 F4E9      BNE	0x1DF5
(1186)    cut_pic(0,24,290,40,539,139,320,240);
    01DD8 EF80      LDI	R24,0xF0
    01DD9 E090      LDI	R25,0
    01DDA 879B      STD	Y+11,R25
    01DDB 878A      STD	Y+10,R24
    01DDC E480      LDI	R24,0x40
    01DDD E091      LDI	R25,1
    01DDE 8799      STD	Y+9,R25
    01DDF 8788      STD	Y+8,R24
    01DE0 E88B      LDI	R24,0x8B
    01DE1 E090      LDI	R25,0
    01DE2 839F      STD	Y+7,R25
    01DE3 838E      STD	Y+6,R24
    01DE4 E18B      LDI	R24,0x1B
    01DE5 E092      LDI	R25,2
    01DE6 839D      STD	Y+5,R25
    01DE7 838C      STD	Y+4,R24
    01DE8 E288      LDI	R24,0x28
    01DE9 E090      LDI	R25,0
    01DEA 839B      STD	Y+3,R25
    01DEB 838A      STD	Y+2,R24
    01DEC E282      LDI	R24,0x22
    01DED E091      LDI	R25,1
    01DEE 8399      STD	Y+1,R25
    01DEF 8388      ST	Y,R24
    01DF0 E128      LDI	R18,0x18
    01DF1 2700      CLR	R16
    01DF2 940E 3F14 CALL	_cut_pic
    01DF4 C01B      RJMP	0x1E10
(1187)    else
(1188)    cut_pic(0,24,20,40,269,139,320,240);
    01DF5 EF80      LDI	R24,0xF0
    01DF6 E090      LDI	R25,0
    01DF7 879B      STD	Y+11,R25
    01DF8 878A      STD	Y+10,R24
    01DF9 E480      LDI	R24,0x40
    01DFA E091      LDI	R25,1
    01DFB 8799      STD	Y+9,R25
    01DFC 8788      STD	Y+8,R24
    01DFD E88B      LDI	R24,0x8B
    01DFE E090      LDI	R25,0
    01DFF 839F      STD	Y+7,R25
    01E00 838E      STD	Y+6,R24
    01E01 E08D      LDI	R24,0xD
    01E02 E091      LDI	R25,1
    01E03 839D      STD	Y+5,R25
    01E04 838C      STD	Y+4,R24
    01E05 E288      LDI	R24,0x28
    01E06 E090      LDI	R25,0
    01E07 839B      STD	Y+3,R25
    01E08 838A      STD	Y+2,R24
    01E09 E184      LDI	R24,0x14
    01E0A 8399      STD	Y+1,R25
    01E0B 8388      ST	Y,R24
    01E0C E128      LDI	R18,0x18
    01E0D 2700      CLR	R16
    01E0E 940E 3F14 CALL	_cut_pic
(1189)    DisPage=VERSIONPAGE;
    01E10 E08F      LDI	R24,0xF
    01E11 9380 0114 STS	DisPage,R24
(1190)  }
    01E13 C161      RJMP	0x1F75
(1191)  else if(KeyID==5)
    01E14 9180 0115 LDS	R24,KeyID
    01E16 3085      CPI	R24,5
    01E17 F421      BNE	0x1E1C
(1192)  {
(1193)    DisPage=PARMPAGE;
    01E18 E180      LDI	R24,0x10
    01E19 9380 0114 STS	DisPage,R24
(1194)  }
    01E1B C159      RJMP	0x1F75
(1195)  else if(KeyID==6)
    01E1C 9180 0115 LDS	R24,KeyID
    01E1E 3086      CPI	R24,6
    01E1F F009      BEQ	0x1E21
    01E20 C07D      RJMP	0x1E9E
(1196)  {
(1197)    cut_pic(0,20,System_Key[KeyID].XS,System_Key[KeyID].YS,System_Key[KeyID].XE,System_Key[KeyID].YE,System_Key[KeyID].XS,System_Key[KeyID].YS);
    01E21 2EC8      MOV	R12,R24
    01E22 24DD      CLR	R13
    01E23 0CCC      LSL	R12
    01E24 1CDD      ROL	R13
    01E25 0CCC      LSL	R12
    01E26 1CDD      ROL	R13
    01E27 0CCC      LSL	R12
    01E28 1CDD      ROL	R13
    01E29 E88E      LDI	R24,0x8E
    01E2A E093      LDI	R25,3
    01E2B 01F6      MOVW	R30,R12
    01E2C 0FE8      ADD	R30,R24
    01E2D 1FF9      ADC	R31,R25
    01E2E 9027      ELPM	R2,Z+
    01E2F 9036      ELPM	R3,Z
    01E30 863B      STD	Y+11,R3
    01E31 862A      STD	Y+10,R2
    01E32 E88C      LDI	R24,0x8C
    01E33 E093      LDI	R25,3
    01E34 01F6      MOVW	R30,R12
    01E35 0FE8      ADD	R30,R24
    01E36 1FF9      ADC	R31,R25
    01E37 90A7      ELPM	R10,Z+
    01E38 90B6      ELPM	R11,Z
    01E39 86B9      STD	Y+9,R11
    01E3A 86A8      STD	Y+8,R10
    01E3B E982      LDI	R24,0x92
    01E3C E093      LDI	R25,3
    01E3D 01F6      MOVW	R30,R12
    01E3E 0FE8      ADD	R30,R24
    01E3F 1FF9      ADC	R31,R25
    01E40 9027      ELPM	R2,Z+
    01E41 9036      ELPM	R3,Z
    01E42 823F      STD	Y+7,R3
    01E43 822E      STD	Y+6,R2
    01E44 E980      LDI	R24,0x90
    01E45 E093      LDI	R25,3
    01E46 01F6      MOVW	R30,R12
    01E47 0FE8      ADD	R30,R24
    01E48 1FF9      ADC	R31,R25
    01E49 9027      ELPM	R2,Z+
    01E4A 9036      ELPM	R3,Z
    01E4B 823D      STD	Y+5,R3
    01E4C 822C      STD	Y+4,R2
    01E4D E88E      LDI	R24,0x8E
    01E4E E093      LDI	R25,3
    01E4F 01F6      MOVW	R30,R12
    01E50 0FE8      ADD	R30,R24
    01E51 1FF9      ADC	R31,R25
    01E52 9027      ELPM	R2,Z+
    01E53 9036      ELPM	R3,Z
    01E54 823B      STD	Y+3,R3
    01E55 822A      STD	Y+2,R2
    01E56 82B9      STD	Y+1,R11
    01E57 82A8      ST	Y,R10
    01E58 E124      LDI	R18,0x14
    01E59 2700      CLR	R16
    01E5A 940E 3F14 CALL	_cut_pic
(1198)    cut_pic(0,18,0,372,269,512,300,200);
    01E5C EC88      LDI	R24,0xC8
    01E5D E090      LDI	R25,0
    01E5E 879B      STD	Y+11,R25
    01E5F 878A      STD	Y+10,R24
    01E60 E28C      LDI	R24,0x2C
    01E61 E091      LDI	R25,1
    01E62 8799      STD	Y+9,R25
    01E63 8788      STD	Y+8,R24
    01E64 E080      LDI	R24,0
    01E65 E092      LDI	R25,2
    01E66 839F      STD	Y+7,R25
    01E67 838E      STD	Y+6,R24
    01E68 E08D      LDI	R24,0xD
    01E69 E091      LDI	R25,1
    01E6A 839D      STD	Y+5,R25
    01E6B 838C      STD	Y+4,R24
    01E6C E784      LDI	R24,0x74
    01E6D 839B      STD	Y+3,R25
    01E6E 838A      STD	Y+2,R24
    01E6F 2422      CLR	R2
    01E70 2433      CLR	R3
    01E71 8239      STD	Y+1,R3
    01E72 8228      ST	Y,R2
    01E73 E122      LDI	R18,0x12
    01E74 2700      CLR	R16
    01E75 940E 3F14 CALL	_cut_pic
(1199)    cut_pic(0,18,CardSet*271,422,269+CardSet*271,512,300,250);
    01E77 EF8A      LDI	R24,0xFA
    01E78 E090      LDI	R25,0
    01E79 879B      STD	Y+11,R25
    01E7A 878A      STD	Y+10,R24
    01E7B E28C      LDI	R24,0x2C
    01E7C E091      LDI	R25,1
    01E7D 8799      STD	Y+9,R25
    01E7E 8788      STD	Y+8,R24
    01E7F E080      LDI	R24,0
    01E80 E092      LDI	R25,2
    01E81 839F      STD	Y+7,R25
    01E82 838E      STD	Y+6,R24
    01E83 9120 0393 LDS	R18,CardSet
    01E85 2733      CLR	R19
    01E86 E00F      LDI	R16,0xF
    01E87 E011      LDI	R17,1
    01E88 940E 44A5 CALL	empy16s
    01E8A 01A8      MOVW	R20,R16
    01E8B 01CA      MOVW	R24,R20
    01E8C 5F83      SUBI	R24,0xF3
    01E8D 4F9E      SBCI	R25,0xFE
    01E8E 839D      STD	Y+5,R25
    01E8F 838C      STD	Y+4,R24
    01E90 EA86      LDI	R24,0xA6
    01E91 E091      LDI	R25,1
    01E92 839B      STD	Y+3,R25
    01E93 838A      STD	Y+2,R24
    01E94 8359      STD	Y+1,R21
    01E95 8348      ST	Y,R20
    01E96 E122      LDI	R18,0x12
    01E97 2700      CLR	R16
    01E98 940E 3F14 CALL	_cut_pic
(1200)    DisPage=ICCARDPAGE;
    01E9A E181      LDI	R24,0x11
    01E9B 9380 0114 STS	DisPage,R24
(1201)  }
    01E9D C0D7      RJMP	0x1F75
(1202)  else if(KeyID==7)
    01E9E 9180 0115 LDS	R24,KeyID
    01EA0 3087      CPI	R24,7
    01EA1 F009      BEQ	0x1EA3
    01EA2 C059      RJMP	0x1EFC
(1203)  {
(1204)    cut_pic(0,20,System_Key[KeyID].XS,System_Key[KeyID].YS,System_Key[KeyID].XE,System_Key[KeyID].YE,System_Key[KeyID].XS,System_Key[KeyID].YS);
    01EA3 2EC8      MOV	R12,R24
    01EA4 24DD      CLR	R13
    01EA5 0CCC      LSL	R12
    01EA6 1CDD      ROL	R13
    01EA7 0CCC      LSL	R12
    01EA8 1CDD      ROL	R13
    01EA9 0CCC      LSL	R12
    01EAA 1CDD      ROL	R13
    01EAB E88E      LDI	R24,0x8E
    01EAC E093      LDI	R25,3
    01EAD 01F6      MOVW	R30,R12
    01EAE 0FE8      ADD	R30,R24
    01EAF 1FF9      ADC	R31,R25
    01EB0 9027      ELPM	R2,Z+
    01EB1 9036      ELPM	R3,Z
    01EB2 863B      STD	Y+11,R3
    01EB3 862A      STD	Y+10,R2
    01EB4 E88C      LDI	R24,0x8C
    01EB5 E093      LDI	R25,3
    01EB6 01F6      MOVW	R30,R12
    01EB7 0FE8      ADD	R30,R24
    01EB8 1FF9      ADC	R31,R25
    01EB9 90A7      ELPM	R10,Z+
    01EBA 90B6      ELPM	R11,Z
    01EBB 86B9      STD	Y+9,R11
    01EBC 86A8      STD	Y+8,R10
    01EBD E982      LDI	R24,0x92
    01EBE E093      LDI	R25,3
    01EBF 01F6      MOVW	R30,R12
    01EC0 0FE8      ADD	R30,R24
    01EC1 1FF9      ADC	R31,R25
    01EC2 9027      ELPM	R2,Z+
    01EC3 9036      ELPM	R3,Z
    01EC4 823F      STD	Y+7,R3
    01EC5 822E      STD	Y+6,R2
    01EC6 E980      LDI	R24,0x90
    01EC7 E093      LDI	R25,3
    01EC8 01F6      MOVW	R30,R12
    01EC9 0FE8      ADD	R30,R24
    01ECA 1FF9      ADC	R31,R25
    01ECB 9027      ELPM	R2,Z+
    01ECC 9036      ELPM	R3,Z
    01ECD 823D      STD	Y+5,R3
    01ECE 822C      STD	Y+4,R2
    01ECF E88E      LDI	R24,0x8E
    01ED0 E093      LDI	R25,3
    01ED1 01F6      MOVW	R30,R12
    01ED2 0FE8      ADD	R30,R24
    01ED3 1FF9      ADC	R31,R25
    01ED4 9027      ELPM	R2,Z+
    01ED5 9036      ELPM	R3,Z
    01ED6 823B      STD	Y+3,R3
    01ED7 822A      STD	Y+2,R2
    01ED8 82B9      STD	Y+1,R11
    01ED9 82A8      ST	Y,R10
    01EDA E124      LDI	R18,0x14
    01EDB 2700      CLR	R16
    01EDC 940E 3F14 CALL	_cut_pic
(1205)    cut_pic(0,26,0,0,269,139,300,200);
    01EDE EC88      LDI	R24,0xC8
    01EDF E090      LDI	R25,0
    01EE0 879B      STD	Y+11,R25
    01EE1 878A      STD	Y+10,R24
    01EE2 E28C      LDI	R24,0x2C
    01EE3 E091      LDI	R25,1
    01EE4 8799      STD	Y+9,R25
    01EE5 8788      STD	Y+8,R24
    01EE6 E88B      LDI	R24,0x8B
    01EE7 E090      LDI	R25,0
    01EE8 839F      STD	Y+7,R25
    01EE9 838E      STD	Y+6,R24
    01EEA E08D      LDI	R24,0xD
    01EEB E091      LDI	R25,1
    01EEC 839D      STD	Y+5,R25
    01EED 838C      STD	Y+4,R24
    01EEE 2422      CLR	R2
    01EEF 2433      CLR	R3
    01EF0 823B      STD	Y+3,R3
    01EF1 822A      STD	Y+2,R2
    01EF2 8239      STD	Y+1,R3
    01EF3 8228      ST	Y,R2
    01EF4 E12A      LDI	R18,0x1A
    01EF5 2700      CLR	R16
    01EF6 940E 3F14 CALL	_cut_pic
(1206)    DisPage=RESETPAGE;
    01EF8 E182      LDI	R24,0x12
    01EF9 9380 0114 STS	DisPage,R24
(1207)  }
    01EFB C079      RJMP	0x1F75
(1208)  else if(KeyID==8)
    01EFC 9180 0115 LDS	R24,KeyID
    01EFE 3088      CPI	R24,0x8
    01EFF F009      BEQ	0x1F01
    01F00 C074      RJMP	0x1F75
(1209)  {
(1210)    cut_pic(0,20,System_Key[KeyID].XS,System_Key[KeyID].YS,System_Key[KeyID].XE,System_Key[KeyID].YE,System_Key[KeyID].XS,System_Key[KeyID].YS);
    01F01 2EC8      MOV	R12,R24
    01F02 24DD      CLR	R13
    01F03 0CCC      LSL	R12
    01F04 1CDD      ROL	R13
    01F05 0CCC      LSL	R12
    01F06 1CDD      ROL	R13
    01F07 0CCC      LSL	R12
    01F08 1CDD      ROL	R13
    01F09 E88E      LDI	R24,0x8E
    01F0A E093      LDI	R25,3
    01F0B 01F6      MOVW	R30,R12
    01F0C 0FE8      ADD	R30,R24
    01F0D 1FF9      ADC	R31,R25
    01F0E 9027      ELPM	R2,Z+
    01F0F 9036      ELPM	R3,Z
    01F10 863B      STD	Y+11,R3
    01F11 862A      STD	Y+10,R2
    01F12 E88C      LDI	R24,0x8C
    01F13 E093      LDI	R25,3
    01F14 01F6      MOVW	R30,R12
    01F15 0FE8      ADD	R30,R24
    01F16 1FF9      ADC	R31,R25
    01F17 90A7      ELPM	R10,Z+
    01F18 90B6      ELPM	R11,Z
    01F19 86B9      STD	Y+9,R11
    01F1A 86A8      STD	Y+8,R10
    01F1B E982      LDI	R24,0x92
    01F1C E093      LDI	R25,3
    01F1D 01F6      MOVW	R30,R12
    01F1E 0FE8      ADD	R30,R24
    01F1F 1FF9      ADC	R31,R25
    01F20 9027      ELPM	R2,Z+
    01F21 9036      ELPM	R3,Z
    01F22 823F      STD	Y+7,R3
    01F23 822E      STD	Y+6,R2
    01F24 E980      LDI	R24,0x90
    01F25 E093      LDI	R25,3
    01F26 01F6      MOVW	R30,R12
    01F27 0FE8      ADD	R30,R24
    01F28 1FF9      ADC	R31,R25
    01F29 9027      ELPM	R2,Z+
    01F2A 9036      ELPM	R3,Z
    01F2B 823D      STD	Y+5,R3
    01F2C 822C      STD	Y+4,R2
    01F2D E88E      LDI	R24,0x8E
    01F2E E093      LDI	R25,3
    01F2F 01F6      MOVW	R30,R12
    01F30 0FE8      ADD	R30,R24
    01F31 1FF9      ADC	R31,R25
    01F32 9027      ELPM	R2,Z+
    01F33 9036      ELPM	R3,Z
    01F34 823B      STD	Y+3,R3
    01F35 822A      STD	Y+2,R2
    01F36 82B9      STD	Y+1,R11
    01F37 82A8      ST	Y,R10
    01F38 E124      LDI	R18,0x14
    01F39 2700      CLR	R16
    01F3A 940E 3F14 CALL	_cut_pic
(1211)    cut_pic(0,27,0,0,269,325,300,100);
    01F3C E684      LDI	R24,0x64
    01F3D E090      LDI	R25,0
    01F3E 879B      STD	Y+11,R25
    01F3F 878A      STD	Y+10,R24
    01F40 E28C      LDI	R24,0x2C
    01F41 E091      LDI	R25,1
    01F42 8799      STD	Y+9,R25
    01F43 8788      STD	Y+8,R24
    01F44 E485      LDI	R24,0x45
    01F45 839F      STD	Y+7,R25
    01F46 838E      STD	Y+6,R24
    01F47 E08D      LDI	R24,0xD
    01F48 839D      STD	Y+5,R25
    01F49 838C      STD	Y+4,R24
    01F4A 2422      CLR	R2
    01F4B 2433      CLR	R3
    01F4C 823B      STD	Y+3,R3
    01F4D 822A      STD	Y+2,R2
    01F4E 8239      STD	Y+1,R3
    01F4F 8228      ST	Y,R2
    01F50 E12B      LDI	R18,0x1B
    01F51 2700      CLR	R16
    01F52 940E 3F14 CALL	_cut_pic
(1212)    text_ptr=0;
    01F54 2422      CLR	R2
    01F55 9220 03AB STS	text_ptr,R2
(1213)    Text[0]=' ';
    01F57 E280      LDI	R24,0x20
    01F58 9380 03FE STS	Text,R24
(1214)    Text[1]=' ';
    01F5A 9380 03FF STS	Text+1,R24
(1215)    Text[2]=' ';
    01F5C 9380 0400 STS	Text+2,R24
(1216)    Text[3]=' ';
    01F5E 9380 0401 STS	Text+3,R24
(1217)    Text[4]=' ';
    01F60 9380 0402 STS	Text+4,R24
(1218)    Text[5]=' ';
    01F62 9380 0403 STS	Text+5,R24
(1219)    Text[6]='\0';
    01F64 9220 0404 STS	Text+6,R2
(1220)    Text[7]='*';
    01F66 E28A      LDI	R24,0x2A
    01F67 9380 0405 STS	Text+7,R24
(1221)    Text[8]='\0';
    01F69 9220 0406 STS	Text+8,R2
(1222)    Text[9]=' ';
    01F6B E280      LDI	R24,0x20
    01F6C 9380 0407 STS	Text+9,R24
(1223)    Text[10]='\0';
    01F6E 9220 0408 STS	Text+10,R2
(1224)    Text[11]=0;
    01F70 9220 0409 STS	Text+11,R2
(1225)    DisPage=PASSSETPAGE;
    01F72 E183      LDI	R24,0x13
    01F73 9380 0114 STS	DisPage,R24
(1226)  }
    01F75 962C      ADIW	R28,0xC
    01F76 940C 44F0 JMP	pop_xgset30FC
(1227) }
(1228) void SystemKeyUp(void)
(1229) {
(1230)  if(DisPage!=SYSTEMPAGE) return;
_SystemKeyUp:
    01F78 9180 0114 LDS	R24,DisPage
    01F7A 308A      CPI	R24,0xA
    01F7B F009      BEQ	0x1F7D
    01F7C C009      RJMP	0x1F86
(1231)  if(KeyID==9)
    01F7D 9180 0115 LDS	R24,KeyID
    01F7F 3089      CPI	R24,0x9
    01F80 F429      BNE	0x1F86
(1232)  {
(1233)    DisWelcome();
    01F81 940E 090A CALL	_DisWelcome
(1234)    DisPage=WELCOMEPAGE;
    01F83 2422      CLR	R2
    01F84 9220 0114 STS	DisPage,R2
(1235)  }
    01F86 9508      RET
_ClearCountKeyDown:
    01F87 934A      ST	-Y,R20
    01F88 935A      ST	-Y,R21
    01F89 972C      SBIW	R28,0xC
(1236) }
(1237) void ClearCountKeyDown(void)
(1238) {
(1239)   if(DisPage!=WORKTIMEPAGE) return;
    01F8A 9180 0114 LDS	R24,DisPage
    01F8C 308B      CPI	R24,0xB
    01F8D F009      BEQ	0x1F8F
    01F8E C08C      RJMP	0x201B
(1240)   KeyID=GetKeyID(Count_Key,2); 
    01F8F E022      LDI	R18,2
    01F90 ED0C      LDI	R16,0xDC
    01F91 E013      LDI	R17,3
    01F92 940E 0A56 CALL	_GetKeyID
    01F94 9300 0115 STS	KeyID,R16
(1241)   if(KeyID<1)
    01F96 2F80      MOV	R24,R16
    01F97 3001      CPI	R16,1
    01F98 F008      BCS	0x1F9A
    01F99 C081      RJMP	0x201B
(1242)   {   
(1243) 	cut_pic(0,21,Count_Key[KeyID].XS-28,Count_Key[KeyID].YS-100,Count_Key[KeyID].XE-28,Count_Key[KeyID].YE-100,Count_Key[KeyID].XS,Count_Key[KeyID].YS);
    01F9A 2E28      MOV	R2,R24
    01F9B 2433      CLR	R3
    01F9C 0C22      LSL	R2
    01F9D 1C33      ROL	R3
    01F9E 0C22      LSL	R2
    01F9F 1C33      ROL	R3
    01FA0 0C22      LSL	R2
    01FA1 1C33      ROL	R3
    01FA2 0121      MOVW	R4,R2
    01FA3 ED8E      LDI	R24,0xDE
    01FA4 E093      LDI	R25,3
    01FA5 01F1      MOVW	R30,R2
    01FA6 0FE8      ADD	R30,R24
    01FA7 1FF9      ADC	R31,R25
    01FA8 9027      ELPM	R2,Z+
    01FA9 9036      ELPM	R3,Z
    01FAA 863B      STD	Y+11,R3
    01FAB 862A      STD	Y+10,R2
    01FAC ED8C      LDI	R24,0xDC
    01FAD E093      LDI	R25,3
    01FAE 01F2      MOVW	R30,R4
    01FAF 0FE8      ADD	R30,R24
    01FB0 1FF9      ADC	R31,R25
    01FB1 9147      ELPM	R20,Z+
    01FB2 9156      ELPM	R21,Z
    01FB3 8759      STD	Y+9,R21
    01FB4 8748      STD	Y+8,R20
    01FB5 EE82      LDI	R24,0xE2
    01FB6 E093      LDI	R25,3
    01FB7 01F2      MOVW	R30,R4
    01FB8 0FE8      ADD	R30,R24
    01FB9 1FF9      ADC	R31,R25
    01FBA 9187      ELPM	R24,Z+
    01FBB 9196      ELPM	R25,Z
    01FBC 5684      SUBI	R24,0x64
    01FBD 4090      SBCI	R25,0
    01FBE 839F      STD	Y+7,R25
    01FBF 838E      STD	Y+6,R24
    01FC0 EE80      LDI	R24,0xE0
    01FC1 E093      LDI	R25,3
    01FC2 01F2      MOVW	R30,R4
    01FC3 0FE8      ADD	R30,R24
    01FC4 1FF9      ADC	R31,R25
    01FC5 9187      ELPM	R24,Z+
    01FC6 9196      ELPM	R25,Z
    01FC7 974C      SBIW	R24,0x1C
    01FC8 839D      STD	Y+5,R25
    01FC9 838C      STD	Y+4,R24
    01FCA ED8E      LDI	R24,0xDE
    01FCB E093      LDI	R25,3
    01FCC 01F2      MOVW	R30,R4
    01FCD 0FE8      ADD	R30,R24
    01FCE 1FF9      ADC	R31,R25
    01FCF 9187      ELPM	R24,Z+
    01FD0 9196      ELPM	R25,Z
    01FD1 5684      SUBI	R24,0x64
    01FD2 4090      SBCI	R25,0
    01FD3 839B      STD	Y+3,R25
    01FD4 838A      STD	Y+2,R24
    01FD5 01CA      MOVW	R24,R20
    01FD6 974C      SBIW	R24,0x1C
    01FD7 8399      STD	Y+1,R25
    01FD8 8388      ST	Y,R24
    01FD9 E125      LDI	R18,0x15
    01FDA 2700      CLR	R16
    01FDB 940E 3F14 CALL	_cut_pic
(1244)     Total_counter=0;
    01FDD E080      LDI	R24,0
    01FDE 9380 07D3 STS	Total_counter,R24
    01FE0 9380 07D4 STS	Total_counter+1,R24
    01FE2 9380 07D5 STS	Total_counter+2,R24
    01FE4 9380 07D6 STS	Total_counter+3,R24
(1245)     if(CardSet==0) Work_counter=0;
    01FE6 9020 0393 LDS	R2,CardSet
    01FE8 2022      TST	R2
    01FE9 F431      BNE	0x1FF0
    01FEA 2422      CLR	R2
    01FEB 2433      CLR	R3
    01FEC 9230 07D2 STS	Work_counter+1,R3
    01FEE 9220 07D1 STS	Work_counter,R2
(1246) 	//EEPROMWriteBytes(CounterAddr+hand[Intensity[8]]*4,&Total_counter,4);
(1247)     LtoA(Total_counter,Text);
    01FF0 EF8E      LDI	R24,0xFE
    01FF1 E093      LDI	R25,3
    01FF2 8399      STD	Y+1,R25
    01FF3 8388      ST	Y,R24
    01FF4 9120 07D5 LDS	R18,Total_counter+2
    01FF6 9130 07D6 LDS	R19,Total_counter+3
    01FF8 9100 07D3 LDS	R16,Total_counter
    01FFA 9110 07D4 LDS	R17,Total_counter+1
    01FFC 940E 0756 CALL	_LtoA
(1248)     print_texts(340,180+KeyID*80+80,0,0xD1,2,0x04bb,0xffff,Text);
    01FFE EF8E      LDI	R24,0xFE
    01FFF E093      LDI	R25,3
    02000 879B      STD	Y+11,R25
    02001 878A      STD	Y+10,R24
    02002 EF8F      LDI	R24,0xFF
    02003 EF9F      LDI	R25,0xFF
    02004 8799      STD	Y+9,R25
    02005 8788      STD	Y+8,R24
    02006 EB8B      LDI	R24,0xBB
    02007 E094      LDI	R25,4
    02008 839F      STD	Y+7,R25
    02009 838E      STD	Y+6,R24
    0200A E082      LDI	R24,2
    0200B 838C      STD	Y+4,R24
    0200C ED81      LDI	R24,0xD1
    0200D 838A      STD	Y+2,R24
    0200E 2422      CLR	R2
    0200F 8228      ST	Y,R2
    02010 9110 0115 LDS	R17,KeyID
    02012 E500      LDI	R16,0x50
    02013 0301      MULSU	R16,R17
    02014 0190      MOVW	R18,R0
    02015 5F2C      SUBI	R18,0xFC
    02016 4F3E      SBCI	R19,0xFE
    02017 E504      LDI	R16,0x54
    02018 E011      LDI	R17,1
    02019 940E 3F08 CALL	_print_texts
(1249)   }
    0201B 962C      ADIW	R28,0xC
    0201C 9159      LD	R21,Y+
    0201D 9149      LD	R20,Y+
    0201E 9508      RET
_ClearCountKeyUp:
    0201F 972C      SBIW	R28,0xC
(1250) }
(1251) void ClearCountKeyUp(void)
(1252) {
(1253)   if(DisPage!=WORKTIMEPAGE) return; 
    02020 9180 0114 LDS	R24,DisPage
    02022 308B      CPI	R24,0xB
    02023 F009      BEQ	0x2025
    02024 C055      RJMP	0x207A
(1254)   if(KeyID<1)
    02025 9180 0115 LDS	R24,KeyID
    02027 3081      CPI	R24,1
    02028 F008      BCS	0x202A
    02029 C046      RJMP	0x2070
(1255)   {
(1256)     cut_pic(0,21,Count_Key[KeyID].XS-300,Count_Key[KeyID].YS-100,Count_Key[KeyID].XE-300,Count_Key[KeyID].YE-100,Count_Key[KeyID].XS,Count_Key[KeyID].YS);
    0202A 2E28      MOV	R2,R24
    0202B 2433      CLR	R3
    0202C 0C22      LSL	R2
    0202D 1C33      ROL	R3
    0202E 0C22      LSL	R2
    0202F 1C33      ROL	R3
    02030 0C22      LSL	R2
    02031 1C33      ROL	R3
    02032 0121      MOVW	R4,R2
    02033 ED8E      LDI	R24,0xDE
    02034 E093      LDI	R25,3
    02035 01F1      MOVW	R30,R2
    02036 0FE8      ADD	R30,R24
    02037 1FF9      ADC	R31,R25
    02038 9027      ELPM	R2,Z+
    02039 9036      ELPM	R3,Z
    0203A 863B      STD	Y+11,R3
    0203B 862A      STD	Y+10,R2
    0203C ED8C      LDI	R24,0xDC
    0203D E093      LDI	R25,3
    0203E 01F2      MOVW	R30,R4
    0203F 0FE8      ADD	R30,R24
    02040 1FF9      ADC	R31,R25
    02041 9027      ELPM	R2,Z+
    02042 9036      ELPM	R3,Z
    02043 8639      STD	Y+9,R3
    02044 8628      STD	Y+8,R2
    02045 EE82      LDI	R24,0xE2
    02046 E093      LDI	R25,3
    02047 01F2      MOVW	R30,R4
    02048 0FE8      ADD	R30,R24
    02049 1FF9      ADC	R31,R25
    0204A 9187      ELPM	R24,Z+
    0204B 9196      ELPM	R25,Z
    0204C 5684      SUBI	R24,0x64
    0204D 4090      SBCI	R25,0
    0204E 839F      STD	Y+7,R25
    0204F 838E      STD	Y+6,R24
    02050 EE80      LDI	R24,0xE0
    02051 E093      LDI	R25,3
    02052 01F2      MOVW	R30,R4
    02053 0FE8      ADD	R30,R24
    02054 1FF9      ADC	R31,R25
    02055 9187      ELPM	R24,Z+
    02056 9196      ELPM	R25,Z
    02057 528C      SUBI	R24,0x2C
    02058 4091      SBCI	R25,1
    02059 839D      STD	Y+5,R25
    0205A 838C      STD	Y+4,R24
    0205B ED8E      LDI	R24,0xDE
    0205C E093      LDI	R25,3
    0205D 01F2      MOVW	R30,R4
    0205E 0FE8      ADD	R30,R24
    0205F 1FF9      ADC	R31,R25
    02060 9187      ELPM	R24,Z+
    02061 9196      ELPM	R25,Z
    02062 5684      SUBI	R24,0x64
    02063 4090      SBCI	R25,0
    02064 839B      STD	Y+3,R25
    02065 838A      STD	Y+2,R24
    02066 01C1      MOVW	R24,R2
    02067 528C      SUBI	R24,0x2C
    02068 4091      SBCI	R25,1
    02069 8399      STD	Y+1,R25
    0206A 8388      ST	Y,R24
    0206B E125      LDI	R18,0x15
    0206C 2700      CLR	R16
    0206D 940E 3F14 CALL	_cut_pic
(1257)   }
    0206F C00A      RJMP	0x207A
(1258)   else if(KeyID==1)
    02070 9180 0115 LDS	R24,KeyID
    02072 3081      CPI	R24,1
    02073 F431      BNE	0x207A
(1259)   {
(1260)     dis_pic(19);
    02074 E103      LDI	R16,0x13
    02075 940E 3F13 CALL	_dis_pic
(1261) 	DisPage=SYSTEMPAGE;
    02077 E08A      LDI	R24,0xA
    02078 9380 0114 STS	DisPage,R24
(1262)   }
    0207A 962C      ADIW	R28,0xC
    0207B 9508      RET
(1263) }
(1264) void ParmKeyDown(void)
(1265) {
_ParmKeyDown:
    0207C 9508      RET
_ParmKeyUp:
    0207D 972C      SBIW	R28,0xC
(1266) 
(1267) }
(1268) void ParmKeyUp(void)
(1269) {
(1270)  if(DisPage!=PARMPAGE) return;
    0207E 9180 0114 LDS	R24,DisPage
    02080 3180      CPI	R24,0x10
    02081 F009      BEQ	0x2083
    02082 C0AA      RJMP	0x212D
(1271)  if(KeyID<13)//????完??
    02083 9180 0115 LDS	R24,KeyID
    02085 308D      CPI	R24,0xD
    02086 F008      BCS	0x2088
    02087 C046      RJMP	0x20CE
(1272)  {
(1273)    cut_pic(0,25,Card_Key[KeyID].XS-300,Card_Key[KeyID].YS-100,Card_Key[KeyID].XE-300,Card_Key[KeyID].YE-100,Card_Key[KeyID].XS,Card_Key[KeyID].YS);
    02088 2E28      MOV	R2,R24
    02089 2433      CLR	R3
    0208A 0C22      LSL	R2
    0208B 1C33      ROL	R3
    0208C 0C22      LSL	R2
    0208D 1C33      ROL	R3
    0208E 0C22      LSL	R2
    0208F 1C33      ROL	R3
    02090 0121      MOVW	R4,R2
    02091 E08E      LDI	R24,0xE
    02092 E093      LDI	R25,3
    02093 01F1      MOVW	R30,R2
    02094 0FE8      ADD	R30,R24
    02095 1FF9      ADC	R31,R25
    02096 9027      ELPM	R2,Z+
    02097 9036      ELPM	R3,Z
    02098 863B      STD	Y+11,R3
    02099 862A      STD	Y+10,R2
    0209A E08C      LDI	R24,0xC
    0209B E093      LDI	R25,3
    0209C 01F2      MOVW	R30,R4
    0209D 0FE8      ADD	R30,R24
    0209E 1FF9      ADC	R31,R25
    0209F 9027      ELPM	R2,Z+
    020A0 9036      ELPM	R3,Z
    020A1 8639      STD	Y+9,R3
    020A2 8628      STD	Y+8,R2
    020A3 E182      LDI	R24,0x12
    020A4 E093      LDI	R25,3
    020A5 01F2      MOVW	R30,R4
    020A6 0FE8      ADD	R30,R24
    020A7 1FF9      ADC	R31,R25
    020A8 9187      ELPM	R24,Z+
    020A9 9196      ELPM	R25,Z
    020AA 5684      SUBI	R24,0x64
    020AB 4090      SBCI	R25,0
    020AC 839F      STD	Y+7,R25
    020AD 838E      STD	Y+6,R24
    020AE E180      LDI	R24,0x10
    020AF E093      LDI	R25,3
    020B0 01F2      MOVW	R30,R4
    020B1 0FE8      ADD	R30,R24
    020B2 1FF9      ADC	R31,R25
    020B3 9187      ELPM	R24,Z+
    020B4 9196      ELPM	R25,Z
    020B5 528C      SUBI	R24,0x2C
    020B6 4091      SBCI	R25,1
    020B7 839D      STD	Y+5,R25
    020B8 838C      STD	Y+4,R24
    020B9 E08E      LDI	R24,0xE
    020BA E093      LDI	R25,3
    020BB 01F2      MOVW	R30,R4
    020BC 0FE8      ADD	R30,R24
    020BD 1FF9      ADC	R31,R25
    020BE 9187      ELPM	R24,Z+
    020BF 9196      ELPM	R25,Z
    020C0 5684      SUBI	R24,0x64
    020C1 4090      SBCI	R25,0
    020C2 839B      STD	Y+3,R25
    020C3 838A      STD	Y+2,R24
    020C4 01C1      MOVW	R24,R2
    020C5 528C      SUBI	R24,0x2C
    020C6 4091      SBCI	R25,1
    020C7 8399      STD	Y+1,R25
    020C8 8388      ST	Y,R24
    020C9 E129      LDI	R18,0x19
    020CA 2700      CLR	R16
    020CB 940E 3F14 CALL	_cut_pic
(1274)  }
    020CD C05F      RJMP	0x212D
(1275)  else if((KeyID<10)&&(text_ptr<3))
    020CE 9180 0115 LDS	R24,KeyID
    020D0 308A      CPI	R24,0xA
    020D1 F008      BCS	0x20D3
    020D2 C050      RJMP	0x2123
    020D3 9180 03AB LDS	R24,text_ptr
    020D5 3083      CPI	R24,3
    020D6 F008      BCS	0x20D8
    020D7 C04B      RJMP	0x2123
(1276)  {
(1277)    print_texts(333,154,0,0xD1,2,0x04bb,0xffff,Text);
    020D8 EF8E      LDI	R24,0xFE
    020D9 E093      LDI	R25,3
    020DA 879B      STD	Y+11,R25
    020DB 878A      STD	Y+10,R24
    020DC EF8F      LDI	R24,0xFF
    020DD EF9F      LDI	R25,0xFF
    020DE 8799      STD	Y+9,R25
    020DF 8788      STD	Y+8,R24
    020E0 EB8B      LDI	R24,0xBB
    020E1 E094      LDI	R25,4
    020E2 839F      STD	Y+7,R25
    020E3 838E      STD	Y+6,R24
    020E4 E082      LDI	R24,2
    020E5 838C      STD	Y+4,R24
    020E6 ED81      LDI	R24,0xD1
    020E7 838A      STD	Y+2,R24
    020E8 2422      CLR	R2
    020E9 8228      ST	Y,R2
    020EA E92A      LDI	R18,0x9A
    020EB E030      LDI	R19,0
    020EC E40D      LDI	R16,0x4D
    020ED E011      LDI	R17,1
    020EE 940E 3F08 CALL	_print_texts
(1278)    if(text_ptr<2) text_ptr++;
    020F0 9180 03AB LDS	R24,text_ptr
    020F2 3082      CPI	R24,2
    020F3 F420      BCC	0x20F8
    020F4 5F8F      SUBI	R24,0xFF
    020F5 9380 03AB STS	text_ptr,R24
    020F7 C003      RJMP	0x20FB
(1279)    else text_ptr=0;
    020F8 2422      CLR	R2
    020F9 9220 03AB STS	text_ptr,R2
(1280)    Text[4]=Text[text_ptr];
    020FB EF8E      LDI	R24,0xFE
    020FC E093      LDI	R25,3
    020FD 91E0 03AB LDS	R30,text_ptr
    020FF 27FF      CLR	R31
    02100 0FE8      ADD	R30,R24
    02101 1FF9      ADC	R31,R25
    02102 8020      LD	R2,Z
    02103 9220 0402 STS	Text+4,R2
(1281)    print_texts(333+text_ptr*12,154,0,0xD1,2,0xffff,0x04bb,&Text[4]);
    02105 E082      LDI	R24,2
    02106 E094      LDI	R25,4
    02107 879B      STD	Y+11,R25
    02108 878A      STD	Y+10,R24
    02109 EB8B      LDI	R24,0xBB
    0210A E094      LDI	R25,4
    0210B 8799      STD	Y+9,R25
    0210C 8788      STD	Y+8,R24
    0210D EF8F      LDI	R24,0xFF
    0210E EF9F      LDI	R25,0xFF
    0210F 839F      STD	Y+7,R25
    02110 838E      STD	Y+6,R24
    02111 E082      LDI	R24,2
    02112 838C      STD	Y+4,R24
    02113 ED81      LDI	R24,0xD1
    02114 838A      STD	Y+2,R24
    02115 2422      CLR	R2
    02116 8228      ST	Y,R2
    02117 E92A      LDI	R18,0x9A
    02118 E030      LDI	R19,0
    02119 9110 03AB LDS	R17,text_ptr
    0211B E00C      LDI	R16,0xC
    0211C 0301      MULSU	R16,R17
    0211D 0180      MOVW	R16,R0
    0211E 5B03      SUBI	R16,0xB3
    0211F 4F1E      SBCI	R17,0xFE
    02120 940E 3F08 CALL	_print_texts
(1282)  }
    02122 C00A      RJMP	0x212D
(1283)  else if(KeyID==15)
    02123 9180 0115 LDS	R24,KeyID
    02125 308F      CPI	R24,0xF
    02126 F431      BNE	0x212D
(1284)  {
(1285)    dis_pic(19);
    02127 E103      LDI	R16,0x13
    02128 940E 3F13 CALL	_dis_pic
(1286)    DisPage=SYSTEMPAGE;
    0212A E08A      LDI	R24,0xA
    0212B 9380 0114 STS	DisPage,R24
(1287)  }
    0212D 962C      ADIW	R28,0xC
    0212E 9508      RET
_OptionKeyDown:
    0212F 940E 4508 CALL	push_xgset00FC
    02131 972C      SBIW	R28,0xC
(1288) }
(1289) void OptionKeyDown(void)
(1290) {
(1291)   if(DisPage!=OPTIONPAGE) return;
    02132 9180 0114 LDS	R24,DisPage
    02134 308C      CPI	R24,0xC
    02135 F009      BEQ	0x2137
    02136 C06C      RJMP	0x21A3
(1292)   KeyID=GetKeyID(Option_Key,5); 
    02137 E025      LDI	R18,5
    02138 EE0C      LDI	R16,0xEC
    02139 E013      LDI	R17,3
    0213A 940E 0A56 CALL	_GetKeyID
    0213C 9300 0115 STS	KeyID,R16
(1293)   if(KeyID<4)
    0213E 3004      CPI	R16,4
    0213F F008      BCS	0x2141
    02140 C062      RJMP	0x21A3
(1294)   {
(1295)     Function_Buf[KeyID]=1-Function_Buf[KeyID];
    02141 ED87      LDI	R24,0xD7
    02142 E097      LDI	R25,7
    02143 2E20      MOV	R2,R16
    02144 2433      CLR	R3
    02145 0E28      ADD	R2,R24
    02146 1E39      ADC	R3,R25
    02147 01F1      MOVW	R30,R2
    02148 8020      LD	R2,Z
    02149 E081      LDI	R24,1
    0214A 1982      SUB	R24,R2
    0214B 8380      ST	Z,R24
(1296) 	cut_pic(0,22,Option_Key[KeyID].XS+Function_Buf[KeyID]*400-300,Option_Key[KeyID].YS-80,Option_Key[KeyID].XE+Function_Buf[KeyID]*400-300,Option_Key[KeyID].YE-80,Option_Key[KeyID].XS,Option_Key[KeyID].YS);
    0214C 90A0 0115 LDS	R10,KeyID
    0214E 2CEA      MOV	R14,R10
    0214F 24FF      CLR	R15
    02150 0CEE      LSL	R14
    02151 1CFF      ROL	R15
    02152 0CEE      LSL	R14
    02153 1CFF      ROL	R15
    02154 0CEE      LSL	R14
    02155 1CFF      ROL	R15
    02156 EE8E      LDI	R24,0xEE
    02157 E093      LDI	R25,3
    02158 01F7      MOVW	R30,R14
    02159 0FE8      ADD	R30,R24
    0215A 1FF9      ADC	R31,R25
    0215B 9027      ELPM	R2,Z+
    0215C 9036      ELPM	R3,Z
    0215D 863B      STD	Y+11,R3
    0215E 862A      STD	Y+10,R2
    0215F EE8C      LDI	R24,0xEC
    02160 E093      LDI	R25,3
    02161 01F7      MOVW	R30,R14
    02162 0FE8      ADD	R30,R24
    02163 1FF9      ADC	R31,R25
    02164 90C7      ELPM	R12,Z+
    02165 90D6      ELPM	R13,Z
    02166 86D9      STD	Y+9,R13
    02167 86C8      STD	Y+8,R12
    02168 EF82      LDI	R24,0xF2
    02169 E093      LDI	R25,3
    0216A 01F7      MOVW	R30,R14
    0216B 0FE8      ADD	R30,R24
    0216C 1FF9      ADC	R31,R25
    0216D 9187      ELPM	R24,Z+
    0216E 9196      ELPM	R25,Z
    0216F 5580      SUBI	R24,0x50
    02170 4090      SBCI	R25,0
    02171 839F      STD	Y+7,R25
    02172 838E      STD	Y+6,R24
    02173 ED87      LDI	R24,0xD7
    02174 E097      LDI	R25,7
    02175 2DEA      MOV	R30,R10
    02176 27FF      CLR	R31
    02177 0FE8      ADD	R30,R24
    02178 1FF9      ADC	R31,R25
    02179 8120      LD	R18,Z
    0217A 2733      CLR	R19
    0217B E900      LDI	R16,0x90
    0217C E011      LDI	R17,1
    0217D 940E 44A5 CALL	empy16s
    0217F 0158      MOVW	R10,R16
    02180 EF80      LDI	R24,0xF0
    02181 E093      LDI	R25,3
    02182 01F7      MOVW	R30,R14
    02183 0FE8      ADD	R30,R24
    02184 1FF9      ADC	R31,R25
    02185 9187      ELPM	R24,Z+
    02186 9196      ELPM	R25,Z
    02187 0F80      ADD	R24,R16
    02188 1F91      ADC	R25,R17
    02189 528C      SUBI	R24,0x2C
    0218A 4091      SBCI	R25,1
    0218B 839D      STD	Y+5,R25
    0218C 838C      STD	Y+4,R24
    0218D EE8E      LDI	R24,0xEE
    0218E E093      LDI	R25,3
    0218F 01F7      MOVW	R30,R14
    02190 0FE8      ADD	R30,R24
    02191 1FF9      ADC	R31,R25
    02192 9187      ELPM	R24,Z+
    02193 9196      ELPM	R25,Z
    02194 5580      SUBI	R24,0x50
    02195 4090      SBCI	R25,0
    02196 839B      STD	Y+3,R25
    02197 838A      STD	Y+2,R24
    02198 01C6      MOVW	R24,R12
    02199 0F80      ADD	R24,R16
    0219A 1F91      ADC	R25,R17
    0219B 528C      SUBI	R24,0x2C
    0219C 4091      SBCI	R25,1
    0219D 8399      STD	Y+1,R25
    0219E 8388      ST	Y,R24
    0219F E126      LDI	R18,0x16
    021A0 2700      CLR	R16
    021A1 940E 3F14 CALL	_cut_pic
(1297)   }
    021A3 962C      ADIW	R28,0xC
    021A4 940C 44E9 JMP	pop_xgset00FC
_OptionKeyUp:
  i                    --> R20
    021A6 934A      ST	-Y,R20
(1298) }
(1299) void OptionKeyUp(void)
(1300) {
(1301)   unsigned char i;
(1302)   if(DisPage!=OPTIONPAGE) return;
    021A7 9180 0114 LDS	R24,DisPage
    021A9 308C      CPI	R24,0xC
    021AA F009      BEQ	0x21AC
    021AB C028      RJMP	0x21D4
(1303)   if(KeyID==4)
    021AC 9180 0115 LDS	R24,KeyID
    021AE 3084      CPI	R24,4
    021AF F521      BNE	0x21D4
(1304)   {
(1305)     //EEPROMWriteBytes(FunctionAddr,Function_Buf,9);
(1306) 	Function_Count=0;
    021B0 2422      CLR	R2
    021B1 9220 011A STS	Function_Count,R2
(1307) 	for(i=0;i<4;i++)
    021B3 2744      CLR	R20
    021B4 C017      RJMP	0x21CC
(1308)     {
(1309)      if(Function_Buf[i]==TRUE)
    021B5 ED87      LDI	R24,0xD7
    021B6 E097      LDI	R25,7
    021B7 2FE4      MOV	R30,R20
    021B8 27FF      CLR	R31
    021B9 0FE8      ADD	R30,R24
    021BA 1FF9      ADC	R31,R25
    021BB 8180      LD	R24,Z
    021BC 3081      CPI	R24,1
    021BD F469      BNE	0x21CB
(1310)      {
(1311)        Function_Tab[Function_Count]=i;
    021BE EE80      LDI	R24,0xE0
    021BF E097      LDI	R25,7
    021C0 91E0 011A LDS	R30,Function_Count
    021C2 27FF      CLR	R31
    021C3 0FE8      ADD	R30,R24
    021C4 1FF9      ADC	R31,R25
    021C5 8340      ST	Z,R20
(1312) 	   Function_Count++;
    021C6 9180 011A LDS	R24,Function_Count
    021C8 5F8F      SUBI	R24,0xFF
    021C9 9380 011A STS	Function_Count,R24
    021CB 9543      INC	R20
    021CC 3044      CPI	R20,4
    021CD F338      BCS	0x21B5
(1313)      }
(1314)     }
(1315) 	dis_pic(19);
    021CE E103      LDI	R16,0x13
    021CF 940E 3F13 CALL	_dis_pic
(1316) 	DisPage=SYSTEMPAGE;
    021D1 E08A      LDI	R24,0xA
    021D2 9380 0114 STS	DisPage,R24
(1317)   }
    021D4 9149      LD	R20,Y+
    021D5 9508      RET
_CardSetKeyDown:
    021D6 972C      SBIW	R28,0xC
(1318) }
(1319) void CardSetKeyDown(void)
(1320) {
(1321)   if(DisPage!=ICCARDPAGE) return;
    021D7 9180 0114 LDS	R24,DisPage
    021D9 3181      CPI	R24,0x11
    021DA F009      BEQ	0x21DC
    021DB C02E      RJMP	0x220A
(1322)   KeyID=GetKeyID(CardSet_Key,3); 
    021DC E023      LDI	R18,3
    021DD EC04      LDI	R16,0xC4
    021DE E014      LDI	R17,4
    021DF 940E 0A56 CALL	_GetKeyID
    021E1 9300 0115 STS	KeyID,R16
(1323)   if(KeyID<2)
    021E3 2F80      MOV	R24,R16
    021E4 3002      CPI	R16,2
    021E5 F520      BCC	0x220A
(1324)   {
(1325)     CardSet=KeyID;
    021E6 2E28      MOV	R2,R24
    021E7 9220 0393 STS	CardSet,R2
(1326) 	cut_pic(0,18,CardSet*271,422,269+CardSet*271,512,300,250);
    021E9 EF8A      LDI	R24,0xFA
    021EA E090      LDI	R25,0
    021EB 879B      STD	Y+11,R25
    021EC 878A      STD	Y+10,R24
    021ED E28C      LDI	R24,0x2C
    021EE E091      LDI	R25,1
    021EF 8799      STD	Y+9,R25
    021F0 8788      STD	Y+8,R24
    021F1 E080      LDI	R24,0
    021F2 E092      LDI	R25,2
    021F3 839F      STD	Y+7,R25
    021F4 838E      STD	Y+6,R24
    021F5 2D22      MOV	R18,R2
    021F6 2733      CLR	R19
    021F7 E00F      LDI	R16,0xF
    021F8 E011      LDI	R17,1
    021F9 940E 44A5 CALL	empy16s
    021FB 01C8      MOVW	R24,R16
    021FC 5F83      SUBI	R24,0xF3
    021FD 4F9E      SBCI	R25,0xFE
    021FE 839D      STD	Y+5,R25
    021FF 838C      STD	Y+4,R24
    02200 EA86      LDI	R24,0xA6
    02201 E091      LDI	R25,1
    02202 839B      STD	Y+3,R25
    02203 838A      STD	Y+2,R24
    02204 8319      STD	Y+1,R17
    02205 8308      ST	Y,R16
    02206 E122      LDI	R18,0x12
    02207 2700      CLR	R16
    02208 940E 3F14 CALL	_cut_pic
(1327)   }
    0220A 962C      ADIW	R28,0xC
    0220B 9508      RET
(1328) }
(1329) void CardSetKeyUp(void)
(1330) {
(1331)   if(DisPage!=ICCARDPAGE) return;
_CardSetKeyUp:
    0220C 9180 0114 LDS	R24,DisPage
    0220E 3181      CPI	R24,0x11
    0220F F009      BEQ	0x2211
    02210 C00A      RJMP	0x221B
(1332)   if(KeyID==2)
    02211 9180 0115 LDS	R24,KeyID
    02213 3082      CPI	R24,2
    02214 F431      BNE	0x221B
(1333)   {
(1334)     //EEPROMWriteBytes(CardSetAddr,&CardSet,1);
(1335)     dis_pic(19);
    02215 E103      LDI	R16,0x13
    02216 940E 3F13 CALL	_dis_pic
(1336)     DisPage=SYSTEMPAGE;
    02218 E08A      LDI	R24,0xA
    02219 9380 0114 STS	DisPage,R24
(1337)   }
    0221B 9508      RET
_PassSetKeyDown:
    0221C 940E 450F CALL	push_xgset300C
    0221E 972C      SBIW	R28,0xC
(1338) }
(1339) void PassSetKeyDown(void)
(1340) {
(1341)   if(DisPage!=PASSSETPAGE) return;
    0221F 9180 0114 LDS	R24,DisPage
    02221 3183      CPI	R24,0x13
    02222 F009      BEQ	0x2224
    02223 C260      RJMP	0x2484
(1342)   KeyID=GetKeyID(Time_Key,13); 
    02224 E02D      LDI	R18,0xD
    02225 EC0C      LDI	R16,0xCC
    02226 E011      LDI	R17,1
    02227 940E 0A56 CALL	_GetKeyID
    02229 9300 0115 STS	KeyID,R16
(1343)   if((KeyID<10)&&(text_ptr<6))
    0222B 300A      CPI	R16,0xA
    0222C F008      BCS	0x222E
    0222D C075      RJMP	0x22A3
    0222E 9180 03AB LDS	R24,text_ptr
    02230 3086      CPI	R24,6
    02231 F008      BCS	0x2233
    02232 C070      RJMP	0x22A3
(1344)   {
(1345)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    02233 2E20      MOV	R2,R16
    02234 2433      CLR	R3
    02235 0C22      LSL	R2
    02236 1C33      ROL	R3
    02237 0C22      LSL	R2
    02238 1C33      ROL	R3
    02239 0C22      LSL	R2
    0223A 1C33      ROL	R3
    0223B 0121      MOVW	R4,R2
    0223C EC8E      LDI	R24,0xCE
    0223D E091      LDI	R25,1
    0223E 01F1      MOVW	R30,R2
    0223F 0FE8      ADD	R30,R24
    02240 1FF9      ADC	R31,R25
    02241 9027      ELPM	R2,Z+
    02242 9036      ELPM	R3,Z
    02243 863B      STD	Y+11,R3
    02244 862A      STD	Y+10,R2
    02245 EC8C      LDI	R24,0xCC
    02246 E091      LDI	R25,1
    02247 01F2      MOVW	R30,R4
    02248 0FE8      ADD	R30,R24
    02249 1FF9      ADC	R31,R25
    0224A 9147      ELPM	R20,Z+
    0224B 9156      ELPM	R21,Z
    0224C 8759      STD	Y+9,R21
    0224D 8748      STD	Y+8,R20
    0224E ED82      LDI	R24,0xD2
    0224F E091      LDI	R25,1
    02250 01F2      MOVW	R30,R4
    02251 0FE8      ADD	R30,R24
    02252 1FF9      ADC	R31,R25
    02253 9187      ELPM	R24,Z+
    02254 9196      ELPM	R25,Z
    02255 5684      SUBI	R24,0x64
    02256 4090      SBCI	R25,0
    02257 839F      STD	Y+7,R25
    02258 838E      STD	Y+6,R24
    02259 ED80      LDI	R24,0xD0
    0225A E091      LDI	R25,1
    0225B 01F2      MOVW	R30,R4
    0225C 0FE8      ADD	R30,R24
    0225D 1FF9      ADC	R31,R25
    0225E 9187      ELPM	R24,Z+
    0225F 9196      ELPM	R25,Z
    02260 974D      SBIW	R24,0x1D
    02261 839D      STD	Y+5,R25
    02262 838C      STD	Y+4,R24
    02263 EC8E      LDI	R24,0xCE
    02264 E091      LDI	R25,1
    02265 01F2      MOVW	R30,R4
    02266 0FE8      ADD	R30,R24
    02267 1FF9      ADC	R31,R25
    02268 9187      ELPM	R24,Z+
    02269 9196      ELPM	R25,Z
    0226A 5684      SUBI	R24,0x64
    0226B 4090      SBCI	R25,0
    0226C 839B      STD	Y+3,R25
    0226D 838A      STD	Y+2,R24
    0226E 01CA      MOVW	R24,R20
    0226F 974D      SBIW	R24,0x1D
    02270 8399      STD	Y+1,R25
    02271 8388      ST	Y,R24
    02272 E12B      LDI	R18,0x1B
    02273 2700      CLR	R16
    02274 940E 3F14 CALL	_cut_pic
(1346) 	print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,&Text[7]);
    02276 E085      LDI	R24,5
    02277 E094      LDI	R25,4
    02278 879B      STD	Y+11,R25
    02279 878A      STD	Y+10,R24
    0227A EF8F      LDI	R24,0xFF
    0227B EF9F      LDI	R25,0xFF
    0227C 8799      STD	Y+9,R25
    0227D 8788      STD	Y+8,R24
    0227E EB8B      LDI	R24,0xBB
    0227F E094      LDI	R25,4
    02280 839F      STD	Y+7,R25
    02281 838E      STD	Y+6,R24
    02282 E082      LDI	R24,2
    02283 838C      STD	Y+4,R24
    02284 ED81      LDI	R24,0xD1
    02285 838A      STD	Y+2,R24
    02286 2422      CLR	R2
    02287 8228      ST	Y,R2
    02288 E926      LDI	R18,0x96
    02289 E030      LDI	R19,0
    0228A 9110 03AB LDS	R17,text_ptr
    0228C E00C      LDI	R16,0xC
    0228D 0301      MULSU	R16,R17
    0228E 0180      MOVW	R16,R0
    0228F 5B01      SUBI	R16,0xB1
    02290 4F1E      SBCI	R17,0xFE
    02291 940E 3F08 CALL	_print_texts
(1347)     Text[text_ptr]=KeyID;
    02293 EF8E      LDI	R24,0xFE
    02294 E093      LDI	R25,3
    02295 91E0 03AB LDS	R30,text_ptr
    02297 27FF      CLR	R31
    02298 0FE8      ADD	R30,R24
    02299 1FF9      ADC	R31,R25
    0229A 9020 0115 LDS	R2,KeyID
    0229C 8220      ST	Z,R2
(1348) 	text_ptr++;
    0229D 9180 03AB LDS	R24,text_ptr
    0229F 5F8F      SUBI	R24,0xFF
    022A0 9380 03AB STS	text_ptr,R24
(1349)   }
    022A2 C1E1      RJMP	0x2484
(1350)   else if((KeyID==10)&&(text_ptr>0))
    022A3 9180 0115 LDS	R24,KeyID
    022A5 308A      CPI	R24,0xA
    022A6 F009      BEQ	0x22A8
    022A7 C074      RJMP	0x231C
    022A8 E080      LDI	R24,0
    022A9 9020 03AB LDS	R2,text_ptr
    022AB 1582      CP	R24,R2
    022AC F008      BCS	0x22AE
    022AD C06E      RJMP	0x231C
(1351)   {
(1352)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    022AE 90A0 0115 LDS	R10,KeyID
    022B0 24BB      CLR	R11
    022B1 0CAA      LSL	R10
    022B2 1CBB      ROL	R11
    022B3 0CAA      LSL	R10
    022B4 1CBB      ROL	R11
    022B5 0CAA      LSL	R10
    022B6 1CBB      ROL	R11
    022B7 EC8E      LDI	R24,0xCE
    022B8 E091      LDI	R25,1
    022B9 01F5      MOVW	R30,R10
    022BA 0FE8      ADD	R30,R24
    022BB 1FF9      ADC	R31,R25
    022BC 9027      ELPM	R2,Z+
    022BD 9036      ELPM	R3,Z
    022BE 863B      STD	Y+11,R3
    022BF 862A      STD	Y+10,R2
    022C0 EC8C      LDI	R24,0xCC
    022C1 E091      LDI	R25,1
    022C2 01F5      MOVW	R30,R10
    022C3 0FE8      ADD	R30,R24
    022C4 1FF9      ADC	R31,R25
    022C5 9147      ELPM	R20,Z+
    022C6 9156      ELPM	R21,Z
    022C7 8759      STD	Y+9,R21
    022C8 8748      STD	Y+8,R20
    022C9 ED82      LDI	R24,0xD2
    022CA E091      LDI	R25,1
    022CB 01F5      MOVW	R30,R10
    022CC 0FE8      ADD	R30,R24
    022CD 1FF9      ADC	R31,R25
    022CE 9187      ELPM	R24,Z+
    022CF 9196      ELPM	R25,Z
    022D0 5684      SUBI	R24,0x64
    022D1 4090      SBCI	R25,0
    022D2 839F      STD	Y+7,R25
    022D3 838E      STD	Y+6,R24
    022D4 ED80      LDI	R24,0xD0
    022D5 E091      LDI	R25,1
    022D6 01F5      MOVW	R30,R10
    022D7 0FE8      ADD	R30,R24
    022D8 1FF9      ADC	R31,R25
    022D9 9187      ELPM	R24,Z+
    022DA 9196      ELPM	R25,Z
    022DB 974D      SBIW	R24,0x1D
    022DC 839D      STD	Y+5,R25
    022DD 838C      STD	Y+4,R24
    022DE EC8E      LDI	R24,0xCE
    022DF E091      LDI	R25,1
    022E0 01F5      MOVW	R30,R10
    022E1 0FE8      ADD	R30,R24
    022E2 1FF9      ADC	R31,R25
    022E3 9187      ELPM	R24,Z+
    022E4 9196      ELPM	R25,Z
    022E5 5684      SUBI	R24,0x64
    022E6 4090      SBCI	R25,0
    022E7 839B      STD	Y+3,R25
    022E8 838A      STD	Y+2,R24
    022E9 01CA      MOVW	R24,R20
    022EA 974D      SBIW	R24,0x1D
    022EB 8399      STD	Y+1,R25
    022EC 8388      ST	Y,R24
    022ED E12B      LDI	R18,0x1B
    022EE 2700      CLR	R16
    022EF 940E 3F14 CALL	_cut_pic
(1353)     text_ptr--;
    022F1 9180 03AB LDS	R24,text_ptr
    022F3 5081      SUBI	R24,1
    022F4 9380 03AB STS	text_ptr,R24
(1354) 	Text[text_ptr]=0;
    022F6 EF8E      LDI	R24,0xFE
    022F7 E093      LDI	R25,3
    022F8 91E0 03AB LDS	R30,text_ptr
    022FA 27FF      CLR	R31
    022FB 0FE8      ADD	R30,R24
    022FC 1FF9      ADC	R31,R25
    022FD 2422      CLR	R2
    022FE 8220      ST	Z,R2
(1355) 	print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,&Text[9]);
    022FF E087      LDI	R24,7
    02300 E094      LDI	R25,4
    02301 879B      STD	Y+11,R25
    02302 878A      STD	Y+10,R24
    02303 EF8F      LDI	R24,0xFF
    02304 EF9F      LDI	R25,0xFF
    02305 8799      STD	Y+9,R25
    02306 8788      STD	Y+8,R24
    02307 EB8B      LDI	R24,0xBB
    02308 E094      LDI	R25,4
    02309 839F      STD	Y+7,R25
    0230A 838E      STD	Y+6,R24
    0230B E082      LDI	R24,2
    0230C 838C      STD	Y+4,R24
    0230D ED81      LDI	R24,0xD1
    0230E 838A      STD	Y+2,R24
    0230F 8228      ST	Y,R2
    02310 E926      LDI	R18,0x96
    02311 E030      LDI	R19,0
    02312 9110 03AB LDS	R17,text_ptr
    02314 E00C      LDI	R16,0xC
    02315 0301      MULSU	R16,R17
    02316 0180      MOVW	R16,R0
    02317 5B01      SUBI	R16,0xB1
    02318 4F1E      SBCI	R17,0xFE
    02319 940E 3F08 CALL	_print_texts
(1356)   }
    0231B C168      RJMP	0x2484
(1357)   else if((KeyID==11)&&(text_ptr==6))
    0231C 9180 0115 LDS	R24,KeyID
    0231E 308B      CPI	R24,0xB
    0231F F009      BEQ	0x2321
    02320 C11C      RJMP	0x243D
    02321 9180 03AB LDS	R24,text_ptr
    02323 3086      CPI	R24,6
    02324 F009      BEQ	0x2326
    02325 C117      RJMP	0x243D
(1358)   {
(1359)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS);
    02326 90A0 0115 LDS	R10,KeyID
    02328 24BB      CLR	R11
    02329 0CAA      LSL	R10
    0232A 1CBB      ROL	R11
    0232B 0CAA      LSL	R10
    0232C 1CBB      ROL	R11
    0232D 0CAA      LSL	R10
    0232E 1CBB      ROL	R11
    0232F EC8E      LDI	R24,0xCE
    02330 E091      LDI	R25,1
    02331 01F5      MOVW	R30,R10
    02332 0FE8      ADD	R30,R24
    02333 1FF9      ADC	R31,R25
    02334 9027      ELPM	R2,Z+
    02335 9036      ELPM	R3,Z
    02336 863B      STD	Y+11,R3
    02337 862A      STD	Y+10,R2
    02338 EC8C      LDI	R24,0xCC
    02339 E091      LDI	R25,1
    0233A 01F5      MOVW	R30,R10
    0233B 0FE8      ADD	R30,R24
    0233C 1FF9      ADC	R31,R25
    0233D 9147      ELPM	R20,Z+
    0233E 9156      ELPM	R21,Z
    0233F 8759      STD	Y+9,R21
    02340 8748      STD	Y+8,R20
    02341 ED82      LDI	R24,0xD2
    02342 E091      LDI	R25,1
    02343 01F5      MOVW	R30,R10
    02344 0FE8      ADD	R30,R24
    02345 1FF9      ADC	R31,R25
    02346 9187      ELPM	R24,Z+
    02347 9196      ELPM	R25,Z
    02348 5684      SUBI	R24,0x64
    02349 4090      SBCI	R25,0
    0234A 839F      STD	Y+7,R25
    0234B 838E      STD	Y+6,R24
    0234C ED80      LDI	R24,0xD0
    0234D E091      LDI	R25,1
    0234E 01F5      MOVW	R30,R10
    0234F 0FE8      ADD	R30,R24
    02350 1FF9      ADC	R31,R25
    02351 9187      ELPM	R24,Z+
    02352 9196      ELPM	R25,Z
    02353 974D      SBIW	R24,0x1D
    02354 839D      STD	Y+5,R25
    02355 838C      STD	Y+4,R24
    02356 EC8E      LDI	R24,0xCE
    02357 E091      LDI	R25,1
    02358 01F5      MOVW	R30,R10
    02359 0FE8      ADD	R30,R24
    0235A 1FF9      ADC	R31,R25
    0235B 9187      ELPM	R24,Z+
    0235C 9196      ELPM	R25,Z
    0235D 5684      SUBI	R24,0x64
    0235E 4090      SBCI	R25,0
    0235F 839B      STD	Y+3,R25
    02360 838A      STD	Y+2,R24
    02361 01CA      MOVW	R24,R20
    02362 974D      SBIW	R24,0x1D
    02363 8399      STD	Y+1,R25
    02364 8388      ST	Y,R24
    02365 E12B      LDI	R18,0x1B
    02366 2700      CLR	R16
    02367 940E 3F14 CALL	_cut_pic
(1360) 	if(Text[11]==0)
    02369 9020 0409 LDS	R2,Text+11
    0236B 2022      TST	R2
    0236C F009      BEQ	0x236E
    0236D C047      RJMP	0x23B5
(1361) 	{
(1362) 	  PasswordTab[0]=Text[0];
    0236E 9020 03FE LDS	R2,Text
    02370 9220 07E9 STS	PasswordTab,R2
(1363) 	  PasswordTab[1]=Text[1];
    02372 9020 03FF LDS	R2,Text+1
    02374 9220 07EA STS	PasswordTab+1,R2
(1364) 	  PasswordTab[2]=Text[2];
    02376 9020 0400 LDS	R2,Text+2
    02378 9220 07EB STS	PasswordTab+2,R2
(1365) 	  PasswordTab[3]=Text[3];
    0237A 9020 0401 LDS	R2,Text+3
    0237C 9220 07EC STS	PasswordTab+3,R2
(1366) 	  PasswordTab[4]=Text[4];
    0237E 9020 0402 LDS	R2,Text+4
    02380 9220 07ED STS	PasswordTab+4,R2
(1367) 	  PasswordTab[5]=Text[5];
    02382 9020 0403 LDS	R2,Text+5
    02384 9220 07EE STS	PasswordTab+5,R2
(1368) 	  text_ptr=0;
    02386 2422      CLR	R2
    02387 9220 03AB STS	text_ptr,R2
(1369) 	  Text[0]=' ';
    02389 E280      LDI	R24,0x20
    0238A 9380 03FE STS	Text,R24
(1370) 	  Text[1]=' ';
    0238C 9380 03FF STS	Text+1,R24
(1371) 	  Text[2]=' ';
    0238E 9380 0400 STS	Text+2,R24
(1372) 	  Text[3]=' ';
    02390 9380 0401 STS	Text+3,R24
(1373) 	  Text[4]=' ';
    02392 9380 0402 STS	Text+4,R24
(1374) 	  Text[5]=' ';
    02394 9380 0403 STS	Text+5,R24
(1375) 	  Text[11]=1;
    02396 E081      LDI	R24,1
    02397 9380 0409 STS	Text+11,R24
(1376) 	  print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,Text);
    02399 EF8E      LDI	R24,0xFE
    0239A E093      LDI	R25,3
    0239B 879B      STD	Y+11,R25
    0239C 878A      STD	Y+10,R24
    0239D EF8F      LDI	R24,0xFF
    0239E EF9F      LDI	R25,0xFF
    0239F 8799      STD	Y+9,R25
    023A0 8788      STD	Y+8,R24
    023A1 EB8B      LDI	R24,0xBB
    023A2 E094      LDI	R25,4
    023A3 839F      STD	Y+7,R25
    023A4 838E      STD	Y+6,R24
    023A5 E082      LDI	R24,2
    023A6 838C      STD	Y+4,R24
    023A7 ED81      LDI	R24,0xD1
    023A8 838A      STD	Y+2,R24
    023A9 8228      ST	Y,R2
    023AA E926      LDI	R18,0x96
    023AB E030      LDI	R19,0
    023AC 2D12      MOV	R17,R2
    023AD E00C      LDI	R16,0xC
    023AE 0301      MULSU	R16,R17
    023AF 0180      MOVW	R16,R0
    023B0 5B01      SUBI	R16,0xB1
    023B1 4F1E      SBCI	R17,0xFE
    023B2 940E 3F08 CALL	_print_texts
(1377) 	}
    023B4 C0CF      RJMP	0x2484
(1378) 	else
(1379) 	{
(1380) 	  if((Text[0]==PasswordTab[0])&&(Text[1]==PasswordTab[1])&&(Text[2]==PasswordTab[2])&&(Text[3]==PasswordTab[3])&&(Text[4]==PasswordTab[4])&&(Text[5]==PasswordTab[5]))
    023B5 9020 07E9 LDS	R2,PasswordTab
    023B7 9030 03FE LDS	R3,Text
    023B9 1432      CP	R3,R2
    023BA F009      BEQ	0x23BC
    023BB C04E      RJMP	0x240A
    023BC 9020 07EA LDS	R2,PasswordTab+1
    023BE 9030 03FF LDS	R3,Text+1
    023C0 1432      CP	R3,R2
    023C1 F009      BEQ	0x23C3
    023C2 C047      RJMP	0x240A
    023C3 9020 07EB LDS	R2,PasswordTab+2
    023C5 9030 0400 LDS	R3,Text+2
    023C7 1432      CP	R3,R2
    023C8 F009      BEQ	0x23CA
    023C9 C040      RJMP	0x240A
    023CA 9020 07EC LDS	R2,PasswordTab+3
    023CC 9030 0401 LDS	R3,Text+3
    023CE 1432      CP	R3,R2
    023CF F5D1      BNE	0x240A
    023D0 9020 07ED LDS	R2,PasswordTab+4
    023D2 9030 0402 LDS	R3,Text+4
    023D4 1432      CP	R3,R2
    023D5 F5A1      BNE	0x240A
    023D6 9020 07EE LDS	R2,PasswordTab+5
    023D8 9030 0403 LDS	R3,Text+5
    023DA 1432      CP	R3,R2
    023DB F571      BNE	0x240A
(1381) 	  {
(1382) 	    //EEPROMWriteBytes(PasswordAddr,&PasswordTab,6);
(1383) 		  text_ptr=0;
    023DC 2422      CLR	R2
    023DD 9220 03AB STS	text_ptr,R2
(1384) 	    Text[0]='O';
    023DF E48F      LDI	R24,0x4F
    023E0 9380 03FE STS	Text,R24
(1385) 	    Text[1]='K';
    023E2 E48B      LDI	R24,0x4B
    023E3 9380 03FF STS	Text+1,R24
(1386) 	    Text[2]='.';
    023E5 E28E      LDI	R24,0x2E
    023E6 9380 0400 STS	Text+2,R24
(1387) 	    Text[3]='.';
    023E8 9380 0401 STS	Text+3,R24
(1388) 	    Text[4]='.';
    023EA 9380 0402 STS	Text+4,R24
(1389) 	    Text[5]='.';   
    023EC 9380 0403 STS	Text+5,R24
(1390) 	    print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,Text);
    023EE EF8E      LDI	R24,0xFE
    023EF E093      LDI	R25,3
    023F0 879B      STD	Y+11,R25
    023F1 878A      STD	Y+10,R24
    023F2 EF8F      LDI	R24,0xFF
    023F3 EF9F      LDI	R25,0xFF
    023F4 8799      STD	Y+9,R25
    023F5 8788      STD	Y+8,R24
    023F6 EB8B      LDI	R24,0xBB
    023F7 E094      LDI	R25,4
    023F8 839F      STD	Y+7,R25
    023F9 838E      STD	Y+6,R24
    023FA E082      LDI	R24,2
    023FB 838C      STD	Y+4,R24
    023FC ED81      LDI	R24,0xD1
    023FD 838A      STD	Y+2,R24
    023FE 8228      ST	Y,R2
    023FF E926      LDI	R18,0x96
    02400 E030      LDI	R19,0
    02401 2D12      MOV	R17,R2
    02402 E00C      LDI	R16,0xC
    02403 0301      MULSU	R16,R17
    02404 0180      MOVW	R16,R0
    02405 5B01      SUBI	R16,0xB1
    02406 4F1E      SBCI	R17,0xFE
    02407 940E 3F08 CALL	_print_texts
(1391) 	  }
    02409 C02F      RJMP	0x2439
(1392) 	  else
(1393) 	  {
(1394) 	    //EEPROMReadBytes(PasswordAddr,&PasswordTab,6);
(1395) 		text_ptr=0;
    0240A 2422      CLR	R2
    0240B 9220 03AB STS	text_ptr,R2
(1396) 	    Text[0]='E';
    0240D E485      LDI	R24,0x45
    0240E 9380 03FE STS	Text,R24
(1397) 	    Text[1]='r';
    02410 E782      LDI	R24,0x72
    02411 9380 03FF STS	Text+1,R24
(1398) 	    Text[2]='r';
    02413 9380 0400 STS	Text+2,R24
(1399) 	    Text[3]='o';
    02415 E68F      LDI	R24,0x6F
    02416 9380 0401 STS	Text+3,R24
(1400) 	    Text[4]='r';
    02418 E782      LDI	R24,0x72
    02419 9380 0402 STS	Text+4,R24
(1401) 	    Text[5]='!';
    0241B E281      LDI	R24,0x21
    0241C 9380 0403 STS	Text+5,R24
(1402) 	    print_texts(335+text_ptr*12,150,0,0xD1,2,0x04bb,0xffff,Text);
    0241E EF8E      LDI	R24,0xFE
    0241F E093      LDI	R25,3
    02420 879B      STD	Y+11,R25
    02421 878A      STD	Y+10,R24
    02422 EF8F      LDI	R24,0xFF
    02423 EF9F      LDI	R25,0xFF
    02424 8799      STD	Y+9,R25
    02425 8788      STD	Y+8,R24
    02426 EB8B      LDI	R24,0xBB
    02427 E094      LDI	R25,4
    02428 839F      STD	Y+7,R25
    02429 838E      STD	Y+6,R24
    0242A E082      LDI	R24,2
    0242B 838C      STD	Y+4,R24
    0242C ED81      LDI	R24,0xD1
    0242D 838A      STD	Y+2,R24
    0242E 8228      ST	Y,R2
    0242F E926      LDI	R18,0x96
    02430 E030      LDI	R19,0
    02431 2D12      MOV	R17,R2
    02432 E00C      LDI	R16,0xC
    02433 0301      MULSU	R16,R17
    02434 0180      MOVW	R16,R0
    02435 5B01      SUBI	R16,0xB1
    02436 4F1E      SBCI	R17,0xFE
    02437 940E 3F08 CALL	_print_texts
(1403) 	  }
(1404) 	  Text[11]=2;
    02439 E082      LDI	R24,2
    0243A 9380 0409 STS	Text+11,R24
(1405) 	}
(1406)   }
    0243C C047      RJMP	0x2484
(1407)   else if(KeyID==12)
    0243D 9180 0115 LDS	R24,KeyID
    0243F 308C      CPI	R24,0xC
    02440 F009      BEQ	0x2442
    02441 C042      RJMP	0x2484
(1408)   {
(1409)     cut_pic(0,27,Time_Key[KeyID].XS-29,Time_Key[KeyID].YS-100,Time_Key[KeyID].XE-29,Time_Key[KeyID].YE-100,Time_Key[KeyID].XS,Time_Key[KeyID].YS); 
    02442 2EA8      MOV	R10,R24
    02443 24BB      CLR	R11
    02444 0CAA      LSL	R10
    02445 1CBB      ROL	R11
    02446 0CAA      LSL	R10
    02447 1CBB      ROL	R11
    02448 0CAA      LSL	R10
    02449 1CBB      ROL	R11
    0244A EC8E      LDI	R24,0xCE
    0244B E091      LDI	R25,1
    0244C 01F5      MOVW	R30,R10
    0244D 0FE8      ADD	R30,R24
    0244E 1FF9      ADC	R31,R25
    0244F 9027      ELPM	R2,Z+
    02450 9036      ELPM	R3,Z
    02451 863B      STD	Y+11,R3
    02452 862A      STD	Y+10,R2
    02453 EC8C      LDI	R24,0xCC
    02454 E091      LDI	R25,1
    02455 01F5      MOVW	R30,R10
    02456 0FE8      ADD	R30,R24
    02457 1FF9      ADC	R31,R25
    02458 9147      ELPM	R20,Z+
    02459 9156      ELPM	R21,Z
    0245A 8759      STD	Y+9,R21
    0245B 8748      STD	Y+8,R20
    0245C ED82      LDI	R24,0xD2
    0245D E091      LDI	R25,1
    0245E 01F5      MOVW	R30,R10
    0245F 0FE8      ADD	R30,R24
    02460 1FF9      ADC	R31,R25
    02461 9187      ELPM	R24,Z+
    02462 9196      ELPM	R25,Z
    02463 5684      SUBI	R24,0x64
    02464 4090      SBCI	R25,0
    02465 839F      STD	Y+7,R25
    02466 838E      STD	Y+6,R24
    02467 ED80      LDI	R24,0xD0
    02468 E091      LDI	R25,1
    02469 01F5      MOVW	R30,R10
    0246A 0FE8      ADD	R30,R24
    0246B 1FF9      ADC	R31,R25
    0246C 9187      ELPM	R24,Z+
    0246D 9196      ELPM	R25,Z
    0246E 974D      SBIW	R24,0x1D
    0246F 839D      STD	Y+5,R25
    02470 838C      STD	Y+4,R24
    02471 EC8E      LDI	R24,0xCE
    02472 E091      LDI	R25,1
    02473 01F5      MOVW	R30,R10
    02474 0FE8      ADD	R30,R24
    02475 1FF9      ADC	R31,R25
    02476 9187      ELPM	R24,Z+
    02477 9196      ELPM	R25,Z
    02478 5684      SUBI	R24,0x64
    02479 4090      SBCI	R25,0
    0247A 839B      STD	Y+3,R25
    0247B 838A      STD	Y+2,R24
    0247C 01CA      MOVW	R24,R20
    0247D 974D      SBIW	R24,0x1D
    0247E 8399      STD	Y+1,R25
    0247F 8388      ST	Y,R24
    02480 E12B      LDI	R18,0x1B
    02481 2700      CLR	R16
    02482 940E 3F14 CALL	_cut_pic
(1410)   }
    02484 962C      ADIW	R28,0xC
    02485 940C 4514 JMP	pop_xgset300C
_PassSetKeyUp:
    02487 972C      SBIW	R28,0xC
(1411) } 
(1412) void PassSetKeyUp(void)
(1413) {
(1414)   if(DisPage!=PASSSETPAGE) return;
    02488 9180 0114 LDS	R24,DisPage
    0248A 3183      CPI	R24,0x13
    0248B F009      BEQ	0x248D
    0248C C037      RJMP	0x24C4
(1415)   if(KeyID<12)
    0248D 9180 0115 LDS	R24,KeyID
    0248F 308C      CPI	R24,0xC
    02490 F4D0      BCC	0x24AB
(1416)   {
(1417)     cut_pic(0,27,0,90,269,325,300,190);
    02491 EB8E      LDI	R24,0xBE
    02492 E090      LDI	R25,0
    02493 879B      STD	Y+11,R25
    02494 878A      STD	Y+10,R24
    02495 E28C      LDI	R24,0x2C
    02496 E091      LDI	R25,1
    02497 8799      STD	Y+9,R25
    02498 8788      STD	Y+8,R24
    02499 E485      LDI	R24,0x45
    0249A 839F      STD	Y+7,R25
    0249B 838E      STD	Y+6,R24
    0249C E08D      LDI	R24,0xD
    0249D 839D      STD	Y+5,R25
    0249E 838C      STD	Y+4,R24
    0249F E58A      LDI	R24,0x5A
    024A0 E090      LDI	R25,0
    024A1 839B      STD	Y+3,R25
    024A2 838A      STD	Y+2,R24
    024A3 2422      CLR	R2
    024A4 2433      CLR	R3
    024A5 8239      STD	Y+1,R3
    024A6 8228      ST	Y,R2
    024A7 E12B      LDI	R18,0x1B
    024A8 2700      CLR	R16
    024A9 940E 3F14 CALL	_cut_pic
(1418)   }
(1419)   if((KeyID==11)&&(Text[11]==2))
    024AB 9180 0115 LDS	R24,KeyID
    024AD 308B      CPI	R24,0xB
    024AE F459      BNE	0x24BA
    024AF 9180 0409 LDS	R24,Text+11
    024B1 3082      CPI	R24,2
    024B2 F439      BNE	0x24BA
(1420)   {
(1421)     dis_pic(19);
    024B3 E103      LDI	R16,0x13
    024B4 940E 3F13 CALL	_dis_pic
(1422) 	DisPage=SYSTEMPAGE;
    024B6 E08A      LDI	R24,0xA
    024B7 9380 0114 STS	DisPage,R24
(1423)   }
    024B9 C00A      RJMP	0x24C4
(1424)   else if(KeyID==12)
    024BA 9180 0115 LDS	R24,KeyID
    024BC 308C      CPI	R24,0xC
    024BD F431      BNE	0x24C4
(1425)   {
(1426)     dis_pic(19);
    024BE E103      LDI	R16,0x13
    024BF 940E 3F13 CALL	_dis_pic
(1427) 	DisPage=SYSTEMPAGE;
    024C1 E08A      LDI	R24,0xA
    024C2 9380 0114 STS	DisPage,R24
(1428)   } 
    024C4 962C      ADIW	R28,0xC
    024C5 9508      RET
_HandpieceKey:
  buff                 --> Y,+1
    024C6 9761      SBIW	R28,0x11
(1429) } 
(1430) void HandpieceKey(void)//2号手柄键值处理 H
(1431) {
(1432)   unsigned char buff[16];
(1433)   static unsigned ID=255;
(1434)   static unsigned count=0;
(1435)  // if(DisPage!=WORKPAGE) return;
(1436)   if (MACHINE_STATE.HANDLE_ID==1) return;
    024C7 9180 089B LDS	R24,MACHINE_STATE
    024C9 3081      CPI	R24,1
    024CA F409      BNE	0x24CC
    024CB C196      RJMP	0x2662
(1437)   if (MACHINE_STATE.HANDLE_ID==0) return;
    024CC 9020 089B LDS	R2,MACHINE_STATE
    024CE 2022      TST	R2
    024CF F409      BNE	0x24D1
    024D0 C191      RJMP	0x2662
(1438)   if (MACHINE_STATE.HANDLE_ID>4)  return;
    024D1 E084      LDI	R24,4
    024D2 9020 089B LDS	R2,MACHINE_STATE
    024D4 1582      CP	R24,R2
    024D5 F408      BCC	0x24D7
    024D6 C18B      RJMP	0x2662
(1439)   
(1440)   if(Hand_Event==KEY_NULL)
    024D7 9020 0112 LDS	R2,Hand_Event
    024D9 2022      TST	R2
    024DA F009      BEQ	0x24DC
    024DB C05F      RJMP	0x253B
(1441)   {
(1442)     if((PIND&0x10)==0) HandID=1;
    024DC 9984      SBIC	0x10,4
    024DD C004      RJMP	0x24E2
    024DE E081      LDI	R24,1
    024DF 9380 0111 STS	HandID,R24
    024E1 C01D      RJMP	0x24FF
(1443)     else if((PIND&0x20)==0)  HandID=3;
    024E2 9985      SBIC	0x10,5
    024E3 C004      RJMP	0x24E8
    024E4 E083      LDI	R24,3
    024E5 9380 0111 STS	HandID,R24
    024E7 C017      RJMP	0x24FF
(1444)     else if((PIND&0x40)==0)  HandID=4;
    024E8 9986      SBIC	0x10,6
    024E9 C004      RJMP	0x24EE
    024EA E084      LDI	R24,4
    024EB 9380 0111 STS	HandID,R24
    024ED C011      RJMP	0x24FF
(1445)     else if((PIND&0x80)==0)  HandID=2;
    024EE 9987      SBIC	0x10,7
    024EF C004      RJMP	0x24F4
    024F0 E082      LDI	R24,2
    024F1 9380 0111 STS	HandID,R24
    024F3 C00B      RJMP	0x24FF
(1446)     else if((PING&0x01)==0)  HandID=0;
    024F4 9020 0063 LDS	R2,0x63
    024F6 FC20      SBRC	R2,0
    024F7 C004      RJMP	0x24FC
    024F8 2422      CLR	R2
    024F9 9220 0111 STS	HandID,R2
    024FB C003      RJMP	0x24FF
(1447)     else HandID=255;
    024FC EF8F      LDI	R24,0xFF
    024FD 9380 0111 STS	HandID,R24
(1448) 	if(ID!=HandID)
    024FF 9020 0111 LDS	R2,HandID
    02501 2433      CLR	R3
    02502 9040 0107 LDS	R4,app.c:ID
    02504 9050 0108 LDS	R5,app.c:ID+1
    02506 1442      CP	R4,R2
    02507 0453      CPC	R5,R3
    02508 F059      BEQ	0x2514
(1449) 	{
(1450) 	  ID=HandID;
    02509 2433      CLR	R3
    0250A 9230 0108 STS	app.c:ID+1,R3
    0250C 9220 0107 STS	app.c:ID,R2
(1451) 	  count=0;
    0250E 2422      CLR	R2
    0250F 9230 010A STS	app.c:count+1,R3
    02511 9220 0109 STS	app.c:count,R2
(1452) 	  return;
    02513 C14E      RJMP	0x2662
(1453) 	}
(1454)   if(HandID<5) count++;
    02514 9180 0111 LDS	R24,HandID
    02516 3085      CPI	R24,5
    02517 F450      BCC	0x2522
    02518 9180 0109 LDS	R24,app.c:count
    0251A 9190 010A LDS	R25,app.c:count+1
    0251C 9601      ADIW	R24,1
    0251D 9390 010A STS	app.c:count+1,R25
    0251F 9380 0109 STS	app.c:count,R24
    02521 C006      RJMP	0x2528
(1455) 	else count=0;
    02522 2422      CLR	R2
    02523 2433      CLR	R3
    02524 9230 010A STS	app.c:count+1,R3
    02526 9220 0109 STS	app.c:count,R2
(1456) 	if(count>=5)
    02528 9180 0109 LDS	R24,app.c:count
    0252A 9190 010A LDS	R25,app.c:count+1
    0252C 3085      CPI	R24,5
    0252D E0E0      LDI	R30,0
    0252E 079E      CPC	R25,R30
    0252F F408      BCC	0x2531
    02530 C131      RJMP	0x2662
(1457) 	{
(1458) 	  count=0;
    02531 2422      CLR	R2
    02532 2433      CLR	R3
    02533 9230 010A STS	app.c:count+1,R3
    02535 9220 0109 STS	app.c:count,R2
(1459) 	  Hand_Event=KEY_DOWN;
    02537 E081      LDI	R24,1
    02538 9380 0112 STS	Hand_Event,R24
(1460) 	}
(1461)   }
    0253A C127      RJMP	0x2662
(1462)   else if(Hand_Event==KEY_DOWN)
    0253B 9180 0112 LDS	R24,Hand_Event
    0253D 3081      CPI	R24,1
    0253E F009      BEQ	0x2540
    0253F C0BC      RJMP	0x25FC
(1463)   {
(1464) 	if(HandID<4)
    02540 9180 0111 LDS	R24,HandID
    02542 3084      CPI	R24,4
    02543 F008      BCS	0x2545
    02544 C04C      RJMP	0x2591
(1465)     {
(1466)       Intensity[7]=HandID;
    02545 2E28      MOV	R2,R24
    02546 9220 03BA STS	Intensity+7,R2
(1467)       ModeSet();
    02548 940E 099D CALL	_ModeSet
(1468)     if(MACHINE_STATE.WORK_STATE==1)
    0254A 9180 089C LDS	R24,MACHINE_STATE+1
    0254C 3081      CPI	R24,1
    0254D F499      BNE	0x2561
(1469) 	  {
(1470) 	    if(Intensity[8]==2)  BitClr(PORTG,4);//手柄工作指示灯
    0254E 9180 03BB LDS	R24,Intensity+8
    02550 3082      CPI	R24,2
    02551 F429      BNE	0x2557
    02552 9180 0065 LDS	R24,0x65
    02554 7E8F      ANDI	R24,0xEF
    02555 9380 0065 STS	0x65,R24
(1471) 	    if(Intensity[8]==3)  BitClr(PORTG,3);//手柄工作指示灯
    02557 9180 03BB LDS	R24,Intensity+8
    02559 3083      CPI	R24,3
    0255A F481      BNE	0x256B
    0255B 9180 0065 LDS	R24,0x65
    0255D 7F87      ANDI	R24,0xF7
    0255E 9380 0065 STS	0x65,R24
(1472) 	  }
    02560 C00A      RJMP	0x256B
(1473) 	  else
(1474) 	  {
(1475) 	    BitSet(PORTG,4);
    02561 9180 0065 LDS	R24,0x65
    02563 6180      ORI	R24,0x10
    02564 9380 0065 STS	0x65,R24
(1476) 	    BitSet(PORTG,3);
    02566 9180 0065 LDS	R24,0x65
    02568 6088      ORI	R24,0x8
    02569 9380 0065 STS	0x65,R24
(1477) 	  }
(1478)       buff[0] = MACHINE_STATE.HANDLE_ID-1;
    0256B 9180 089B LDS	R24,MACHINE_STATE
    0256D 5081      SUBI	R24,1
    0256E 8389      STD	Y+1,R24
(1479)       buff[1] = Intensity[4];//负压等级
    0256F 9020 03B7 LDS	R2,Intensity+4
    02571 822A      STD	Y+2,R2
(1480)       buff[2] = Intensity[5];//吸气等级
    02572 9020 03B8 LDS	R2,Intensity+5
    02574 822B      STD	Y+3,R2
(1481)       buff[3] = Intensity[6];//放气等级
    02575 9020 03B9 LDS	R2,Intensity+6
    02577 822C      STD	Y+4,R2
(1482)       buff[4] = Intensity[2] ;//RF等级
    02578 9020 03B5 LDS	R2,Intensity+2
    0257A 822D      STD	Y+5,R2
(1483)       buff[5] = Intensity[0];//LED等级
    0257B 9020 03B3 LDS	R2,Intensity
    0257D 822E      STD	Y+6,R2
(1484)       buff[6] = Intensity[1];//红外等级
    0257E 9020 03B4 LDS	R2,Intensity+1
    02580 822F      STD	Y+7,R2
(1485)       buff[7] = Intensity[3];//电机转速等级
    02581 9020 03B6 LDS	R2,Intensity+3
    02583 8628      STD	Y+8,R2
(1486)       buff[8] = Intensity[7];//电机转向
    02584 9020 03BA LDS	R2,Intensity+7
    02586 8629      STD	Y+9,R2
(1487) 
(1488)       DwinWriteLongWords(ADDR_HANDPARAMETER_TO_ANDROID,buff,9);//迪文屏通信函数
    02587 E089      LDI	R24,0x9
    02588 8388      ST	Y,R24
    02589 019E      MOVW	R18,R28
    0258A 5F2F      SUBI	R18,0xFF
    0258B 4F3F      SBCI	R19,0xFF
    0258C E000      LDI	R16,0
    0258D E416      LDI	R17,0x46
    0258E 940E 36D0 CALL	_DwinWriteLongWords
(1489) 	    //cut_pic(0,28+Intensity[7],523,388,588,788,523,388);
(1490)     }
    02590 C03B      RJMP	0x25CC
(1491) 	else if(HandID==4)
    02591 9180 0111 LDS	R24,HandID
    02593 3084      CPI	R24,4
    02594 F5B9      BNE	0x25CC
(1492) 	{
(1493)       MACHINE_STATE.WORK_STATE=1-MACHINE_STATE.WORK_STATE;
    02595 9020 089C LDS	R2,MACHINE_STATE+1
    02597 E081      LDI	R24,1
    02598 1982      SUB	R24,R2
    02599 9380 089C STS	MACHINE_STATE+1,R24
(1494)       buff[0] = MACHINE_STATE.HANDLE_ID-1;
    0259B 9180 089B LDS	R24,MACHINE_STATE
    0259D 5081      SUBI	R24,1
    0259E 8389      STD	Y+1,R24
(1495)       buff[1] = MACHINE_STATE.WORK_STATE;
    0259F 9020 089C LDS	R2,MACHINE_STATE+1
    025A1 822A      STD	Y+2,R2
(1496)       DwinWriteLongWords(ADDR_HANDWORK_TO_ANDROID, buff, 2); //反馈给安卓端
    025A2 E082      LDI	R24,2
    025A3 8388      ST	Y,R24
    025A4 019E      MOVW	R18,R28
    025A5 5F2F      SUBI	R18,0xFF
    025A6 4F3F      SBCI	R19,0xFF
    025A7 E001      LDI	R16,1
    025A8 E416      LDI	R17,0x46
    025A9 940E 36D0 CALL	_DwinWriteLongWords
(1497) 	  if(MACHINE_STATE.WORK_STATE==1)
    025AB 9180 089C LDS	R24,MACHINE_STATE+1
    025AD 3081      CPI	R24,1
    025AE F499      BNE	0x25C2
(1498) 	  {
(1499) 	    if(Intensity[8]==2)  BitClr(PORTG,4);//手柄工作指示灯
    025AF 9180 03BB LDS	R24,Intensity+8
    025B1 3082      CPI	R24,2
    025B2 F429      BNE	0x25B8
    025B3 9180 0065 LDS	R24,0x65
    025B5 7E8F      ANDI	R24,0xEF
    025B6 9380 0065 STS	0x65,R24
(1500) 	    if(Intensity[8]==3)  BitClr(PORTG,3);//手柄工作指示灯
    025B8 9180 03BB LDS	R24,Intensity+8
    025BA 3083      CPI	R24,3
    025BB F481      BNE	0x25CC
    025BC 9180 0065 LDS	R24,0x65
    025BE 7F87      ANDI	R24,0xF7
    025BF 9380 0065 STS	0x65,R24
(1501) 	  }
    025C1 C00A      RJMP	0x25CC
(1502) 	  else
(1503) 	  {
(1504) 	    BitSet(PORTG,4);
    025C2 9180 0065 LDS	R24,0x65
    025C4 6180      ORI	R24,0x10
    025C5 9380 0065 STS	0x65,R24
(1505) 	    BitSet(PORTG,3);
    025C7 9180 0065 LDS	R24,0x65
    025C9 6088      ORI	R24,0x8
    025CA 9380 0065 STS	0x65,R24
(1506) 	  }
(1507) 	  //cut_pic(0,28+Work,Work_Key[18].XS,Work_Key[18].YS,Work_Key[18].XE,Work_Key[18].YE,Work_Key[18].XS,Work_Key[18].YS);
(1508)   }
(1509) 	if((PIND&0x10)==0) HandID=1;
    025CC 9984      SBIC	0x10,4
    025CD C004      RJMP	0x25D2
    025CE E081      LDI	R24,1
    025CF 9380 0111 STS	HandID,R24
    025D1 C01D      RJMP	0x25EF
(1510)     else if((PIND&0x20)==0)  HandID=3;
    025D2 9985      SBIC	0x10,5
    025D3 C004      RJMP	0x25D8
    025D4 E083      LDI	R24,3
    025D5 9380 0111 STS	HandID,R24
    025D7 C017      RJMP	0x25EF
(1511)     else if((PIND&0x40)==0)  HandID=4;
    025D8 9986      SBIC	0x10,6
    025D9 C004      RJMP	0x25DE
    025DA E084      LDI	R24,4
    025DB 9380 0111 STS	HandID,R24
    025DD C011      RJMP	0x25EF
(1512)     else if((PIND&0x80)==0)  HandID=2;
    025DE 9987      SBIC	0x10,7
    025DF C004      RJMP	0x25E4
    025E0 E082      LDI	R24,2
    025E1 9380 0111 STS	HandID,R24
    025E3 C00B      RJMP	0x25EF
(1513)     else if((PING&0x01)==0)  HandID=0;
    025E4 9020 0063 LDS	R2,0x63
    025E6 FC20      SBRC	R2,0
    025E7 C004      RJMP	0x25EC
    025E8 2422      CLR	R2
    025E9 9220 0111 STS	HandID,R2
    025EB C003      RJMP	0x25EF
(1514)     else HandID=255;
    025EC EF8F      LDI	R24,0xFF
    025ED 9380 0111 STS	HandID,R24
(1515)     if(HandID>5) 
    025EF E085      LDI	R24,5
    025F0 9020 0111 LDS	R2,HandID
    025F2 1582      CP	R24,R2
    025F3 F420      BCC	0x25F8
(1516) 	{
(1517) 	  Hand_Event=KEY_NULL;
    025F4 2422      CLR	R2
    025F5 9220 0112 STS	Hand_Event,R2
(1518) 	  return;
    025F7 C06A      RJMP	0x2662
(1519) 	}
(1520)     Hand_Event=KEY_KEEP;
    025F8 E082      LDI	R24,2
    025F9 9380 0112 STS	Hand_Event,R24
(1521)   }
    025FB C066      RJMP	0x2662
(1522)   else if(Hand_Event==KEY_KEEP)
    025FC 9180 0112 LDS	R24,Hand_Event
    025FE 3082      CPI	R24,2
    025FF F569      BNE	0x262D
(1523)   {
(1524)     if((PIND&0x10)==0) HandID=1;
    02600 9984      SBIC	0x10,4
    02601 C004      RJMP	0x2606
    02602 E081      LDI	R24,1
    02603 9380 0111 STS	HandID,R24
    02605 C01D      RJMP	0x2623
(1525)     else if((PIND&0x20)==0)  HandID=3;
    02606 9985      SBIC	0x10,5
    02607 C004      RJMP	0x260C
    02608 E083      LDI	R24,3
    02609 9380 0111 STS	HandID,R24
    0260B C017      RJMP	0x2623
(1526)     else if((PIND&0x40)==0)  HandID=4;
    0260C 9986      SBIC	0x10,6
    0260D C004      RJMP	0x2612
    0260E E084      LDI	R24,4
    0260F 9380 0111 STS	HandID,R24
    02611 C011      RJMP	0x2623
(1527)     else if((PIND&0x80)==0)  HandID=2;
    02612 9987      SBIC	0x10,7
    02613 C004      RJMP	0x2618
    02614 E082      LDI	R24,2
    02615 9380 0111 STS	HandID,R24
    02617 C00B      RJMP	0x2623
(1528)     else if((PING&0x01)==0)  HandID=0;
    02618 9020 0063 LDS	R2,0x63
    0261A FC20      SBRC	R2,0
    0261B C004      RJMP	0x2620
    0261C 2422      CLR	R2
    0261D 9220 0111 STS	HandID,R2
    0261F C003      RJMP	0x2623
(1529)     else HandID=255;
    02620 EF8F      LDI	R24,0xFF
    02621 9380 0111 STS	HandID,R24
(1530)     if(HandID>5) Hand_Event=KEY_UP;
    02623 E085      LDI	R24,5
    02624 9020 0111 LDS	R2,HandID
    02626 1582      CP	R24,R2
    02627 F008      BCS	0x2629
    02628 C039      RJMP	0x2662
    02629 E083      LDI	R24,3
    0262A 9380 0112 STS	Hand_Event,R24
(1531)   }
    0262C C035      RJMP	0x2662
(1532)   else if(Hand_Event==KEY_UP)
    0262D 9180 0112 LDS	R24,Hand_Event
    0262F 3083      CPI	R24,3
    02630 F589      BNE	0x2662
(1533)   {
(1534)     if((PIND&0x10)==0) HandID=1;
    02631 9984      SBIC	0x10,4
    02632 C004      RJMP	0x2637
    02633 E081      LDI	R24,1
    02634 9380 0111 STS	HandID,R24
    02636 C01D      RJMP	0x2654
(1535)     else if((PIND&0x20)==0)  HandID=3;
    02637 9985      SBIC	0x10,5
    02638 C004      RJMP	0x263D
    02639 E083      LDI	R24,3
    0263A 9380 0111 STS	HandID,R24
    0263C C017      RJMP	0x2654
(1536)     else if((PIND&0x40)==0)  HandID=4;
    0263D 9986      SBIC	0x10,6
    0263E C004      RJMP	0x2643
    0263F E084      LDI	R24,4
    02640 9380 0111 STS	HandID,R24
    02642 C011      RJMP	0x2654
(1537)     else if((PIND&0x80)==0)  HandID=2;
    02643 9987      SBIC	0x10,7
    02644 C004      RJMP	0x2649
    02645 E082      LDI	R24,2
    02646 9380 0111 STS	HandID,R24
    02648 C00B      RJMP	0x2654
(1538)     else if((PING&0x01)==0)  HandID=0;
    02649 9020 0063 LDS	R2,0x63
    0264B FC20      SBRC	R2,0
    0264C C004      RJMP	0x2651
    0264D 2422      CLR	R2
    0264E 9220 0111 STS	HandID,R2
    02650 C003      RJMP	0x2654
(1539)     else HandID=255;
    02651 EF8F      LDI	R24,0xFF
    02652 9380 0111 STS	HandID,R24
(1540)     if(HandID<5) 
    02654 9180 0111 LDS	R24,HandID
    02656 3085      CPI	R24,5
    02657 F420      BCC	0x265C
(1541) 	{
(1542) 	  Hand_Event=KEY_KEEP;
    02658 E082      LDI	R24,2
    02659 9380 0112 STS	Hand_Event,R24
(1543) 	  return;
    0265B C006      RJMP	0x2662
(1544) 	}
(1545)     Hand_Event=KEY_NULL;
    0265C 2422      CLR	R2
    0265D 9220 0112 STS	Hand_Event,R2
(1546) 	HandID=255;
    0265F EF8F      LDI	R24,0xFF
    02660 9380 0111 STS	HandID,R24
(1547)   }
    02662 9661      ADIW	R28,0x11
    02663 9508      RET
(1548) }
(1549) void WorkKeyDown(void)
(1550) {
_WorkKeyDown:
    02664 9508      RET
_WorkKeyUp:
    02665 940E 4531 CALL	push_xgset303C
    02667 972C      SBIW	R28,0xC
(1551)   /*
(1552)   unsigned int i;
(1553)   if(DisPage!=WORKPAGE) return;
(1554)   KeyID=GetKeyID(Work_Key,19); 
(1555)   if(KeyID<7)
(1556)   {
(1557)     if((KeyID==0)&&(Intensity[8]==3));
(1558) 	else if((KeyID==1)&&(Intensity[8]>0));
(1559) 	else if((KeyID==3)&&(Intensity[8]>1));
(1560) 	else
(1561) 	{
(1562)      i=Touch_Y;
(1563)      Intensity[KeyID]=(315-i)/20;
(1564) 	 DisIntensity(KeyID);
(1565)      IntensitySet();
(1566) 	 Touch_Event=TOUCH_UP;
(1567) 	}
(1568)   }
(1569)   else if((KeyID>=7)&&(KeyID<=10)&&(Work==0))
(1570)   {
(1571)     Intensity[8]=KeyID-7;
(1572) 	for(i=0;i<7;i++)
(1573)     {
(1574)       Intensity[i]=Intensity_Tab[Intensity[8]][i];
(1575)       DisIntensity(i);
(1576)     }
(1577) 	  //EEPROMReadBytes(CounterAddr+hand[Intensity[8]]*4,&Total_counter,4);
(1578)     HandpieceSet();
(1579) 	  IntensitySet();
(1580)     ModeSet();
(1581)   }
(1582)   else if((KeyID>=11)&&(KeyID<=14))
(1583)   {
(1584)     Intensity[7]=KeyID-11;
(1585)     ModeSet();
(1586) 	cut_pic(0,28+Intensity[7],523,388,588,788,523,388);
(1587)   }
(1588)   else if((KeyID==15)&&(Work==0))
(1589)   {
(1590) 	cut_pic(0,29,Work_Key[KeyID].XS,Work_Key[KeyID].YS,Work_Key[KeyID].XE,Work_Key[KeyID].YE,Work_Key[KeyID].XS,Work_Key[KeyID].YS);
(1591) 	//EEPROMWriteBytes(IntensityAddr+Function_Tab[Function_Ptr]*9,Intensity,9);
(1592)   }
(1593)   else if((KeyID==16)&&(Work==0))
(1594)   {
(1595) 	cut_pic(0,29,Work_Key[KeyID].XS,Work_Key[KeyID].YS,Work_Key[KeyID].XE,Work_Key[KeyID].YE,Work_Key[KeyID].XS,Work_Key[KeyID].YS);
(1596)     for(i=0;i<9;i++)
(1597)     {
(1598)       Intensity[i]=Intensity_Tab[Function_Tab[Function_Ptr]][i];
(1599)       if(i<7) DisIntensity(i);
(1600)     }
(1601)     HandpieceSet();
(1602)     cut_pic(0,28+Intensity[7],523,388,588,788,523,388);
(1603)     //EEPROMWriteBytes(IntensityAddr+Function_Tab[Function_Ptr]*9,Intensity,9);
(1604)   }
(1605)   else if((KeyID==17)&&(Work==0))
(1606)   {
(1607) 	cut_pic(0,29,Work_Key[KeyID].XS,Work_Key[KeyID].YS,Work_Key[KeyID].XE,Work_Key[KeyID].YE,Work_Key[KeyID].XS,Work_Key[KeyID].YS);
(1608) 	for(i=0;i<9;i++) Intensity[i]=0;
(1609)   }
(1610)   else if(KeyID==18)
(1611)   {
(1612)    // Work=1-Work;
(1613) 	if(Work==1)
(1614) 	  {
(1615) 	    if(Intensity[8]==2)  BitClr(PORTG,4);
(1616) 	    if(Intensity[8]==3)  BitClr(PORTG,3);
(1617) 	  }
(1618) 	  else
(1619) 	  {
(1620) 	    BitSet(PORTG,4);
(1621) 	    BitSet(PORTG,3);
(1622) 	  }
(1623) 	cut_pic(0,28+Work,Work_Key[KeyID].XS,Work_Key[KeyID].YS,Work_Key[KeyID].XE,Work_Key[KeyID].YE,Work_Key[KeyID].XS,Work_Key[KeyID].YS);
(1624)   }*/
(1625) }
(1626) void WorkKeyUp(void)
(1627) {
(1628)   if(DisPage!=WORKPAGE) return;
    02668 9180 0114 LDS	R24,DisPage
    0266A 3185      CPI	R24,0x15
    0266B F009      BEQ	0x266D
    0266C C10F      RJMP	0x277C
(1629)   if((KeyID==15)&&(Work==0)) cut_pic(0,28,Work_Key[KeyID].XS,Work_Key[KeyID].YS,Work_Key[KeyID].XE,Work_Key[KeyID].YE,Work_Key[KeyID].XS,Work_Key[KeyID].YS);
    0266D 9180 0115 LDS	R24,KeyID
    0266F 308F      CPI	R24,0xF
    02670 F009      BEQ	0x2672
    02671 C042      RJMP	0x26B4
    02672 9020 0110 LDS	R2,Work
    02674 2022      TST	R2
    02675 F009      BEQ	0x2677
    02676 C03D      RJMP	0x26B4
    02677 2E28      MOV	R2,R24
    02678 2433      CLR	R3
    02679 0C22      LSL	R2
    0267A 1C33      ROL	R3
    0267B 0C22      LSL	R2
    0267C 1C33      ROL	R3
    0267D 0C22      LSL	R2
    0267E 1C33      ROL	R3
    0267F 0121      MOVW	R4,R2
    02680 E28E      LDI	R24,0x2E
    02681 E095      LDI	R25,5
    02682 01F1      MOVW	R30,R2
    02683 0FE8      ADD	R30,R24
    02684 1FF9      ADC	R31,R25
    02685 9027      ELPM	R2,Z+
    02686 9036      ELPM	R3,Z
    02687 863B      STD	Y+11,R3
    02688 862A      STD	Y+10,R2
    02689 E28C      LDI	R24,0x2C
    0268A E095      LDI	R25,5
    0268B 01F2      MOVW	R30,R4
    0268C 0FE8      ADD	R30,R24
    0268D 1FF9      ADC	R31,R25
    0268E 9067      ELPM	R6,Z+
    0268F 9076      ELPM	R7,Z
    02690 8679      STD	Y+9,R7
    02691 8668      STD	Y+8,R6
    02692 E382      LDI	R24,0x32
    02693 E095      LDI	R25,5
    02694 01F2      MOVW	R30,R4
    02695 0FE8      ADD	R30,R24
    02696 1FF9      ADC	R31,R25
    02697 9027      ELPM	R2,Z+
    02698 9036      ELPM	R3,Z
    02699 823F      STD	Y+7,R3
    0269A 822E      STD	Y+6,R2
    0269B E380      LDI	R24,0x30
    0269C E095      LDI	R25,5
    0269D 01F2      MOVW	R30,R4
    0269E 0FE8      ADD	R30,R24
    0269F 1FF9      ADC	R31,R25
    026A0 9027      ELPM	R2,Z+
    026A1 9036      ELPM	R3,Z
    026A2 823D      STD	Y+5,R3
    026A3 822C      STD	Y+4,R2
    026A4 E28E      LDI	R24,0x2E
    026A5 E095      LDI	R25,5
    026A6 01F2      MOVW	R30,R4
    026A7 0FE8      ADD	R30,R24
    026A8 1FF9      ADC	R31,R25
    026A9 9027      ELPM	R2,Z+
    026AA 9036      ELPM	R3,Z
    026AB 823B      STD	Y+3,R3
    026AC 822A      STD	Y+2,R2
    026AD 8279      STD	Y+1,R7
    026AE 8268      ST	Y,R6
    026AF E12C      LDI	R18,0x1C
    026B0 2700      CLR	R16
    026B1 940E 3F14 CALL	_cut_pic
    026B3 C092      RJMP	0x2746
(1630)   else if((KeyID==16)&&(Work==0)) cut_pic(0,28,Work_Key[KeyID].XS,Work_Key[KeyID].YS,Work_Key[KeyID].XE,Work_Key[KeyID].YE,Work_Key[KeyID].XS,Work_Key[KeyID].YS);
    026B4 9180 0115 LDS	R24,KeyID
    026B6 3180      CPI	R24,0x10
    026B7 F009      BEQ	0x26B9
    026B8 C041      RJMP	0x26FA
    026B9 9020 0110 LDS	R2,Work
    026BB 2022      TST	R2
    026BC F009      BEQ	0x26BE
    026BD C03C      RJMP	0x26FA
    026BE 2EC8      MOV	R12,R24
    026BF 24DD      CLR	R13
    026C0 0CCC      LSL	R12
    026C1 1CDD      ROL	R13
    026C2 0CCC      LSL	R12
    026C3 1CDD      ROL	R13
    026C4 0CCC      LSL	R12
    026C5 1CDD      ROL	R13
    026C6 E28E      LDI	R24,0x2E
    026C7 E095      LDI	R25,5
    026C8 01F6      MOVW	R30,R12
    026C9 0FE8      ADD	R30,R24
    026CA 1FF9      ADC	R31,R25
    026CB 9027      ELPM	R2,Z+
    026CC 9036      ELPM	R3,Z
    026CD 863B      STD	Y+11,R3
    026CE 862A      STD	Y+10,R2
    026CF E28C      LDI	R24,0x2C
    026D0 E095      LDI	R25,5
    026D1 01F6      MOVW	R30,R12
    026D2 0FE8      ADD	R30,R24
    026D3 1FF9      ADC	R31,R25
    026D4 90A7      ELPM	R10,Z+
    026D5 90B6      ELPM	R11,Z
    026D6 86B9      STD	Y+9,R11
    026D7 86A8      STD	Y+8,R10
    026D8 E382      LDI	R24,0x32
    026D9 E095      LDI	R25,5
    026DA 01F6      MOVW	R30,R12
    026DB 0FE8      ADD	R30,R24
    026DC 1FF9      ADC	R31,R25
    026DD 9027      ELPM	R2,Z+
    026DE 9036      ELPM	R3,Z
    026DF 823F      STD	Y+7,R3
    026E0 822E      STD	Y+6,R2
    026E1 E380      LDI	R24,0x30
    026E2 E095      LDI	R25,5
    026E3 01F6      MOVW	R30,R12
    026E4 0FE8      ADD	R30,R24
    026E5 1FF9      ADC	R31,R25
    026E6 9027      ELPM	R2,Z+
    026E7 9036      ELPM	R3,Z
    026E8 823D      STD	Y+5,R3
    026E9 822C      STD	Y+4,R2
    026EA E28E      LDI	R24,0x2E
    026EB E095      LDI	R25,5
    026EC 01F6      MOVW	R30,R12
    026ED 0FE8      ADD	R30,R24
    026EE 1FF9      ADC	R31,R25
    026EF 9027      ELPM	R2,Z+
    026F0 9036      ELPM	R3,Z
    026F1 823B      STD	Y+3,R3
    026F2 822A      STD	Y+2,R2
    026F3 82B9      STD	Y+1,R11
    026F4 82A8      ST	Y,R10
    026F5 E12C      LDI	R18,0x1C
    026F6 2700      CLR	R16
    026F7 940E 3F14 CALL	_cut_pic
    026F9 C04C      RJMP	0x2746
(1631)   else if((KeyID==17)&&(Work==0))
    026FA 9180 0115 LDS	R24,KeyID
    026FC 3181      CPI	R24,0x11
    026FD F009      BEQ	0x26FF
    026FE C047      RJMP	0x2746
    026FF 9020 0110 LDS	R2,Work
    02701 2022      TST	R2
    02702 F009      BEQ	0x2704
    02703 C042      RJMP	0x2746
(1632)   {
(1633) 	cut_pic(0,28,Work_Key[KeyID].XS,Work_Key[KeyID].YS,Work_Key[KeyID].XE,Work_Key[KeyID].YE,Work_Key[KeyID].XS,Work_Key[KeyID].YS);
    02704 2EC8      MOV	R12,R24
    02705 24DD      CLR	R13
    02706 0CCC      LSL	R12
    02707 1CDD      ROL	R13
    02708 0CCC      LSL	R12
    02709 1CDD      ROL	R13
    0270A 0CCC      LSL	R12
    0270B 1CDD      ROL	R13
    0270C E28E      LDI	R24,0x2E
    0270D E095      LDI	R25,5
    0270E 01F6      MOVW	R30,R12
    0270F 0FE8      ADD	R30,R24
    02710 1FF9      ADC	R31,R25
    02711 9027      ELPM	R2,Z+
    02712 9036      ELPM	R3,Z
    02713 863B      STD	Y+11,R3
    02714 862A      STD	Y+10,R2
    02715 E28C      LDI	R24,0x2C
    02716 E095      LDI	R25,5
    02717 01F6      MOVW	R30,R12
    02718 0FE8      ADD	R30,R24
    02719 1FF9      ADC	R31,R25
    0271A 90A7      ELPM	R10,Z+
    0271B 90B6      ELPM	R11,Z
    0271C 86B9      STD	Y+9,R11
    0271D 86A8      STD	Y+8,R10
    0271E E382      LDI	R24,0x32
    0271F E095      LDI	R25,5
    02720 01F6      MOVW	R30,R12
    02721 0FE8      ADD	R30,R24
    02722 1FF9      ADC	R31,R25
    02723 9027      ELPM	R2,Z+
    02724 9036      ELPM	R3,Z
    02725 823F      STD	Y+7,R3
    02726 822E      STD	Y+6,R2
    02727 E380      LDI	R24,0x30
    02728 E095      LDI	R25,5
    02729 01F6      MOVW	R30,R12
    0272A 0FE8      ADD	R30,R24
    0272B 1FF9      ADC	R31,R25
    0272C 9027      ELPM	R2,Z+
    0272D 9036      ELPM	R3,Z
    0272E 823D      STD	Y+5,R3
    0272F 822C      STD	Y+4,R2
    02730 E28E      LDI	R24,0x2E
    02731 E095      LDI	R25,5
    02732 01F6      MOVW	R30,R12
    02733 0FE8      ADD	R30,R24
    02734 1FF9      ADC	R31,R25
    02735 9027      ELPM	R2,Z+
    02736 9036      ELPM	R3,Z
    02737 823B      STD	Y+3,R3
    02738 822A      STD	Y+2,R2
    02739 82B9      STD	Y+1,R11
    0273A 82A8      ST	Y,R10
    0273B E12C      LDI	R18,0x1C
    0273C 2700      CLR	R16
    0273D 940E 3F14 CALL	_cut_pic
(1634) 	DisWelcome();
    0273F 940E 090A CALL	_DisWelcome
(1635)     DisPage=WELCOMEPAGE;
    02741 2422      CLR	R2
    02742 9220 0114 STS	DisPage,R2
(1636) 	Send_Data8();
    02744 940E 4333 CALL	_Send_Data8
(1637)   }
(1638)   if(KeyID<7)
    02746 9180 0115 LDS	R24,KeyID
    02748 3087      CPI	R24,7
    02749 F430      BCC	0x2750
(1639)   {
(1640)     Menu=KeyID;
    0274A 2E28      MOV	R2,R24
    0274B 9220 010C STS	Menu,R2
(1641)     Send_Data();
    0274D 940E 430F CALL	_Send_Data
(1642)   }
    0274F C02C      RJMP	0x277C
(1643)   else if((KeyID>=7)&&(KeyID<=10)&&(Work==0))
    02750 9140 0115 LDS	R20,KeyID
    02752 3047      CPI	R20,7
    02753 F050      BCS	0x275E
    02754 E08A      LDI	R24,0xA
    02755 1784      CP	R24,R20
    02756 F038      BCS	0x275E
    02757 9020 0110 LDS	R2,Work
    02759 2022      TST	R2
    0275A F419      BNE	0x275E
(1644)   {
(1645)    Send_Data8();
    0275B 940E 4333 CALL	_Send_Data8
(1646)   }
    0275D C01E      RJMP	0x277C
(1647)   else if((KeyID>=11)&&(KeyID<=14))
    0275E 9140 0115 LDS	R20,KeyID
    02760 304B      CPI	R20,0xB
    02761 F048      BCS	0x276B
    02762 E08E      LDI	R24,0xE
    02763 1784      CP	R24,R20
    02764 F030      BCS	0x276B
(1648)   {
(1649)    Menu=7;
    02765 E087      LDI	R24,7
    02766 9380 010C STS	Menu,R24
(1650)    Send_Data();
    02768 940E 430F CALL	_Send_Data
(1651)   }
    0276A C011      RJMP	0x277C
(1652)   else if((KeyID==16)&&(Work==0))
    0276B 9180 0115 LDS	R24,KeyID
    0276D 3180      CPI	R24,0x10
    0276E F439      BNE	0x2776
    0276F 9020 0110 LDS	R2,Work
    02771 2022      TST	R2
    02772 F419      BNE	0x2776
(1653)   {
(1654)    Send_Data8();
    02773 940E 4333 CALL	_Send_Data8
(1655)   }
    02775 C006      RJMP	0x277C
(1656)   else if(KeyID==18)
    02776 9180 0115 LDS	R24,KeyID
    02778 3182      CPI	R24,0x12
    02779 F411      BNE	0x277C
(1657)   {
(1658)    Send_command();
    0277A 940E 437A CALL	_Send_command
(1659)   }
    0277C 962C      ADIW	R28,0xC
    0277D 940C 4538 JMP	pop_xgset303C
_ULKeyDown:
    0277F 934A      ST	-Y,R20
    02780 935A      ST	-Y,R21
    02781 972C      SBIW	R28,0xC
(1660) 
(1661) }
(1662) 
(1663) void ULKeyDown(void)
(1664) {
(1665)   if(DisPage!=ultrasonicpage) return;
    02782 9180 0114 LDS	R24,DisPage
    02784 3187      CPI	R24,0x17
    02785 F009      BEQ	0x2787
    02786 C249      RJMP	0x29D0
(1666)   KeyID=GetKeyID(UL_Key,4); 
    02787 E024      LDI	R18,4
    02788 EC04      LDI	R16,0xC4
    02789 E015      LDI	R17,5
    0278A 940E 0A56 CALL	_GetKeyID
    0278C 9300 0115 STS	KeyID,R16
(1667)   if((KeyID==0)&&(UL_workdate==0))
    0278E 2300      TST	R16
    0278F F009      BEQ	0x2791
    02790 C0F2      RJMP	0x2883
    02791 9020 0100 LDS	R2,UL_workdate
    02793 2022      TST	R2
    02794 F009      BEQ	0x2796
    02795 C0ED      RJMP	0x2883
(1668)   {
(1669)     cut_pic(1,109,420,110,480,168,420,110);if(POWER_LEVEL<5){POWER_LEVEL++;}
    02796 E68E      LDI	R24,0x6E
    02797 E090      LDI	R25,0
    02798 879B      STD	Y+11,R25
    02799 878A      STD	Y+10,R24
    0279A EA84      LDI	R24,0xA4
    0279B E091      LDI	R25,1
    0279C 8799      STD	Y+9,R25
    0279D 8788      STD	Y+8,R24
    0279E EA88      LDI	R24,0xA8
    0279F E090      LDI	R25,0
    027A0 839F      STD	Y+7,R25
    027A1 838E      STD	Y+6,R24
    027A2 EE80      LDI	R24,0xE0
    027A3 E091      LDI	R25,1
    027A4 839D      STD	Y+5,R25
    027A5 838C      STD	Y+4,R24
    027A6 E68E      LDI	R24,0x6E
    027A7 E090      LDI	R25,0
    027A8 839B      STD	Y+3,R25
    027A9 838A      STD	Y+2,R24
    027AA EA84      LDI	R24,0xA4
    027AB E091      LDI	R25,1
    027AC 8399      STD	Y+1,R25
    027AD 8388      ST	Y,R24
    027AE E62D      LDI	R18,0x6D
    027AF E001      LDI	R16,1
    027B0 940E 3F14 CALL	_cut_pic
    027B2 9180 0101 LDS	R24,POWER_LEVEL
    027B4 3085      CPI	R24,5
    027B5 F418      BCC	0x27B9
    027B6 5F8F      SUBI	R24,0xFF
    027B7 9380 0101 STS	POWER_LEVEL,R24
(1670)     switch(POWER_LEVEL)//??????????
    027B9 9140 0101 LDS	R20,POWER_LEVEL
    027BB 2755      CLR	R21
    027BC 3040      CPI	R20,0
    027BD 0745      CPC	R20,R21
    027BE F0C9      BEQ	0x27D8
    027BF 3041      CPI	R20,1
    027C0 E0E0      LDI	R30,0
    027C1 075E      CPC	R21,R30
    027C2 F191      BEQ	0x27F5
    027C3 3042      CPI	R20,2
    027C4 E0E0      LDI	R30,0
    027C5 075E      CPC	R21,R30
    027C6 F409      BNE	0x27C8
    027C7 C04A      RJMP	0x2812
    027C8 3043      CPI	R20,3
    027C9 E0E0      LDI	R30,0
    027CA 075E      CPC	R21,R30
    027CB F409      BNE	0x27CD
    027CC C062      RJMP	0x282F
    027CD 3044      CPI	R20,4
    027CE E0E0      LDI	R30,0
    027CF 075E      CPC	R21,R30
    027D0 F409      BNE	0x27D2
    027D1 C07A      RJMP	0x284C
    027D2 3045      CPI	R20,5
    027D3 E0E0      LDI	R30,0
    027D4 075E      CPC	R21,R30
    027D5 F409      BNE	0x27D7
    027D6 C091      RJMP	0x2868
    027D7 C1F8      RJMP	0x29D0
(1671)      {
(1672)      case 0:  cut_pic(1,109,0,510,60,599,420,170); break;
    027D8 EA8A      LDI	R24,0xAA
    027D9 E090      LDI	R25,0
    027DA 879B      STD	Y+11,R25
    027DB 878A      STD	Y+10,R24
    027DC EA84      LDI	R24,0xA4
    027DD E091      LDI	R25,1
    027DE 8799      STD	Y+9,R25
    027DF 8788      STD	Y+8,R24
    027E0 E587      LDI	R24,0x57
    027E1 E092      LDI	R25,2
    027E2 839F      STD	Y+7,R25
    027E3 838E      STD	Y+6,R24
    027E4 E38C      LDI	R24,0x3C
    027E5 E090      LDI	R25,0
    027E6 839D      STD	Y+5,R25
    027E7 838C      STD	Y+4,R24
    027E8 EF8E      LDI	R24,0xFE
    027E9 E091      LDI	R25,1
    027EA 839B      STD	Y+3,R25
    027EB 838A      STD	Y+2,R24
    027EC 2422      CLR	R2
    027ED 2433      CLR	R3
    027EE 8239      STD	Y+1,R3
    027EF 8228      ST	Y,R2
    027F0 E62D      LDI	R18,0x6D
    027F1 E001      LDI	R16,1
    027F2 940E 3F14 CALL	_cut_pic
    027F4 C1DB      RJMP	0x29D0
(1673)      case 1:  cut_pic(1,109,60,510,120,599,420,170); break;
    027F5 EA8A      LDI	R24,0xAA
    027F6 E090      LDI	R25,0
    027F7 879B      STD	Y+11,R25
    027F8 878A      STD	Y+10,R24
    027F9 EA84      LDI	R24,0xA4
    027FA E091      LDI	R25,1
    027FB 8799      STD	Y+9,R25
    027FC 8788      STD	Y+8,R24
    027FD E587      LDI	R24,0x57
    027FE E092      LDI	R25,2
    027FF 839F      STD	Y+7,R25
    02800 838E      STD	Y+6,R24
    02801 E788      LDI	R24,0x78
    02802 E090      LDI	R25,0
    02803 839D      STD	Y+5,R25
    02804 838C      STD	Y+4,R24
    02805 EF8E      LDI	R24,0xFE
    02806 E091      LDI	R25,1
    02807 839B      STD	Y+3,R25
    02808 838A      STD	Y+2,R24
    02809 E38C      LDI	R24,0x3C
    0280A E090      LDI	R25,0
    0280B 8399      STD	Y+1,R25
    0280C 8388      ST	Y,R24
    0280D E62D      LDI	R18,0x6D
    0280E E001      LDI	R16,1
    0280F 940E 3F14 CALL	_cut_pic
    02811 C1BE      RJMP	0x29D0
(1674)      case 2:  cut_pic(1,109,120,510,180,599,420,170); break;
    02812 EA8A      LDI	R24,0xAA
    02813 E090      LDI	R25,0
    02814 879B      STD	Y+11,R25
    02815 878A      STD	Y+10,R24
    02816 EA84      LDI	R24,0xA4
    02817 E091      LDI	R25,1
    02818 8799      STD	Y+9,R25
    02819 8788      STD	Y+8,R24
    0281A E587      LDI	R24,0x57
    0281B E092      LDI	R25,2
    0281C 839F      STD	Y+7,R25
    0281D 838E      STD	Y+6,R24
    0281E EB84      LDI	R24,0xB4
    0281F E090      LDI	R25,0
    02820 839D      STD	Y+5,R25
    02821 838C      STD	Y+4,R24
    02822 EF8E      LDI	R24,0xFE
    02823 E091      LDI	R25,1
    02824 839B      STD	Y+3,R25
    02825 838A      STD	Y+2,R24
    02826 E788      LDI	R24,0x78
    02827 E090      LDI	R25,0
    02828 8399      STD	Y+1,R25
    02829 8388      ST	Y,R24
    0282A E62D      LDI	R18,0x6D
    0282B E001      LDI	R16,1
    0282C 940E 3F14 CALL	_cut_pic
    0282E C1A1      RJMP	0x29D0
(1675)      case 3:  cut_pic(1,109,180,510,240,599,420,170);  break;
    0282F EA8A      LDI	R24,0xAA
    02830 E090      LDI	R25,0
    02831 879B      STD	Y+11,R25
    02832 878A      STD	Y+10,R24
    02833 EA84      LDI	R24,0xA4
    02834 E091      LDI	R25,1
    02835 8799      STD	Y+9,R25
    02836 8788      STD	Y+8,R24
    02837 E587      LDI	R24,0x57
    02838 E092      LDI	R25,2
    02839 839F      STD	Y+7,R25
    0283A 838E      STD	Y+6,R24
    0283B EF80      LDI	R24,0xF0
    0283C E090      LDI	R25,0
    0283D 839D      STD	Y+5,R25
    0283E 838C      STD	Y+4,R24
    0283F EF8E      LDI	R24,0xFE
    02840 E091      LDI	R25,1
    02841 839B      STD	Y+3,R25
    02842 838A      STD	Y+2,R24
    02843 EB84      LDI	R24,0xB4
    02844 E090      LDI	R25,0
    02845 8399      STD	Y+1,R25
    02846 8388      ST	Y,R24
    02847 E62D      LDI	R18,0x6D
    02848 E001      LDI	R16,1
    02849 940E 3F14 CALL	_cut_pic
    0284B C184      RJMP	0x29D0
(1676)      case 4:  cut_pic(1,109,240,510,300,599,420,170);  break;
    0284C EA8A      LDI	R24,0xAA
    0284D E090      LDI	R25,0
    0284E 879B      STD	Y+11,R25
    0284F 878A      STD	Y+10,R24
    02850 EA84      LDI	R24,0xA4
    02851 E091      LDI	R25,1
    02852 8799      STD	Y+9,R25
    02853 8788      STD	Y+8,R24
    02854 E587      LDI	R24,0x57
    02855 E092      LDI	R25,2
    02856 839F      STD	Y+7,R25
    02857 838E      STD	Y+6,R24
    02858 E28C      LDI	R24,0x2C
    02859 E091      LDI	R25,1
    0285A 839D      STD	Y+5,R25
    0285B 838C      STD	Y+4,R24
    0285C EF8E      LDI	R24,0xFE
    0285D 839B      STD	Y+3,R25
    0285E 838A      STD	Y+2,R24
    0285F EF80      LDI	R24,0xF0
    02860 E090      LDI	R25,0
    02861 8399      STD	Y+1,R25
    02862 8388      ST	Y,R24
    02863 E62D      LDI	R18,0x6D
    02864 E001      LDI	R16,1
    02865 940E 3F14 CALL	_cut_pic
    02867 C168      RJMP	0x29D0
(1677)      case 5:  cut_pic(1,109,300,510,358,599,420,170);  break;
    02868 EA8A      LDI	R24,0xAA
    02869 E090      LDI	R25,0
    0286A 879B      STD	Y+11,R25
    0286B 878A      STD	Y+10,R24
    0286C EA84      LDI	R24,0xA4
    0286D E091      LDI	R25,1
    0286E 8799      STD	Y+9,R25
    0286F 8788      STD	Y+8,R24
    02870 E587      LDI	R24,0x57
    02871 E092      LDI	R25,2
    02872 839F      STD	Y+7,R25
    02873 838E      STD	Y+6,R24
    02874 E686      LDI	R24,0x66
    02875 E091      LDI	R25,1
    02876 839D      STD	Y+5,R25
    02877 838C      STD	Y+4,R24
    02878 EF8E      LDI	R24,0xFE
    02879 839B      STD	Y+3,R25
    0287A 838A      STD	Y+2,R24
    0287B E28C      LDI	R24,0x2C
    0287C 8399      STD	Y+1,R25
    0287D 8388      ST	Y,R24
    0287E E62D      LDI	R18,0x6D
    0287F E001      LDI	R16,1
    02880 940E 3F14 CALL	_cut_pic
(1678)      default: break;
(1679)      }
(1680)   }
    02882 C14D      RJMP	0x29D0
(1681)   else if((KeyID==1)&&(UL_workdate==0))
    02883 9180 0115 LDS	R24,KeyID
    02885 3081      CPI	R24,1
    02886 F009      BEQ	0x2888
    02887 C0EF      RJMP	0x2977
    02888 9020 0100 LDS	R2,UL_workdate
    0288A 2022      TST	R2
    0288B F009      BEQ	0x288D
    0288C C0EA      RJMP	0x2977
(1682)   {
(1683)     cut_pic(1,109,420,260,480,320,420,260);if(POWER_LEVEL>0){POWER_LEVEL--;}
    0288D E084      LDI	R24,4
    0288E E091      LDI	R25,1
    0288F 879B      STD	Y+11,R25
    02890 878A      STD	Y+10,R24
    02891 EA84      LDI	R24,0xA4
    02892 8799      STD	Y+9,R25
    02893 8788      STD	Y+8,R24
    02894 E480      LDI	R24,0x40
    02895 839F      STD	Y+7,R25
    02896 838E      STD	Y+6,R24
    02897 EE80      LDI	R24,0xE0
    02898 839D      STD	Y+5,R25
    02899 838C      STD	Y+4,R24
    0289A E084      LDI	R24,4
    0289B 839B      STD	Y+3,R25
    0289C 838A      STD	Y+2,R24
    0289D EA84      LDI	R24,0xA4
    0289E 8399      STD	Y+1,R25
    0289F 8388      ST	Y,R24
    028A0 E62D      LDI	R18,0x6D
    028A1 E001      LDI	R16,1
    028A2 940E 3F14 CALL	_cut_pic
    028A4 E080      LDI	R24,0
    028A5 9020 0101 LDS	R2,POWER_LEVEL
    028A7 1582      CP	R24,R2
    028A8 F420      BCC	0x28AD
    028A9 2D82      MOV	R24,R2
    028AA 5081      SUBI	R24,1
    028AB 9380 0101 STS	POWER_LEVEL,R24
(1684)     switch(POWER_LEVEL)
    028AD 9140 0101 LDS	R20,POWER_LEVEL
    028AF 2755      CLR	R21
    028B0 3040      CPI	R20,0
    028B1 0745      CPC	R20,R21
    028B2 F0C9      BEQ	0x28CC
    028B3 3041      CPI	R20,1
    028B4 E0E0      LDI	R30,0
    028B5 075E      CPC	R21,R30
    028B6 F191      BEQ	0x28E9
    028B7 3042      CPI	R20,2
    028B8 E0E0      LDI	R30,0
    028B9 075E      CPC	R21,R30
    028BA F409      BNE	0x28BC
    028BB C04A      RJMP	0x2906
    028BC 3043      CPI	R20,3
    028BD E0E0      LDI	R30,0
    028BE 075E      CPC	R21,R30
    028BF F409      BNE	0x28C1
    028C0 C062      RJMP	0x2923
    028C1 3044      CPI	R20,4
    028C2 E0E0      LDI	R30,0
    028C3 075E      CPC	R21,R30
    028C4 F409      BNE	0x28C6
    028C5 C07A      RJMP	0x2940
    028C6 3045      CPI	R20,5
    028C7 E0E0      LDI	R30,0
    028C8 075E      CPC	R21,R30
    028C9 F409      BNE	0x28CB
    028CA C091      RJMP	0x295C
    028CB C104      RJMP	0x29D0
(1685)      {
(1686)      case 0:  cut_pic(1,109,0,510,60,599,420,170); break;
    028CC EA8A      LDI	R24,0xAA
    028CD E090      LDI	R25,0
    028CE 879B      STD	Y+11,R25
    028CF 878A      STD	Y+10,R24
    028D0 EA84      LDI	R24,0xA4
    028D1 E091      LDI	R25,1
    028D2 8799      STD	Y+9,R25
    028D3 8788      STD	Y+8,R24
    028D4 E587      LDI	R24,0x57
    028D5 E092      LDI	R25,2
    028D6 839F      STD	Y+7,R25
    028D7 838E      STD	Y+6,R24
    028D8 E38C      LDI	R24,0x3C
    028D9 E090      LDI	R25,0
    028DA 839D      STD	Y+5,R25
    028DB 838C      STD	Y+4,R24
    028DC EF8E      LDI	R24,0xFE
    028DD E091      LDI	R25,1
    028DE 839B      STD	Y+3,R25
    028DF 838A      STD	Y+2,R24
    028E0 2422      CLR	R2
    028E1 2433      CLR	R3
    028E2 8239      STD	Y+1,R3
    028E3 8228      ST	Y,R2
    028E4 E62D      LDI	R18,0x6D
    028E5 E001      LDI	R16,1
    028E6 940E 3F14 CALL	_cut_pic
    028E8 C0E7      RJMP	0x29D0
(1687)      case 1:  cut_pic(1,109,60,510,120,599,420,170); break;
    028E9 EA8A      LDI	R24,0xAA
    028EA E090      LDI	R25,0
    028EB 879B      STD	Y+11,R25
    028EC 878A      STD	Y+10,R24
    028ED EA84      LDI	R24,0xA4
    028EE E091      LDI	R25,1
    028EF 8799      STD	Y+9,R25
    028F0 8788      STD	Y+8,R24
    028F1 E587      LDI	R24,0x57
    028F2 E092      LDI	R25,2
    028F3 839F      STD	Y+7,R25
    028F4 838E      STD	Y+6,R24
    028F5 E788      LDI	R24,0x78
    028F6 E090      LDI	R25,0
    028F7 839D      STD	Y+5,R25
    028F8 838C      STD	Y+4,R24
    028F9 EF8E      LDI	R24,0xFE
    028FA E091      LDI	R25,1
    028FB 839B      STD	Y+3,R25
    028FC 838A      STD	Y+2,R24
    028FD E38C      LDI	R24,0x3C
    028FE E090      LDI	R25,0
    028FF 8399      STD	Y+1,R25
    02900 8388      ST	Y,R24
    02901 E62D      LDI	R18,0x6D
    02902 E001      LDI	R16,1
    02903 940E 3F14 CALL	_cut_pic
    02905 C0CA      RJMP	0x29D0
(1688)      case 2:  cut_pic(1,109,120,510,180,599,420,170); break;
    02906 EA8A      LDI	R24,0xAA
    02907 E090      LDI	R25,0
    02908 879B      STD	Y+11,R25
    02909 878A      STD	Y+10,R24
    0290A EA84      LDI	R24,0xA4
    0290B E091      LDI	R25,1
    0290C 8799      STD	Y+9,R25
    0290D 8788      STD	Y+8,R24
    0290E E587      LDI	R24,0x57
    0290F E092      LDI	R25,2
    02910 839F      STD	Y+7,R25
    02911 838E      STD	Y+6,R24
    02912 EB84      LDI	R24,0xB4
    02913 E090      LDI	R25,0
    02914 839D      STD	Y+5,R25
    02915 838C      STD	Y+4,R24
    02916 EF8E      LDI	R24,0xFE
    02917 E091      LDI	R25,1
    02918 839B      STD	Y+3,R25
    02919 838A      STD	Y+2,R24
    0291A E788      LDI	R24,0x78
    0291B E090      LDI	R25,0
    0291C 8399      STD	Y+1,R25
    0291D 8388      ST	Y,R24
    0291E E62D      LDI	R18,0x6D
    0291F E001      LDI	R16,1
    02920 940E 3F14 CALL	_cut_pic
    02922 C0AD      RJMP	0x29D0
(1689)      case 3:  cut_pic(1,109,180,510,240,599,420,170);  break;
    02923 EA8A      LDI	R24,0xAA
    02924 E090      LDI	R25,0
    02925 879B      STD	Y+11,R25
    02926 878A      STD	Y+10,R24
    02927 EA84      LDI	R24,0xA4
    02928 E091      LDI	R25,1
    02929 8799      STD	Y+9,R25
    0292A 8788      STD	Y+8,R24
    0292B E587      LDI	R24,0x57
    0292C E092      LDI	R25,2
    0292D 839F      STD	Y+7,R25
    0292E 838E      STD	Y+6,R24
    0292F EF80      LDI	R24,0xF0
    02930 E090      LDI	R25,0
    02931 839D      STD	Y+5,R25
    02932 838C      STD	Y+4,R24
    02933 EF8E      LDI	R24,0xFE
    02934 E091      LDI	R25,1
    02935 839B      STD	Y+3,R25
    02936 838A      STD	Y+2,R24
    02937 EB84      LDI	R24,0xB4
    02938 E090      LDI	R25,0
    02939 8399      STD	Y+1,R25
    0293A 8388      ST	Y,R24
    0293B E62D      LDI	R18,0x6D
    0293C E001      LDI	R16,1
    0293D 940E 3F14 CALL	_cut_pic
    0293F C090      RJMP	0x29D0
(1690)      case 4:  cut_pic(1,109,240,510,300,599,420,170);  break;
    02940 EA8A      LDI	R24,0xAA
    02941 E090      LDI	R25,0
    02942 879B      STD	Y+11,R25
    02943 878A      STD	Y+10,R24
    02944 EA84      LDI	R24,0xA4
    02945 E091      LDI	R25,1
    02946 8799      STD	Y+9,R25
    02947 8788      STD	Y+8,R24
    02948 E587      LDI	R24,0x57
    02949 E092      LDI	R25,2
    0294A 839F      STD	Y+7,R25
    0294B 838E      STD	Y+6,R24
    0294C E28C      LDI	R24,0x2C
    0294D E091      LDI	R25,1
    0294E 839D      STD	Y+5,R25
    0294F 838C      STD	Y+4,R24
    02950 EF8E      LDI	R24,0xFE
    02951 839B      STD	Y+3,R25
    02952 838A      STD	Y+2,R24
    02953 EF80      LDI	R24,0xF0
    02954 E090      LDI	R25,0
    02955 8399      STD	Y+1,R25
    02956 8388      ST	Y,R24
    02957 E62D      LDI	R18,0x6D
    02958 E001      LDI	R16,1
    02959 940E 3F14 CALL	_cut_pic
    0295B C074      RJMP	0x29D0
(1691)      case 5:  cut_pic(1,109,300,510,358,599,420,170);  break;
    0295C EA8A      LDI	R24,0xAA
    0295D E090      LDI	R25,0
    0295E 879B      STD	Y+11,R25
    0295F 878A      STD	Y+10,R24
    02960 EA84      LDI	R24,0xA4
    02961 E091      LDI	R25,1
    02962 8799      STD	Y+9,R25
    02963 8788      STD	Y+8,R24
    02964 E587      LDI	R24,0x57
    02965 E092      LDI	R25,2
    02966 839F      STD	Y+7,R25
    02967 838E      STD	Y+6,R24
    02968 E686      LDI	R24,0x66
    02969 E091      LDI	R25,1
    0296A 839D      STD	Y+5,R25
    0296B 838C      STD	Y+4,R24
    0296C EF8E      LDI	R24,0xFE
    0296D 839B      STD	Y+3,R25
    0296E 838A      STD	Y+2,R24
    0296F E28C      LDI	R24,0x2C
    02970 8399      STD	Y+1,R25
    02971 8388      ST	Y,R24
    02972 E62D      LDI	R18,0x6D
    02973 E001      LDI	R16,1
    02974 940E 3F14 CALL	_cut_pic
(1692)      default: break;
(1693)      }
(1694)   } 
    02976 C059      RJMP	0x29D0
(1695)   else if(KeyID==2){cut_pic(1,109,720,560,780,600,720,560);} //?????????完??
    02977 9180 0115 LDS	R24,KeyID
    02979 3082      CPI	R24,2
    0297A F4D1      BNE	0x2995
    0297B E380      LDI	R24,0x30
    0297C E092      LDI	R25,2
    0297D 879B      STD	Y+11,R25
    0297E 878A      STD	Y+10,R24
    0297F ED80      LDI	R24,0xD0
    02980 8799      STD	Y+9,R25
    02981 8788      STD	Y+8,R24
    02982 E588      LDI	R24,0x58
    02983 839F      STD	Y+7,R25
    02984 838E      STD	Y+6,R24
    02985 E08C      LDI	R24,0xC
    02986 E093      LDI	R25,3
    02987 839D      STD	Y+5,R25
    02988 838C      STD	Y+4,R24
    02989 E380      LDI	R24,0x30
    0298A E092      LDI	R25,2
    0298B 839B      STD	Y+3,R25
    0298C 838A      STD	Y+2,R24
    0298D ED80      LDI	R24,0xD0
    0298E 8399      STD	Y+1,R25
    0298F 8388      ST	Y,R24
    02990 E62D      LDI	R18,0x6D
    02991 E001      LDI	R16,1
    02992 940E 3F14 CALL	_cut_pic
    02994 C03B      RJMP	0x29D0
(1696)   else if(KeyID==3)//??????
    02995 9180 0115 LDS	R24,KeyID
    02997 3083      CPI	R24,3
    02998 F5B9      BNE	0x29D0
(1697)   {
(1698)     UL_workdate=1-UL_workdate;
    02999 9020 0100 LDS	R2,UL_workdate
    0299B E081      LDI	R24,1
    0299C 1982      SUB	R24,R2
    0299D 9380 0100 STS	UL_workdate,R24
(1699)     if(UL_workdate==1){cut_pic(1,109,420,400,480,460,420,400);}
    0299F 3081      CPI	R24,1
    029A0 F4C1      BNE	0x29B9
    029A1 E980      LDI	R24,0x90
    029A2 E091      LDI	R25,1
    029A3 879B      STD	Y+11,R25
    029A4 878A      STD	Y+10,R24
    029A5 EA84      LDI	R24,0xA4
    029A6 8799      STD	Y+9,R25
    029A7 8788      STD	Y+8,R24
    029A8 EC8C      LDI	R24,0xCC
    029A9 839F      STD	Y+7,R25
    029AA 838E      STD	Y+6,R24
    029AB EE80      LDI	R24,0xE0
    029AC 839D      STD	Y+5,R25
    029AD 838C      STD	Y+4,R24
    029AE E980      LDI	R24,0x90
    029AF 839B      STD	Y+3,R25
    029B0 838A      STD	Y+2,R24
    029B1 EA84      LDI	R24,0xA4
    029B2 8399      STD	Y+1,R25
    029B3 8388      ST	Y,R24
    029B4 E62D      LDI	R18,0x6D
    029B5 E001      LDI	R16,1
    029B6 940E 3F14 CALL	_cut_pic
    029B8 C017      RJMP	0x29D0
(1700)     else{cut_pic(1,108,420,400,480,460,420,400);}
    029B9 E980      LDI	R24,0x90
    029BA E091      LDI	R25,1
    029BB 879B      STD	Y+11,R25
    029BC 878A      STD	Y+10,R24
    029BD EA84      LDI	R24,0xA4
    029BE 8799      STD	Y+9,R25
    029BF 8788      STD	Y+8,R24
    029C0 EC8C      LDI	R24,0xCC
    029C1 839F      STD	Y+7,R25
    029C2 838E      STD	Y+6,R24
    029C3 EE80      LDI	R24,0xE0
    029C4 839D      STD	Y+5,R25
    029C5 838C      STD	Y+4,R24
    029C6 E980      LDI	R24,0x90
    029C7 839B      STD	Y+3,R25
    029C8 838A      STD	Y+2,R24
    029C9 EA84      LDI	R24,0xA4
    029CA 8399      STD	Y+1,R25
    029CB 8388      ST	Y,R24
    029CC E62C      LDI	R18,0x6C
    029CD E001      LDI	R16,1
    029CE 940E 3F14 CALL	_cut_pic
(1701)   }
    029D0 962C      ADIW	R28,0xC
    029D1 9159      LD	R21,Y+
    029D2 9149      LD	R20,Y+
    029D3 9508      RET
_ULKeyUP:
    029D4 934A      ST	-Y,R20
    029D5 935A      ST	-Y,R21
    029D6 972C      SBIW	R28,0xC
(1702) 
(1703) }
(1704) 
(1705) void ULKeyUP(void)
(1706) {
(1707)   if(DisPage!=ultrasonicpage) return;
    029D7 9180 0114 LDS	R24,DisPage
    029D9 3187      CPI	R24,0x17
    029DA F009      BEQ	0x29DC
    029DB C0B4      RJMP	0x2A90
(1708)   if(KeyID==0){cut_pic(1,108,420,110,480,168,420,110);}
    029DC 9020 0115 LDS	R2,KeyID
    029DE 2022      TST	R2
    029DF F4E9      BNE	0x29FD
    029E0 E68E      LDI	R24,0x6E
    029E1 E090      LDI	R25,0
    029E2 879B      STD	Y+11,R25
    029E3 878A      STD	Y+10,R24
    029E4 EA84      LDI	R24,0xA4
    029E5 E091      LDI	R25,1
    029E6 8799      STD	Y+9,R25
    029E7 8788      STD	Y+8,R24
    029E8 EA88      LDI	R24,0xA8
    029E9 E090      LDI	R25,0
    029EA 839F      STD	Y+7,R25
    029EB 838E      STD	Y+6,R24
    029EC EE80      LDI	R24,0xE0
    029ED E091      LDI	R25,1
    029EE 839D      STD	Y+5,R25
    029EF 838C      STD	Y+4,R24
    029F0 E68E      LDI	R24,0x6E
    029F1 E090      LDI	R25,0
    029F2 839B      STD	Y+3,R25
    029F3 838A      STD	Y+2,R24
    029F4 EA84      LDI	R24,0xA4
    029F5 E091      LDI	R25,1
    029F6 8399      STD	Y+1,R25
    029F7 8388      ST	Y,R24
    029F8 E62C      LDI	R18,0x6C
    029F9 E001      LDI	R16,1
    029FA 940E 3F14 CALL	_cut_pic
    029FC C093      RJMP	0x2A90
(1709)   else if(KeyID==1){cut_pic(1,108,420,260,480,320,420,260);} 
    029FD 9180 0115 LDS	R24,KeyID
    029FF 3081      CPI	R24,1
    02A00 F4C1      BNE	0x2A19
    02A01 E084      LDI	R24,4
    02A02 E091      LDI	R25,1
    02A03 879B      STD	Y+11,R25
    02A04 878A      STD	Y+10,R24
    02A05 EA84      LDI	R24,0xA4
    02A06 8799      STD	Y+9,R25
    02A07 8788      STD	Y+8,R24
    02A08 E480      LDI	R24,0x40
    02A09 839F      STD	Y+7,R25
    02A0A 838E      STD	Y+6,R24
    02A0B EE80      LDI	R24,0xE0
    02A0C 839D      STD	Y+5,R25
    02A0D 838C      STD	Y+4,R24
    02A0E E084      LDI	R24,4
    02A0F 839B      STD	Y+3,R25
    02A10 838A      STD	Y+2,R24
    02A11 EA84      LDI	R24,0xA4
    02A12 8399      STD	Y+1,R25
    02A13 8388      ST	Y,R24
    02A14 E62C      LDI	R18,0x6C
    02A15 E001      LDI	R16,1
    02A16 940E 3F14 CALL	_cut_pic
    02A18 C077      RJMP	0x2A90
(1710)   else if((KeyID==2)&&(UL_workdate==0))//???????
    02A19 9180 0115 LDS	R24,KeyID
    02A1B 3082      CPI	R24,2
    02A1C F529      BNE	0x2A42
    02A1D 9020 0100 LDS	R2,UL_workdate
    02A1F 2022      TST	R2
    02A20 F509      BNE	0x2A42
(1711)   {
(1712) 	cut_pic(1,108,720,560,780,600,720,560);
    02A21 E380      LDI	R24,0x30
    02A22 E092      LDI	R25,2
    02A23 879B      STD	Y+11,R25
    02A24 878A      STD	Y+10,R24
    02A25 ED80      LDI	R24,0xD0
    02A26 8799      STD	Y+9,R25
    02A27 8788      STD	Y+8,R24
    02A28 E588      LDI	R24,0x58
    02A29 839F      STD	Y+7,R25
    02A2A 838E      STD	Y+6,R24
    02A2B E08C      LDI	R24,0xC
    02A2C E093      LDI	R25,3
    02A2D 839D      STD	Y+5,R25
    02A2E 838C      STD	Y+4,R24
    02A2F E380      LDI	R24,0x30
    02A30 E092      LDI	R25,2
    02A31 839B      STD	Y+3,R25
    02A32 838A      STD	Y+2,R24
    02A33 ED80      LDI	R24,0xD0
    02A34 8399      STD	Y+1,R25
    02A35 8388      ST	Y,R24
    02A36 E62C      LDI	R18,0x6C
    02A37 E001      LDI	R16,1
    02A38 940E 3F14 CALL	_cut_pic
(1713) 	DisWelcome();
    02A3A 940E 090A CALL	_DisWelcome
(1714)   DisPage=WELCOMEPAGE;
    02A3C 2422      CLR	R2
    02A3D 9220 0114 STS	DisPage,R2
(1715) 	Send_Data8();
    02A3F 940E 4333 CALL	_Send_Data8
(1716)   }
    02A41 C04E      RJMP	0x2A90
(1717)   else if(KeyID==3)//??????
    02A42 9180 0115 LDS	R24,KeyID
    02A44 3083      CPI	R24,3
    02A45 F009      BEQ	0x2A47
    02A46 C049      RJMP	0x2A90
(1718)   {   
(1719) 	 if(UL_workdate==1)
    02A47 9180 0100 LDS	R24,UL_workdate
    02A49 3081      CPI	R24,1
    02A4A F009      BEQ	0x2A4C
    02A4B C03F      RJMP	0x2A8B
(1720) 	  {
(1721)      switch(POWER_LEVEL)
    02A4C 9140 0101 LDS	R20,POWER_LEVEL
    02A4E 2755      CLR	R21
    02A4F 3040      CPI	R20,0
    02A50 0745      CPC	R20,R21
    02A51 F0A9      BEQ	0x2A67
    02A52 3041      CPI	R20,1
    02A53 E0E0      LDI	R30,0
    02A54 075E      CPC	R21,R30
    02A55 F0B9      BEQ	0x2A6D
    02A56 3042      CPI	R20,2
    02A57 E0E0      LDI	R30,0
    02A58 075E      CPC	R21,R30
    02A59 F0C9      BEQ	0x2A73
    02A5A 3043      CPI	R20,3
    02A5B E0E0      LDI	R30,0
    02A5C 075E      CPC	R21,R30
    02A5D F0D9      BEQ	0x2A79
    02A5E 3044      CPI	R20,4
    02A5F E0E0      LDI	R30,0
    02A60 075E      CPC	R21,R30
    02A61 F0E9      BEQ	0x2A7F
    02A62 3045      CPI	R20,5
    02A63 E0E0      LDI	R30,0
    02A64 075E      CPC	R21,R30
    02A65 F0F9      BEQ	0x2A85
    02A66 C029      RJMP	0x2A90
(1722)      {
(1723)      case 0:  POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_OFF; break;
    02A67 9AD9      SBI	0x1B,1
    02A68 9ADA      SBI	0x1B,2
    02A69 9ADB      SBI	0x1B,3
    02A6A 9ADC      SBI	0x1B,4
    02A6B 9ADD      SBI	0x1B,5
    02A6C C023      RJMP	0x2A90
(1724)      case 1:  POWER1_ON;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_OFF; break;
    02A6D 98D9      CBI	0x1B,1
    02A6E 9ADA      SBI	0x1B,2
    02A6F 9ADB      SBI	0x1B,3
    02A70 9ADC      SBI	0x1B,4
    02A71 9ADD      SBI	0x1B,5
    02A72 C01D      RJMP	0x2A90
(1725)      case 2:  POWER1_OFF;POWER2_ON;POWER3_OFF;POWER4_OFF;POWER5_OFF; break;
    02A73 9AD9      SBI	0x1B,1
    02A74 98DA      CBI	0x1B,2
    02A75 9ADB      SBI	0x1B,3
    02A76 9ADC      SBI	0x1B,4
    02A77 9ADD      SBI	0x1B,5
    02A78 C017      RJMP	0x2A90
(1726)      case 3:  POWER1_OFF;POWER2_OFF;POWER3_ON;POWER4_OFF;POWER5_OFF;  break;
    02A79 9AD9      SBI	0x1B,1
    02A7A 9ADA      SBI	0x1B,2
    02A7B 98DB      CBI	0x1B,3
    02A7C 9ADC      SBI	0x1B,4
    02A7D 9ADD      SBI	0x1B,5
    02A7E C011      RJMP	0x2A90
(1727)      case 4:  POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_ON;POWER5_OFF;  break;
    02A7F 9AD9      SBI	0x1B,1
    02A80 9ADA      SBI	0x1B,2
    02A81 9ADB      SBI	0x1B,3
    02A82 98DC      CBI	0x1B,4
    02A83 9ADD      SBI	0x1B,5
    02A84 C00B      RJMP	0x2A90
(1728)      case 5:  POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_ON;  break;
    02A85 9AD9      SBI	0x1B,1
    02A86 9ADA      SBI	0x1B,2
    02A87 9ADB      SBI	0x1B,3
    02A88 9ADC      SBI	0x1B,4
    02A89 98DD      CBI	0x1B,5
(1729)      default: break;
(1730)      }
(1731) 	  }
    02A8A C005      RJMP	0x2A90
(1732) 	  else
(1733) 	  {
(1734)      POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_OFF;POWER5_OFF;
    02A8B 9AD9      SBI	0x1B,1
    02A8C 9ADA      SBI	0x1B,2
    02A8D 9ADB      SBI	0x1B,3
    02A8E 9ADC      SBI	0x1B,4
    02A8F 9ADD      SBI	0x1B,5
(1735) 	  }
(1736)   }
    02A90 962C      ADIW	R28,0xC
    02A91 9159      LD	R21,Y+
    02A92 9149      LD	R20,Y+
    02A93 9508      RET
_ParasKeyDown:
    02A94 934A      ST	-Y,R20
    02A95 935A      ST	-Y,R21
    02A96 972C      SBIW	R28,0xC
(1737) }
(1738) 
(1739) void ParasKeyDown(void)
(1740) {
(1741)   if(DisPage!=PARASPAGE) return;
    02A97 9180 0114 LDS	R24,DisPage
    02A99 308D      CPI	R24,0xD
    02A9A F009      BEQ	0x2A9C
    02A9B C094      RJMP	0x2B30
(1742)   KeyID=GetKeyID(Paras_Key,4); 
    02A9C E024      LDI	R18,4
    02A9D E00C      LDI	R16,0xC
    02A9E E015      LDI	R17,5
    02A9F 940E 0A56 CALL	_GetKeyID
    02AA1 9300 0115 STS	KeyID,R16
(1743)   switch(KeyID)
    02AA3 2F40      MOV	R20,R16
    02AA4 2755      CLR	R21
    02AA5 3040      CPI	R20,0
    02AA6 0745      CPC	R20,R21
    02AA7 F051      BEQ	0x2AB2
    02AA8 3041      CPI	R20,1
    02AA9 E0E0      LDI	R30,0
    02AAA 075E      CPC	R21,R30
    02AAB F179      BEQ	0x2ADB
    02AAC 3042      CPI	R20,2
    02AAD E0E0      LDI	R30,0
    02AAE 075E      CPC	R21,R30
    02AAF F409      BNE	0x2AB1
    02AB0 C055      RJMP	0x2B06
    02AB1 C07E      RJMP	0x2B30
(1744)   {
(1745)    case 0:
(1746)     WorktimeSet = 1-WorktimeSet;
    02AB2 9020 0118 LDS	R2,WorktimeSet
    02AB4 E081      LDI	R24,1
    02AB5 1982      SUB	R24,R2
    02AB6 9380 0118 STS	WorktimeSet,R24
(1747)     cut_pic(0,21,18+(WorktimeSet*272),372,95+(WorktimeSet*272),423,318,272);
    02AB8 E180      LDI	R24,0x10
    02AB9 E091      LDI	R25,1
    02ABA 879B      STD	Y+11,R25
    02ABB 878A      STD	Y+10,R24
    02ABC E38E      LDI	R24,0x3E
    02ABD 8799      STD	Y+9,R25
    02ABE 8788      STD	Y+8,R24
    02ABF EA87      LDI	R24,0xA7
    02AC0 839F      STD	Y+7,R25
    02AC1 838E      STD	Y+6,R24
    02AC2 9120 0118 LDS	R18,WorktimeSet
    02AC4 2733      CLR	R19
    02AC5 E100      LDI	R16,0x10
    02AC6 E011      LDI	R17,1
    02AC7 940E 44A5 CALL	empy16s
    02AC9 01C8      MOVW	R24,R16
    02ACA 5A81      SUBI	R24,0xA1
    02ACB 4F9F      SBCI	R25,0xFF
    02ACC 839D      STD	Y+5,R25
    02ACD 838C      STD	Y+4,R24
    02ACE E784      LDI	R24,0x74
    02ACF E091      LDI	R25,1
    02AD0 839B      STD	Y+3,R25
    02AD1 838A      STD	Y+2,R24
    02AD2 01C8      MOVW	R24,R16
    02AD3 9642      ADIW	R24,0x12
    02AD4 8399      STD	Y+1,R25
    02AD5 8388      ST	Y,R24
    02AD6 E125      LDI	R18,0x15
    02AD7 2700      CLR	R16
    02AD8 940E 3F14 CALL	_cut_pic
(1748)    break;
    02ADA C055      RJMP	0x2B30
(1749)    case 1:
(1750)     PressureSet = 1-PressureSet;
    02ADB 9020 0119 LDS	R2,PressureSet
    02ADD E081      LDI	R24,1
    02ADE 1982      SUB	R24,R2
    02ADF 9380 0119 STS	PressureSet,R24
(1751)     cut_pic(0,21,96+(PressureSet*272),372,172+(PressureSet*272),423,396,272);	  
    02AE1 E180      LDI	R24,0x10
    02AE2 E091      LDI	R25,1
    02AE3 879B      STD	Y+11,R25
    02AE4 878A      STD	Y+10,R24
    02AE5 E88C      LDI	R24,0x8C
    02AE6 8799      STD	Y+9,R25
    02AE7 8788      STD	Y+8,R24
    02AE8 EA87      LDI	R24,0xA7
    02AE9 839F      STD	Y+7,R25
    02AEA 838E      STD	Y+6,R24
    02AEB 9120 0119 LDS	R18,PressureSet
    02AED 2733      CLR	R19
    02AEE E100      LDI	R16,0x10
    02AEF E011      LDI	R17,1
    02AF0 940E 44A5 CALL	empy16s
    02AF2 01A8      MOVW	R20,R16
    02AF3 01CA      MOVW	R24,R20
    02AF4 5584      SUBI	R24,0x54
    02AF5 4F9F      SBCI	R25,0xFF
    02AF6 839D      STD	Y+5,R25
    02AF7 838C      STD	Y+4,R24
    02AF8 E784      LDI	R24,0x74
    02AF9 E091      LDI	R25,1
    02AFA 839B      STD	Y+3,R25
    02AFB 838A      STD	Y+2,R24
    02AFC 01CA      MOVW	R24,R20
    02AFD 5A80      SUBI	R24,0xA0
    02AFE 4F9F      SBCI	R25,0xFF
    02AFF 8399      STD	Y+1,R25
    02B00 8388      ST	Y,R24
    02B01 E125      LDI	R18,0x15
    02B02 2700      CLR	R16
    02B03 940E 3F14 CALL	_cut_pic
(1752)    break;
    02B05 C02A      RJMP	0x2B30
(1753)    case 2:
(1754)     ClockSet = 1-ClockSet;
    02B06 9020 0121 LDS	R2,ClockSet
    02B08 E081      LDI	R24,1
    02B09 1982      SUB	R24,R2
    02B0A 9380 0121 STS	ClockSet,R24
(1755)     cut_pic(0,21,173+(ClockSet*272),372,249+(ClockSet*272),423,473,272);	
    02B0C E180      LDI	R24,0x10
    02B0D E091      LDI	R25,1
    02B0E 879B      STD	Y+11,R25
    02B0F 878A      STD	Y+10,R24
    02B10 ED89      LDI	R24,0xD9
    02B11 8799      STD	Y+9,R25
    02B12 8788      STD	Y+8,R24
    02B13 EA87      LDI	R24,0xA7
    02B14 839F      STD	Y+7,R25
    02B15 838E      STD	Y+6,R24
    02B16 9120 0121 LDS	R18,ClockSet
    02B18 2733      CLR	R19
    02B19 E100      LDI	R16,0x10
    02B1A E011      LDI	R17,1
    02B1B 940E 44A5 CALL	empy16s
    02B1D 01A8      MOVW	R20,R16
    02B1E 01CA      MOVW	R24,R20
    02B1F 5087      SUBI	R24,7
    02B20 4F9F      SBCI	R25,0xFF
    02B21 839D      STD	Y+5,R25
    02B22 838C      STD	Y+4,R24
    02B23 E784      LDI	R24,0x74
    02B24 E091      LDI	R25,1
    02B25 839B      STD	Y+3,R25
    02B26 838A      STD	Y+2,R24
    02B27 01CA      MOVW	R24,R20
    02B28 5583      SUBI	R24,0x53
    02B29 4F9F      SBCI	R25,0xFF
    02B2A 8399      STD	Y+1,R25
    02B2B 8388      ST	Y,R24
    02B2C E125      LDI	R18,0x15
    02B2D 2700      CLR	R16
    02B2E 940E 3F14 CALL	_cut_pic
(1756)    break;
(1757)    default :break;
    02B30 962C      ADIW	R28,0xC
    02B31 9159      LD	R21,Y+
    02B32 9149      LD	R20,Y+
    02B33 9508      RET
(1758)   }
(1759) }
(1760) void ParasKeyUp(void)
(1761) {
(1762)   if(DisPage!=PARASPAGE) return;
_ParasKeyUp:
    02B34 9180 0114 LDS	R24,DisPage
    02B36 308D      CPI	R24,0xD
    02B37 F009      BEQ	0x2B39
    02B38 C00A      RJMP	0x2B43
(1763)   if(KeyID==3)
    02B39 9180 0115 LDS	R24,KeyID
    02B3B 3083      CPI	R24,3
    02B3C F431      BNE	0x2B43
(1764)   {
(1765)     //EEPROMWriteBytes(PressureAddr,&PressureSet,1);
(1766) 	  //EEPROMWriteBytes(ClockSetAddr,&ClockSet,1);
(1767) 	  //EEPROMWriteBytes(WorktimeAddr,&WorktimeSet,1);
(1768)     dis_pic(19);
    02B3D E103      LDI	R16,0x13
    02B3E 940E 3F13 CALL	_dis_pic
(1769)     DisPage=SYSTEMPAGE;
    02B40 E08A      LDI	R24,0xA
    02B41 9380 0114 STS	DisPage,R24
(1770)   }
    02B43 9508      RET
_VersionKeyDown:
    02B44 972C      SBIW	R28,0xC
(1771) }
(1772) void VersionKeyDown(void)
(1773) {
(1774)   if(DisPage!=VERSIONPAGE) return;
    02B45 9180 0114 LDS	R24,DisPage
    02B47 308F      CPI	R24,0xF
    02B48 F009      BEQ	0x2B4A
    02B49 C047      RJMP	0x2B91
(1775)   KeyID=GetKeyID(VerSet_Key,3); 
    02B4A E023      LDI	R18,3
    02B4B ED0C      LDI	R16,0xDC
    02B4C E014      LDI	R17,4
    02B4D 940E 0A56 CALL	_GetKeyID
    02B4F 9300 0115 STS	KeyID,R16
(1776)   if(KeyID<2)
    02B51 2F80      MOV	R24,R16
    02B52 3002      CPI	R16,2
    02B53 F5E8      BCC	0x2B91
(1777)   {
(1778)     VerSet=KeyID;
    02B54 2E28      MOV	R2,R24
    02B55 9220 0117 STS	VerSet,R2
(1779)    if(VerSet == TRUE)
    02B57 3001      CPI	R16,1
    02B58 F4E9      BNE	0x2B76
(1780)    cut_pic(0,24,290,40,539,139,320,240);
    02B59 EF80      LDI	R24,0xF0
    02B5A E090      LDI	R25,0
    02B5B 879B      STD	Y+11,R25
    02B5C 878A      STD	Y+10,R24
    02B5D E480      LDI	R24,0x40
    02B5E E091      LDI	R25,1
    02B5F 8799      STD	Y+9,R25
    02B60 8788      STD	Y+8,R24
    02B61 E88B      LDI	R24,0x8B
    02B62 E090      LDI	R25,0
    02B63 839F      STD	Y+7,R25
    02B64 838E      STD	Y+6,R24
    02B65 E18B      LDI	R24,0x1B
    02B66 E092      LDI	R25,2
    02B67 839D      STD	Y+5,R25
    02B68 838C      STD	Y+4,R24
    02B69 E288      LDI	R24,0x28
    02B6A E090      LDI	R25,0
    02B6B 839B      STD	Y+3,R25
    02B6C 838A      STD	Y+2,R24
    02B6D E282      LDI	R24,0x22
    02B6E E091      LDI	R25,1
    02B6F 8399      STD	Y+1,R25
    02B70 8388      ST	Y,R24
    02B71 E128      LDI	R18,0x18
    02B72 2700      CLR	R16
    02B73 940E 3F14 CALL	_cut_pic
    02B75 C01B      RJMP	0x2B91
(1781)    else
(1782)    cut_pic(0,24,20,40,269,139,320,240);
    02B76 EF80      LDI	R24,0xF0
    02B77 E090      LDI	R25,0
    02B78 879B      STD	Y+11,R25
    02B79 878A      STD	Y+10,R24
    02B7A E480      LDI	R24,0x40
    02B7B E091      LDI	R25,1
    02B7C 8799      STD	Y+9,R25
    02B7D 8788      STD	Y+8,R24
    02B7E E88B      LDI	R24,0x8B
    02B7F E090      LDI	R25,0
    02B80 839F      STD	Y+7,R25
    02B81 838E      STD	Y+6,R24
    02B82 E08D      LDI	R24,0xD
    02B83 E091      LDI	R25,1
    02B84 839D      STD	Y+5,R25
    02B85 838C      STD	Y+4,R24
    02B86 E288      LDI	R24,0x28
    02B87 E090      LDI	R25,0
    02B88 839B      STD	Y+3,R25
    02B89 838A      STD	Y+2,R24
    02B8A E184      LDI	R24,0x14
    02B8B 8399      STD	Y+1,R25
    02B8C 8388      ST	Y,R24
    02B8D E128      LDI	R18,0x18
    02B8E 2700      CLR	R16
    02B8F 940E 3F14 CALL	_cut_pic
(1783)   }
    02B91 962C      ADIW	R28,0xC
    02B92 9508      RET
(1784) }
(1785) void VersionKeyUp(void)
(1786) {
(1787)   if(DisPage!=VERSIONPAGE) return;
_VersionKeyUp:
    02B93 9180 0114 LDS	R24,DisPage
    02B95 308F      CPI	R24,0xF
    02B96 F009      BEQ	0x2B98
    02B97 C00A      RJMP	0x2BA2
(1788)   if(KeyID==2)
    02B98 9180 0115 LDS	R24,KeyID
    02B9A 3082      CPI	R24,2
    02B9B F431      BNE	0x2BA2
(1789)   {
(1790)     //EEPROMWriteBytes(VerDisAddr,&VerSet,1);
(1791)     dis_pic(19);
    02B9C E103      LDI	R16,0x13
    02B9D 940E 3F13 CALL	_dis_pic
(1792)     DisPage=SYSTEMPAGE;
    02B9F E08A      LDI	R24,0xA
    02BA0 9380 0114 STS	DisPage,R24
(1793)   }
    02BA2 9508      RET
_ResetKeyDown:
    02BA3 934A      ST	-Y,R20
    02BA4 935A      ST	-Y,R21
    02BA5 972C      SBIW	R28,0xC
(1794) }
(1795) void ResetKeyDown(void)
(1796) {
(1797)   if(DisPage!=RESETPAGE) return;
    02BA6 9180 0114 LDS	R24,DisPage
    02BA8 3182      CPI	R24,0x12
    02BA9 F009      BEQ	0x2BAB
    02BAA C044      RJMP	0x2BEF
(1798)   KeyID=GetKeyID(Reset_Key,3); 
    02BAB E023      LDI	R18,3
    02BAC EF04      LDI	R16,0xF4
    02BAD E014      LDI	R17,4
    02BAE 940E 0A56 CALL	_GetKeyID
    02BB0 9300 0115 STS	KeyID,R16
(1799)   switch(KeyID)
    02BB2 2F40      MOV	R20,R16
    02BB3 2755      CLR	R21
    02BB4 3040      CPI	R20,0
    02BB5 0745      CPC	R20,R21
    02BB6 F029      BEQ	0x2BBC
    02BB7 3041      CPI	R20,1
    02BB8 E0E0      LDI	R30,0
    02BB9 075E      CPC	R21,R30
    02BBA F0D9      BEQ	0x2BD6
    02BBB C033      RJMP	0x2BEF
(1800)   {
(1801)    case 0:   cut_pic(0,26,25,196,118,257,325,255);
    02BBC EF8F      LDI	R24,0xFF
    02BBD E090      LDI	R25,0
    02BBE 879B      STD	Y+11,R25
    02BBF 878A      STD	Y+10,R24
    02BC0 E485      LDI	R24,0x45
    02BC1 E091      LDI	R25,1
    02BC2 8799      STD	Y+9,R25
    02BC3 8788      STD	Y+8,R24
    02BC4 E081      LDI	R24,1
    02BC5 839F      STD	Y+7,R25
    02BC6 838E      STD	Y+6,R24
    02BC7 E786      LDI	R24,0x76
    02BC8 E090      LDI	R25,0
    02BC9 839D      STD	Y+5,R25
    02BCA 838C      STD	Y+4,R24
    02BCB EC84      LDI	R24,0xC4
    02BCC 839B      STD	Y+3,R25
    02BCD 838A      STD	Y+2,R24
    02BCE E189      LDI	R24,0x19
    02BCF 8399      STD	Y+1,R25
    02BD0 8388      ST	Y,R24
    02BD1 E12A      LDI	R18,0x1A
    02BD2 2700      CLR	R16
    02BD3 940E 3F14 CALL	_cut_pic
(1802)    break;
    02BD5 C019      RJMP	0x2BEF
(1803)    case 1:   cut_pic(0,26,155,196,248,257,455,255);
    02BD6 EF8F      LDI	R24,0xFF
    02BD7 E090      LDI	R25,0
    02BD8 879B      STD	Y+11,R25
    02BD9 878A      STD	Y+10,R24
    02BDA EC87      LDI	R24,0xC7
    02BDB E091      LDI	R25,1
    02BDC 8799      STD	Y+9,R25
    02BDD 8788      STD	Y+8,R24
    02BDE E081      LDI	R24,1
    02BDF 839F      STD	Y+7,R25
    02BE0 838E      STD	Y+6,R24
    02BE1 EF88      LDI	R24,0xF8
    02BE2 E090      LDI	R25,0
    02BE3 839D      STD	Y+5,R25
    02BE4 838C      STD	Y+4,R24
    02BE5 EC84      LDI	R24,0xC4
    02BE6 839B      STD	Y+3,R25
    02BE7 838A      STD	Y+2,R24
    02BE8 E98B      LDI	R24,0x9B
    02BE9 8399      STD	Y+1,R25
    02BEA 8388      ST	Y,R24
    02BEB E12A      LDI	R18,0x1A
    02BEC 2700      CLR	R16
    02BED 940E 3F14 CALL	_cut_pic
(1804)    break;   
(1805)    default: break;
    02BEF 962C      ADIW	R28,0xC
    02BF0 9159      LD	R21,Y+
    02BF1 9149      LD	R20,Y+
    02BF2 9508      RET
_ResetKeyUp:
  i                    --> R20
    02BF3 934A      ST	-Y,R20
(1806)   }
(1807) }
(1808) void ResetKeyUp(void)
(1809) {
(1810)   unsigned char i;
(1811)   if(DisPage!=RESETPAGE) return;
    02BF4 9180 0114 LDS	R24,DisPage
    02BF6 3182      CPI	R24,0x12
    02BF7 F009      BEQ	0x2BF9
    02BF8 C02F      RJMP	0x2C28
(1812)   if(KeyID==1)
    02BF9 9180 0115 LDS	R24,KeyID
    02BFB 3081      CPI	R24,1
    02BFC F509      BNE	0x2C1E
(1813)   {
(1814)     VerSet = TRUE;
    02BFD E081      LDI	R24,1
    02BFE 9380 0117 STS	VerSet,R24
(1815) 	//EEPROMWriteBytes(VerDisAddr,&VerSet,1); 
(1816) 	
(1817) 	WorktimeSet = TRUE;
    02C00 9380 0118 STS	WorktimeSet,R24
(1818) 	//EEPROMWriteBytes(WorktimeAddr,&WorktimeSet,1);
(1819) 	
(1820)     PressureSet = TRUE;
    02C02 9380 0119 STS	PressureSet,R24
(1821) 	//EEPROMWriteBytes(PressureAddr,&PressureSet,1);
(1822) 
(1823)     BackSet=0;
    02C04 2422      CLR	R2
    02C05 9220 0116 STS	BackSet,R2
(1824) 	//EEPROMWriteBytes(BackSetAddr,&BackSet,1);
(1825) 
(1826)     SoundSet=10;
    02C07 E08A      LDI	R24,0xA
    02C08 9380 011F STS	SoundSet,R24
(1827) 	//EEPROMWriteBytes(SoundSetAddr,&SoundSet,1);
(1828) 
(1829)     ClockSet=TRUE;
    02C0A E081      LDI	R24,1
    02C0B 9380 0121 STS	ClockSet,R24
(1830) 	//EEPROMWriteBytes(ClockSetAddr,&ClockSet,1);
(1831) 
(1832)     Language=0;
    02C0D 9220 0122 STS	Language,R2
(1833) 	//EEPROMWriteBytes(LanguageAddr,&Language,1);
(1834) 
(1835)     CardSet=FALSE;
    02C0F 9220 0393 STS	CardSet,R2
(1836) 	//EEPROMWriteBytes(CardSetAddr,&CardSet,1);
(1837) 	for(i=0;i<4;i++)
    02C11 2744      CLR	R20
    02C12 C009      RJMP	0x2C1C
(1838) 	{
(1839) 		Function_Buf[i] = 1;
    02C13 ED87      LDI	R24,0xD7
    02C14 E097      LDI	R25,7
    02C15 2FE4      MOV	R30,R20
    02C16 27FF      CLR	R31
    02C17 0FE8      ADD	R30,R24
    02C18 1FF9      ADC	R31,R25
    02C19 E081      LDI	R24,1
    02C1A 8380      ST	Z,R24
    02C1B 9543      INC	R20
    02C1C 3044      CPI	R20,4
    02C1D F3A8      BCS	0x2C13
(1840) 	}
(1841)    // EEPROMWriteBytes(FunctionAddr,Function_Buf,9);
(1842)   }
(1843)   if(KeyID<3)
    02C1E 9180 0115 LDS	R24,KeyID
    02C20 3083      CPI	R24,3
    02C21 F430      BCC	0x2C28
(1844)   {
(1845)     dis_pic(19);
    02C22 E103      LDI	R16,0x13
    02C23 940E 3F13 CALL	_dis_pic
(1846)     DisPage=SYSTEMPAGE;
    02C25 E08A      LDI	R24,0xA
    02C26 9380 0114 STS	DisPage,R24
(1847)   }
    02C28 9149      LD	R20,Y+
    02C29 9508      RET
_Key:
    02C2A 934A      ST	-Y,R20
    02C2B 935A      ST	-Y,R21
(1848) }
(1849) void Key(void)
(1850) {
(1851)   static unsigned int enter_mode_num;
(1852) 
(1853) 
(1854)   
(1855)   if((DisPage==WELCOMEPAGE)&&(Function_Count == 0))
    02C2C 9020 0114 LDS	R2,DisPage
    02C2E 2022      TST	R2
    02C2F F591      BNE	0x2C62
    02C30 9020 011A LDS	R2,Function_Count
    02C32 2022      TST	R2
    02C33 F571      BNE	0x2C62
(1856)   {
(1857) 	if(enter_mode_num<50)
    02C34 9180 03E4 LDS	R24,app.c:enter_mode_num
    02C36 9190 03E5 LDS	R25,app.c:enter_mode_num+1
    02C38 3382      CPI	R24,0x32
    02C39 E0E0      LDI	R30,0
    02C3A 079E      CPC	R25,R30
    02C3B F470      BCC	0x2C4A
(1858) 	{
(1859) 	  delay_ms(1);
    02C3C E001      LDI	R16,1
    02C3D E010      LDI	R17,0
    02C3E 940E 06B7 CALL	_delay_ms
(1860) 	  enter_mode_num++;	
    02C40 9180 03E4 LDS	R24,app.c:enter_mode_num
    02C42 9190 03E5 LDS	R25,app.c:enter_mode_num+1
    02C44 9601      ADIW	R24,1
    02C45 9390 03E5 STS	app.c:enter_mode_num+1,R25
    02C47 9380 03E4 STS	app.c:enter_mode_num,R24
(1861) 	}  
    02C49 C018      RJMP	0x2C62
(1862) 	else if(enter_mode_num==50)
    02C4A 9180 03E4 LDS	R24,app.c:enter_mode_num
    02C4C 9190 03E5 LDS	R25,app.c:enter_mode_num+1
    02C4E 3382      CPI	R24,0x32
    02C4F E0E0      LDI	R30,0
    02C50 079E      CPC	R25,R30
    02C51 F481      BNE	0x2C62
(1863) 	{
(1864) 	    Function_Ptr=0;
    02C52 2422      CLR	R2
    02C53 9220 011B STS	Function_Ptr,R2
(1865)    	  DisPage=WORKPAGE;
    02C55 E185      LDI	R24,0x15
    02C56 9380 0114 STS	DisPage,R24
(1866)    	  DisWork();
    02C58 940E 0A53 CALL	_DisWork
(1867)       Send_Data8();
    02C5A 940E 4333 CALL	_Send_Data8
(1868) 	  enter_mode_num = 51;  
    02C5C E383      LDI	R24,0x33
    02C5D E090      LDI	R25,0
    02C5E 9390 03E5 STS	app.c:enter_mode_num+1,R25
    02C60 9380 03E4 STS	app.c:enter_mode_num,R24
(1869) 	}
(1870)   }
(1871)   
(1872)   if(Touch_Event==TOUCH_NULL)
    02C62 9020 03A3 LDS	R2,Touch_Event
    02C64 2022      TST	R2
    02C65 F439      BNE	0x2C6D
(1873)   {
(1874)     if(Touch_Buf==TOUCH_DOWN) 
    02C66 9180 03A4 LDS	R24,Touch_Buf
    02C68 3081      CPI	R24,1
    02C69 F419      BNE	0x2C6D
(1875) 	{
(1876) 	  Touch_Event=TOUCH_DOWN;
    02C6A E081      LDI	R24,1
    02C6B 9380 03A3 STS	Touch_Event,R24
(1877) 	}
(1878)   }
(1879)   if(Touch_Event==TOUCH_DOWN)
    02C6D 9180 03A3 LDS	R24,Touch_Event
    02C6F 3081      CPI	R24,1
    02C70 F009      BEQ	0x2C72
    02C71 C059      RJMP	0x2CCB
(1880)   {
(1881)     Sound_Count=SoundSet;
    02C72 9020 011F LDS	R2,SoundSet
    02C74 9220 0120 STS	Sound_Count,R2
(1882)     Touch_Event=TOUCH_KEEP;	
    02C76 E082      LDI	R24,2
    02C77 9380 03A3 STS	Touch_Event,R24
(1883) 	switch(DisPage)
    02C79 9140 0114 LDS	R20,DisPage
    02C7B 2755      CLR	R21
    02C7C 3040      CPI	R20,0
    02C7D E0E0      LDI	R30,0
    02C7E 075E      CPC	R21,R30
    02C7F F40C      BGE	0x2C81
    02C80 C048      RJMP	0x2CC9
    02C81 E187      LDI	R24,0x17
    02C82 E090      LDI	R25,0
    02C83 1784      CP	R24,R20
    02C84 0795      CPC	R25,R21
    02C85 F40C      BGE	0x2C87
    02C86 C042      RJMP	0x2CC9
    02C87 E88C      LDI	R24,0x8C
    02C88 E090      LDI	R25,0
    02C89 01FA      MOVW	R30,R20
    02C8A 0FEE      LSL	R30
    02C8B 1FFF      ROL	R31
    02C8C 0FE8      ADD	R30,R24
    02C8D 1FF9      ADC	R31,R25
    02C8E 9027      ELPM	R2,Z+
    02C8F 9036      ELPM	R3,Z
    02C90 01F1      MOVW	R30,R2
    02C91 9409      IJMP
(1884) 	{
(1885) 	  case WELCOMEPAGE: MainKeyDown();break;//主界面功能选择
    02C92 940E 0A87 CALL	_MainKeyDown
    02C94 C0A0      RJMP	0x2D35
(1886) 	  case STARTPAGE:   StartKeyDown();break;//主界面设置选项
    02C95 940E 0B54 CALL	_StartKeyDown
    02C97 C09D      RJMP	0x2D35
(1887) 	  case TIMEPAGE:    TimeKeyDown();break;//时间设置
    02C98 940E 0EEB CALL	_TimeKeyDown
    02C9A C09A      RJMP	0x2D35
(1888) 	  case TOUCHPAGE:   break;
(1889) 	  case SOUNDPAGE:   SoundKeyDown();break;//声音设置
    02C9B 940E 1224 CALL	_SoundKeyDown
    02C9D C097      RJMP	0x2D35
(1890) 	  case LANGUAGEPAGE:LanguageKeyDown();break;//语言设置界面
    02C9E 940E 12C3 CALL	_LanguageKeyDown
    02CA0 C094      RJMP	0x2D35
(1891) 	  case BACKPAGE:    BackKeyDown();break;//背景设置
    02CA1 940E 134D CALL	_BackKeyDown
    02CA3 C091      RJMP	0x2D35
(1892) 	  case USBPAGE:     USBKeyDown();break;//
    02CA4 940E 1405 CALL	_USBKeyDown
    02CA6 C08E      RJMP	0x2D35
(1893) 	  case CARDPAGE:    CardKeyDown();break;
    02CA7 940E 1493 CALL	_CardKeyDown
    02CA9 C08B      RJMP	0x2D35
(1894) 	  case PARASPAGE:	ParasKeyDown();break;//气压时间等显示
    02CAA DDE9      RCALL	_ParasKeyDown
    02CAB C089      RJMP	0x2D35
(1895) 	  case VERSIONPAGE: VersionKeyDown();break;//脉冲
    02CAC DE97      RCALL	_VersionKeyDown
    02CAD C087      RJMP	0x2D35
(1896) 	  case RESETPAGE:	ResetKeyDown();break;//复位？
    02CAE DEF4      RCALL	_ResetKeyDown
    02CAF C085      RJMP	0x2D35
(1897) 	  case PASSWORDPAGE:PasswordKeyDown();break;//密码设置
    02CB0 940E 18D4 CALL	_PasswordKeyDown
    02CB2 C082      RJMP	0x2D35
(1898) 	  case SYSTEMPAGE:  SystemKeyDown();break;//系统设置
    02CB3 940E 1B59 CALL	_SystemKeyDown
    02CB5 C07F      RJMP	0x2D35
(1899) 	  case WORKTIMEPAGE:ClearCountKeyDown();break;//清零计数
    02CB6 940E 1F87 CALL	_ClearCountKeyDown
    02CB8 C07C      RJMP	0x2D35
(1900) 	  case OPTIONPAGE:  OptionKeyDown();break;//功能选择
    02CB9 940E 212F CALL	_OptionKeyDown
    02CBB C079      RJMP	0x2D35
(1901) 	  case PARMPAGE:    ParmKeyDown();break;//能量设置
    02CBC 940E 207C CALL	_ParmKeyDown
    02CBE C076      RJMP	0x2D35
(1902) 	  case ICCARDPAGE:  CardSetKeyDown();break;
    02CBF 940E 21D6 CALL	_CardSetKeyDown
    02CC1 C073      RJMP	0x2D35
(1903) 	  case PASSSETPAGE: PassSetKeyDown();break;//密码设置
    02CC2 940E 221C CALL	_PassSetKeyDown
    02CC4 C070      RJMP	0x2D35
(1904) 	  case WORKPAGE:    WorkKeyDown();break;
    02CC5 D99E      RCALL	_WorkKeyDown
    02CC6 C06E      RJMP	0x2D35
(1905)     case ultrasonicpage: ULKeyDown();break;//爆脂页
    02CC7 DAB7      RCALL	_ULKeyDown
    02CC8 C06C      RJMP	0x2D35
(1906) 	  default:WorkKeyDown(); break;
    02CC9 D99A      RCALL	_WorkKeyDown
(1907) 	}
(1908)   }
    02CCA C06A      RJMP	0x2D35
(1909)   else if(Touch_Event==TOUCH_KEEP)
    02CCB 9180 03A3 LDS	R24,Touch_Event
    02CCD 3082      CPI	R24,2
    02CCE F449      BNE	0x2CD8
(1910)   {
(1911)     if(Touch_Buf==TOUCH_UP) 
    02CCF 9180 03A4 LDS	R24,Touch_Buf
    02CD1 3083      CPI	R24,3
    02CD2 F009      BEQ	0x2CD4
    02CD3 C061      RJMP	0x2D35
(1912) 	{
(1913) 	 Touch_Event=TOUCH_UP;
    02CD4 E083      LDI	R24,3
    02CD5 9380 03A3 STS	Touch_Event,R24
(1914) 	}
(1915)   }
    02CD7 C05D      RJMP	0x2D35
(1916)   else if(Touch_Event==TOUCH_UP)
    02CD8 9180 03A3 LDS	R24,Touch_Event
    02CDA 3083      CPI	R24,3
    02CDB F009      BEQ	0x2CDD
    02CDC C055      RJMP	0x2D32
(1917)   {
(1918) 	Touch_Event=TOUCH_NULL;
    02CDD 2422      CLR	R2
    02CDE 9220 03A3 STS	Touch_Event,R2
(1919) 	switch(DisPage)
    02CE0 9140 0114 LDS	R20,DisPage
    02CE2 2755      CLR	R21
    02CE3 3040      CPI	R20,0
    02CE4 E0E0      LDI	R30,0
    02CE5 075E      CPC	R21,R30
    02CE6 F40C      BGE	0x2CE8
    02CE7 C048      RJMP	0x2D30
    02CE8 E187      LDI	R24,0x17
    02CE9 E090      LDI	R25,0
    02CEA 1784      CP	R24,R20
    02CEB 0795      CPC	R25,R21
    02CEC F40C      BGE	0x2CEE
    02CED C042      RJMP	0x2D30
    02CEE EB8C      LDI	R24,0xBC
    02CEF E090      LDI	R25,0
    02CF0 01FA      MOVW	R30,R20
    02CF1 0FEE      LSL	R30
    02CF2 1FFF      ROL	R31
    02CF3 0FE8      ADD	R30,R24
    02CF4 1FF9      ADC	R31,R25
    02CF5 9027      ELPM	R2,Z+
    02CF6 9036      ELPM	R3,Z
    02CF7 01F1      MOVW	R30,R2
    02CF8 9409      IJMP
(1920) 	{
(1921) 	  case WELCOMEPAGE:  MainKeyUp();break;
    02CF9 940E 0AE9 CALL	_MainKeyUp
    02CFB C039      RJMP	0x2D35
(1922) 	  case STARTPAGE:    StartKeyUp();break;
    02CFC 940E 0EC3 CALL	_StartKeyUp
    02CFE C036      RJMP	0x2D35
(1923) 	  case TIMEPAGE:     TimeKeyUp();break;
    02CFF 940E 110B CALL	_TimeKeyUp
    02D01 C033      RJMP	0x2D35
(1924) 	  case TOUCHPAGE:    break;
(1925) 	  case SOUNDPAGE:    SoundKeyUP();break;
    02D02 940E 12B4 CALL	_SoundKeyUP
    02D04 C030      RJMP	0x2D35
(1926) 	  case LANGUAGEPAGE: LanguageKeyUp();break;
    02D05 940E 1340 CALL	_LanguageKeyUp
    02D07 C02D      RJMP	0x2D35
(1927) 	  case BACKPAGE:     BackKeyUp();break;
    02D08 940E 13EC CALL	_BackKeyUp
    02D0A C02A      RJMP	0x2D35
(1928) 	  case USBPAGE:      USBKeyUp();break;
    02D0B 940E 1444 CALL	_USBKeyUp
    02D0D C027      RJMP	0x2D35
(1929) 	  case CARDPAGE:     CardKeyUp();break;
    02D0E 940E 17D5 CALL	_CardKeyUp
    02D10 C024      RJMP	0x2D35
(1930) 	  case OPTIONPAGE:   OptionKeyUp();break;
    02D11 940E 21A6 CALL	_OptionKeyUp
    02D13 C021      RJMP	0x2D35
(1931) 	  case PARASPAGE:	 ParasKeyUp();break;
    02D14 DE1F      RCALL	_ParasKeyUp
    02D15 C01F      RJMP	0x2D35
(1932) 	  case VERSIONPAGE:  VersionKeyUp();break;
    02D16 DE7C      RCALL	_VersionKeyUp
    02D17 C01D      RJMP	0x2D35
(1933) 	  case RESETPAGE:	 ResetKeyUp();break;
    02D18 DEDA      RCALL	_ResetKeyUp
    02D19 C01B      RJMP	0x2D35
(1934) 	  case PASSWORDPAGE: PasswordKeyUp();break;
    02D1A 940E 1B17 CALL	_PasswordKeyUp
    02D1C C018      RJMP	0x2D35
(1935) 	  case SYSTEMPAGE:   SystemKeyUp();break;
    02D1D 940E 1F78 CALL	_SystemKeyUp
    02D1F C015      RJMP	0x2D35
(1936) 	  case WORKTIMEPAGE: ClearCountKeyUp();break;
    02D20 940E 201F CALL	_ClearCountKeyUp
    02D22 C012      RJMP	0x2D35
(1937) 	  case PARMPAGE:     ParmKeyUp();break;
    02D23 940E 207D CALL	_ParmKeyUp
    02D25 C00F      RJMP	0x2D35
(1938) 	  case ICCARDPAGE:   CardSetKeyUp();break;
    02D26 940E 220C CALL	_CardSetKeyUp
    02D28 C00C      RJMP	0x2D35
(1939) 	  case PASSSETPAGE:  PassSetKeyUp();break;
    02D29 940E 2487 CALL	_PassSetKeyUp
    02D2B C009      RJMP	0x2D35
(1940) 	  case WORKPAGE:     WorkKeyUp();break;  
    02D2C D938      RCALL	_WorkKeyUp
    02D2D C007      RJMP	0x2D35
(1941)     case ultrasonicpage: ULKeyUP();break;               
    02D2E DCA5      RCALL	_ULKeyUP
    02D2F C005      RJMP	0x2D35
(1942) 	  default:WorkKeyUp(); break;
    02D30 D934      RCALL	_WorkKeyUp
(1943) 	}
(1944)   }
    02D31 C003      RJMP	0x2D35
(1945)   else Touch_Event=TOUCH_NULL;
    02D32 2422      CLR	R2
    02D33 9220 03A3 STS	Touch_Event,R2
(1946)   dispose_data();
    02D35 940E 422A CALL	_dispose_data
    02D37 9159      LD	R21,Y+
    02D38 9149      LD	R20,Y+
    02D39 9508      RET
FILE: E:\1.JD_Project\21.Android-360\1.Android-360Code\App\Init.c
(0001) 
(0002) #include "includes.h"
(0003) //const unsigned char Ver[]={"MCU Ver:MED360.1.6.150616\0"};
(0004) //const unsigned char Ver[]={"MCU Ver:MED360.1.8.180329\0"};
(0005) //const unsigned char Ver[]={"MCU Ver:MED360.1.9.180510\0"};//增加后台射频百分比调节
(0006)   const unsigned char Ver[]={"DIWEN 1.0"};//迪文软件版本
(0007)   const unsigned char HARDVer[]={"FUYA MAN-1"};//硬件版本
(0008)   const unsigned char HEXVer[]={"MED360.2.1"};//软件版本
(0009) 
(0010) //1.后台增加工作累计时间清零功能
(0011) //2.后台增加取消所有工作模式，延时自动进入界面功能
(0012) //3.后台增加paras display功能，开启关闭压力、时间和累计工作时间显示
(0013) //4.后台增加version显示功能
(0014) //5.后台增加出厂复位功能
(0015) // by hanjingyang 20170920
(0016) //const unsigned char Ver[]={"System version v2.2.10.111001_beta\0"};
(0017) 
(0018) char lcd_ver[4]={0};
(0019) 
(0020) void uart0_init(void)
(0021) {
(0022)  UCSR0B = 0x00; 	 	   		 	  		 				//disable while setting baud rate
_uart0_init:
    02D3A 2422      CLR	R2
    02D3B B82A      OUT	0x0A,R2
(0023)  UCSR0A = 0x00;
    02D3C B82B      OUT	0x0B,R2
(0024)  UCSR0C = 0x06;
    02D3D E086      LDI	R24,6
    02D3E 9380 0095 STS	0x95,R24
(0025)  UBRR0L = 0x19;  //0x19; //set baud rate lo 38400 (0.2%)
    02D40 E189      LDI	R24,0x19
    02D41 B989      OUT	0x09,R24
(0026)  UBRR0H = 0x00; //set baud rate hi
    02D42 9220 0090 STS	0x90,R2
(0027)  UCSR0B = 0xD8;
    02D44 ED88      LDI	R24,0xD8
    02D45 B98A      OUT	0x0A,R24
    02D46 9508      RET
(0028)  //UBRR0L = 0x10; //set baud rate lo 57600(2.1%)
(0029)  //UBRR0H = 0x00; //set baud rate hi
(0030)  //UCSR0B = 0xD8;
(0031)  //UBRR0L = 0x0C; //set baud rate lo 76800 (0.2%)
(0032)  //UBRR0H = 0x00; //set baud rate hi
(0033)  //UCSR0B = 0x18;
(0034)  //UBRR0L = 0x8;  //0x19; //set baud rate lo  115200(3.7%)
(0035)  //UBRR0H = 0x00; 				//set baud rate hi
(0036)  //UCSR0B = 0xD8;
(0037) }
(0038) void uart1_init(void)
(0039) {
(0040)  UCSR1B = 0x00; //disable while setting baud rate
_uart1_init:
    02D47 2422      CLR	R2
    02D48 9220 009A STS	0x9A,R2
(0041)  UCSR1A = 0x00;
    02D4A 9220 009B STS	0x9B,R2
(0042)  UCSR1C = 0x06;
    02D4C E086      LDI	R24,6
    02D4D 9380 009D STS	0x9D,R24
(0043)  UBRR1L = 0x67; //set baud rate lo 9600
    02D4F E687      LDI	R24,0x67
    02D50 9380 0099 STS	0x99,R24
(0044)  UBRR1H = 0x00; //set baud rate hi
    02D52 9220 0098 STS	0x98,R2
(0045)  UCSR1B = 0xD8;
    02D54 ED88      LDI	R24,0xD8
    02D55 9380 009A STS	0x9A,R24
    02D57 9508      RET
(0046)  //UBRR1L = 0x19;  //0x19; //set baud rate lo  38400 (0.2%)
(0047)  //UBRR1H = 0x00; //set baud rate hi
(0048)  //UCSR1B = 0xD8;
(0049)  //UBRR1L = 0x10; //set baud rate lo 57600(2.1%)
(0050)  //UBRR1H = 0x00; //set baud rate hi
(0051)  //UCSR1B = 0xD8;
(0052)  //UBRR1L = 0x0C; //set baud rate lo 76800(0.2%)
(0053)  //UBRR1H = 0x00; //set baud rate hi
(0054)  //UCSR1B = 0x18;
(0055)  //UBRR1L = 0x08; //set baud rate lo 115200(3.7%)
(0056)  //UBRR1H = 0x00; //set baud rate hi
(0057)  //UCSR1B = 0xD8;
(0058) }
(0059) void timer0_init(void)
(0060) {
(0061)   TCCR0 = 0x00; //stop
_timer0_init:
    02D58 2422      CLR	R2
    02D59 BE23      OUT	0x33,R2
(0062)   ASSR  = 0x00; //set async mode
    02D5A BE20      OUT	0x30,R2
(0063)   TCNT0 = 0x00; //set count
    02D5B BE22      OUT	0x32,R2
(0064)   OCR0  = 0x9C;
    02D5C E98C      LDI	R24,0x9C
    02D5D BF81      OUT	0x31,R24
(0065)   TCCR0 = 0x07; //start timer
    02D5E E087      LDI	R24,7
    02D5F BF83      OUT	0x33,R24
    02D60 9508      RET
(0066) }
(0067) void timer1_init(void)
(0068) {
(0069)   TCCR1B = 0x00; //stop
_timer1_init:
    02D61 2422      CLR	R2
    02D62 BC2E      OUT	0x2E,R2
(0070)   TCNT1H = 0xFB; //setup
    02D63 EF8B      LDI	R24,0xFB
    02D64 BD8D      OUT	0x2D,R24
(0071)   TCNT1L = 0x1E;
    02D65 E18E      LDI	R24,0x1E
    02D66 BD8C      OUT	0x2C,R24
(0072)   OCR1AH = 0x04;
    02D67 E084      LDI	R24,4
    02D68 BD8B      OUT	0x2B,R24
(0073)   OCR1AL = 0xE2;
    02D69 EE82      LDI	R24,0xE2
    02D6A BD8A      OUT	0x2A,R24
(0074)   OCR1BH = 0x04;
    02D6B E084      LDI	R24,4
    02D6C BD89      OUT	0x29,R24
(0075)   OCR1BL = 0xE2;
    02D6D EE82      LDI	R24,0xE2
    02D6E BD88      OUT	0x28,R24
(0076)   OCR1CH = 0x04;
    02D6F E084      LDI	R24,4
    02D70 9380 0079 STS	0x79,R24
(0077)   OCR1CL = 0xE2;
    02D72 EE82      LDI	R24,0xE2
    02D73 9380 0078 STS	0x78,R24
(0078)   ICR1H  = 0x04;
    02D75 E084      LDI	R24,4
    02D76 BD87      OUT	0x27,R24
(0079)   ICR1L  = 0xE2;
    02D77 EE82      LDI	R24,0xE2
    02D78 BD86      OUT	0x26,R24
(0080)   TCCR1A = 0x00;
    02D79 BC2F      OUT	0x2F,R2
(0081)   TCCR1B = 0x03; //start Timer
    02D7A E083      LDI	R24,3
    02D7B BD8E      OUT	0x2E,R24
    02D7C 9508      RET
(0082) }
(0083) void adc_init(void)
(0084) {
(0085)  ADCSRA = 0x00;   //disable adc
_adc_init:
    02D7D 2422      CLR	R2
    02D7E B826      OUT	0x06,R2
(0086)  ADMUX=0xe0;
    02D7F EE80      LDI	R24,0xE0
    02D80 B987      OUT	0x07,R24
(0087)  ACSR   = 0x80;
    02D81 E880      LDI	R24,0x80
    02D82 B988      OUT	0x08,R24
(0088)  ADCSRA = 0x87;
    02D83 E887      LDI	R24,0x87
    02D84 B986      OUT	0x06,R24
    02D85 9508      RET
(0089) }
(0090) //TIMER2 initialize - prescale:64
(0091) // WGM: PWM Fast
(0092) // desired value: 500Hz
(0093) // actual value: 488.281Hz (2.4%)
(0094) void timer2_init(void)
(0095) {
(0096)  TCCR2 = 0x00;     //stop
_timer2_init:
    02D86 2422      CLR	R2
    02D87 BC25      OUT	0x25,R2
(0097)  TCNT2 = 0x01;       //setup01
    02D88 E081      LDI	R24,1
    02D89 BD84      OUT	0x24,R24
(0098)  OCR2  = 0xFF;
    02D8A EF8F      LDI	R24,0xFF
    02D8B BD83      OUT	0x23,R24
    02D8C 9508      RET
(0099) 
(0100)  //TCCR2 = 0x79; 
(0101) }
(0102) //TIMER3 initialize - prescale:64
(0103) // WGM: 1) PWM 8bit Phz correct, TOP=0x00FF
(0104) // desired value: 245Hz
(0105) // actual value: 245.098Hz (0.0%)
(0106) void timer3_init(void)
(0107) {
(0108)  TCCR3B = 0x00; //stop
_timer3_init:
    02D8D 2422      CLR	R2
    02D8E 9220 008A STS	0x8A,R2
(0109)  TCNT3H = 0xFF; //setup
    02D90 EF8F      LDI	R24,0xFF
    02D91 9380 0089 STS	0x89,R24
(0110)  TCNT3L = 0x01;
    02D93 E081      LDI	R24,1
    02D94 9380 0088 STS	0x88,R24
(0111)  OCR3AH = 0x00;
    02D96 9220 0087 STS	0x87,R2
(0112)  OCR3AL = 0xFF;
    02D98 EF8F      LDI	R24,0xFF
    02D99 9380 0086 STS	0x86,R24
(0113)  OCR3BH = 0x00;
    02D9B 9220 0085 STS	0x85,R2
(0114)  OCR3BL = 0xFF;
    02D9D 9380 0084 STS	0x84,R24
(0115)  OCR3CH = 0x00;
    02D9F 9220 0083 STS	0x83,R2
(0116)  OCR3CL = 0xFF;
    02DA1 9380 0082 STS	0x82,R24
(0117)  ICR3H  = 0x00;
    02DA3 9220 0081 STS	0x81,R2
(0118)  ICR3L  = 0xFF;
    02DA5 9380 0080 STS	0x80,R24
(0119)  TCCR3A = 0x01;
    02DA7 E081      LDI	R24,1
    02DA8 9380 008B STS	0x8B,R24
(0120)  TCCR3B = 0x0D; //start Timer
    02DAA E08D      LDI	R24,0xD
    02DAB 9380 008A STS	0x8A,R24
    02DAD 9508      RET
(0121) }
(0122) void port_init(void)
(0123) {
(0124)  PORTA = 0xFF;
_port_init:
    02DAE EF8F      LDI	R24,0xFF
    02DAF BB8B      OUT	0x1B,R24
(0125)  DDRA  = 0xFF;
    02DB0 BB8A      OUT	0x1A,R24
(0126)  PORTB = 0xFF;
    02DB1 BB88      OUT	0x18,R24
(0127)  DDRB  = 0xFF;
    02DB2 BB87      OUT	0x17,R24
(0128)  PORTC = 0xFF;   
    02DB3 BB85      OUT	0x15,R24
(0129)  DDRC  = 0xFF;
    02DB4 BB84      OUT	0x14,R24
(0130)  PORTD = 0xFF;
    02DB5 BB82      OUT	0x12,R24
(0131)  DDRD  = 0x0F;
    02DB6 E08F      LDI	R24,0xF
    02DB7 BB81      OUT	0x11,R24
(0132)  PORTE = 0xFF;
    02DB8 EF8F      LDI	R24,0xFF
    02DB9 B983      OUT	0x03,R24
(0133)  DDRE  = 0xFF;
    02DBA B982      OUT	0x02,R24
(0134)  PORTF = 0xFF;
    02DBB 9380 0062 STS	0x62,R24
(0135)  DDRF  = 0xF0;
    02DBD EF80      LDI	R24,0xF0
    02DBE 9380 0061 STS	0x61,R24
(0136)  PORTG = 0xFF;
    02DC0 EF8F      LDI	R24,0xFF
    02DC1 9380 0065 STS	0x65,R24
(0137)  DDRG  = 0xFE;
    02DC3 EF8E      LDI	R24,0xFE
    02DC4 9380 0064 STS	0x64,R24
(0138)  RXD;
    02DC6 9891      CBI	0x12,1
    02DC7 9508      RET
(0139) }
(0140) //call this routine to initialize all peripherals
(0141) void init_devices(void)
(0142) {   
(0143)  CLI(); 
_init_devices:
    02DC8 94F8      BCLR	7
(0144)  XDIV  = 0x00;                              		  //xtal divider
    02DC9 2422      CLR	R2
    02DCA BE2C      OUT	0x3C,R2
(0145)  XMCRA = 0x00;                                  	  //external memory
    02DCB 9220 006D STS	0x6D,R2
(0146)  XMCRB = 0x00;
    02DCD 9220 006C STS	0x6C,R2
(0147)  port_init();       
    02DCF DFDE      RCALL	_port_init
(0148)  adc_init();                               			  //uart0_init();
    02DD0 DFAC      RCALL	_adc_init
(0149)  uart0_init();
    02DD1 DF68      RCALL	_uart0_init
(0150)  uart1_init();
    02DD2 DF74      RCALL	_uart1_init
(0151)  timer0_init();
    02DD3 DF84      RCALL	_timer0_init
(0152)  timer1_init();
    02DD4 DF8C      RCALL	_timer1_init
(0153)  timer2_init();
    02DD5 DFB0      RCALL	_timer2_init
(0154)  timer3_init();
    02DD6 DFB6      RCALL	_timer3_init
(0155)  MCUCR = 0x00;
    02DD7 2422      CLR	R2
    02DD8 BE25      OUT	0x35,R2
(0156)  EICRA = 0x00;                                  	  //extended ext ints
    02DD9 9220 006A STS	0x6A,R2
(0157)  EICRB = 0x00;                                  	  //extended ext ints
    02DDB BE2A      OUT	0x3A,R2
(0158)  EIMSK = 0x00;
    02DDC BE29      OUT	0x39,R2
(0159)  TIMSK = 0xc2;                                        //timer interrupt sources
    02DDD EC82      LDI	R24,0xC2
    02DDE BF87      OUT	0x37,R24
(0160) // cool_time =25;
(0161)  ETIMSK = 0x06;   
    02DDF E086      LDI	R24,6
    02DE0 9380 007D STS	0x7D,R24
(0162)  start_pwm();                                    //extended timer interrupt sources       
    02DE2 940E 2F9B CALL	_start_pwm
(0163)  SEI();          									  //re-enable interrupts
    02DE4 9478      BSET	7
    02DE5 9508      RET
(0164) }
(0165) void cartoon(void)
(0166) {
(0167)   static unsigned char x=0;
(0168)   x=(x+1)%32;
_cartoon:
    02DE6 E210      LDI	R17,0x20
    02DE7 9100 03C2 LDS	R16,Init.c:x
    02DE9 5F0F      SUBI	R16,0xFF
    02DEA 940E 448D CALL	mod8u
    02DEC 9300 03C2 STS	Init.c:x,R16
(0169)   //cut_pic(0,x,300,170,500,530,300,170);
(0170)   dis_pic(x);
    02DEE 940E 3F13 CALL	_dis_pic
(0171)   Sound_Count=5;
    02DF0 E085      LDI	R24,5
    02DF1 9380 0120 STS	Sound_Count,R24
    02DF3 9508      RET
_DisVer:
    02DF4 972C      SBIW	R28,0xC
(0172) }
(0173) void DisVer(void)
(0174) {
(0175) 	Text[0]='L';
    02DF5 E48C      LDI	R24,0x4C
    02DF6 9380 03FE STS	Text,R24
(0176) 	Text[1]='C';
    02DF8 E483      LDI	R24,0x43
    02DF9 9380 03FF STS	Text+1,R24
(0177) 	Text[2]='D';
    02DFB E484      LDI	R24,0x44
    02DFC 9380 0400 STS	Text+2,R24
(0178) 	Text[3]=' ';
    02DFE E280      LDI	R24,0x20
    02DFF 9380 0401 STS	Text+3,R24
(0179) 	Text[4]='V';
    02E01 E586      LDI	R24,0x56
    02E02 9380 0402 STS	Text+4,R24
(0180) 	Text[5]='e';
    02E04 E685      LDI	R24,0x65
    02E05 9380 0403 STS	Text+5,R24
(0181) 	Text[6]='r';
    02E07 E782      LDI	R24,0x72
    02E08 9380 0404 STS	Text+6,R24
(0182) 	Text[7]=':';
    02E0A E38A      LDI	R24,0x3A
    02E0B 9380 0405 STS	Text+7,R24
(0183) 	Text[8]=lcd_ver[0];
    02E0D 9020 03BE LDS	R2,lcd_ver
    02E0F 9220 0406 STS	Text+8,R2
(0184)   Text[9]=lcd_ver[1];
    02E11 9020 03BF LDS	R2,lcd_ver+1
    02E13 9220 0407 STS	Text+9,R2
(0185) 	Text[10]=lcd_ver[2];
    02E15 9020 03C0 LDS	R2,lcd_ver+2
    02E17 9220 0408 STS	Text+10,R2
(0186) 	Text[11]=lcd_ver[3];
    02E19 9020 03C1 LDS	R2,lcd_ver+3
    02E1B 9220 0409 STS	Text+11,R2
(0187) 	Text[12]='\0';
    02E1D 2422      CLR	R2
    02E1E 9220 040A STS	Text+12,R2
(0188)   print_texts(0,550,0,0x81,2,0xf800,0xffff,Text);
    02E20 EF8E      LDI	R24,0xFE
    02E21 E093      LDI	R25,3
    02E22 879B      STD	Y+11,R25
    02E23 878A      STD	Y+10,R24
    02E24 EF8F      LDI	R24,0xFF
    02E25 EF9F      LDI	R25,0xFF
    02E26 8799      STD	Y+9,R25
    02E27 8788      STD	Y+8,R24
    02E28 E080      LDI	R24,0
    02E29 EF98      LDI	R25,0xF8
    02E2A 839F      STD	Y+7,R25
    02E2B 838E      STD	Y+6,R24
    02E2C E082      LDI	R24,2
    02E2D 838C      STD	Y+4,R24
    02E2E E881      LDI	R24,0x81
    02E2F 838A      STD	Y+2,R24
    02E30 8228      ST	Y,R2
    02E31 E226      LDI	R18,0x26
    02E32 E032      LDI	R19,2
    02E33 2700      CLR	R16
    02E34 2711      CLR	R17
    02E35 940E 3F08 CALL	_print_texts
(0189)   print_consttexts(0,570,0,0x81,2,0xf800,0xffff,Ver); 
    02E37 E185      LDI	R24,0x15
    02E38 E096      LDI	R25,6
    02E39 879B      STD	Y+11,R25
    02E3A 878A      STD	Y+10,R24
    02E3B EF8F      LDI	R24,0xFF
    02E3C EF9F      LDI	R25,0xFF
    02E3D 8799      STD	Y+9,R25
    02E3E 8788      STD	Y+8,R24
    02E3F E080      LDI	R24,0
    02E40 EF98      LDI	R25,0xF8
    02E41 839F      STD	Y+7,R25
    02E42 838E      STD	Y+6,R24
    02E43 E082      LDI	R24,2
    02E44 838C      STD	Y+4,R24
    02E45 E881      LDI	R24,0x81
    02E46 838A      STD	Y+2,R24
    02E47 2422      CLR	R2
    02E48 8228      ST	Y,R2
    02E49 E32A      LDI	R18,0x3A
    02E4A E032      LDI	R19,2
    02E4B 2700      CLR	R16
    02E4C 2711      CLR	R17
    02E4D 940E 3F09 CALL	_print_consttexts
    02E4F 962C      ADIW	R28,0xC
    02E50 9508      RET
_init_system:
  t                    --> Y,+2
  i                    --> R20
    02E51 934A      ST	-Y,R20
    02E52 9726      SBIW	R28,6
(0190) }
(0191) void init_system(void)
(0192) {
(0193)   unsigned long t;
(0194)   unsigned char i;
(0195) 
(0196)   CLI();//关闭中断？
    02E53 94F8      BCLR	7
(0197)   init_devices();//用到的外设初始化
    02E54 DF73      RCALL	_init_devices
(0198)   SEI(); //使能中断
    02E55 9478      BSET	7
(0199)   DwinWriteWord(ADDR_BOOTINGBAR, 1);//迪文屏通信函数
    02E56 E021      LDI	R18,1
    02E57 E030      LDI	R19,0
    02E58 E000      LDI	R16,0
    02E59 E110      LDI	R17,0x10
    02E5A 940E 366D CALL	_DwinWriteWord
(0200)   POWER5_OFF;
    02E5C 9ADD      SBI	0x1B,5
(0201)   POWER1_OFF;POWER2_OFF;POWER3_OFF;POWER4_OFF;
    02E5D 9AD9      SBI	0x1B,1
    02E5E 9ADA      SBI	0x1B,2
    02E5F 9ADB      SBI	0x1B,3
    02E60 9ADC      SBI	0x1B,4
(0202)   EEPROMReadBytes(SoundSetAddr,&SoundSet,1);
    02E61 E081      LDI	R24,1
    02E62 E090      LDI	R25,0
    02E63 8399      STD	Y+1,R25
    02E64 8388      ST	Y,R24
    02E65 E12F      LDI	R18,0x1F
    02E66 E031      LDI	R19,1
    02E67 E009      LDI	R16,0x9
    02E68 E010      LDI	R17,0
    02E69 940E 45B0 CALL	_EEPROMReadBytes
(0203)   if(SoundSet>10) 
    02E6B E08A      LDI	R24,0xA
    02E6C 9020 011F LDS	R2,SoundSet
    02E6E 1582      CP	R24,R2
    02E6F F460      BCC	0x2E7C
(0204)   {
(0205)     SoundSet=10;
    02E70 9380 011F STS	SoundSet,R24
(0206) 	EEPROMWriteBytes(SoundSetAddr,&SoundSet,1);
    02E72 E081      LDI	R24,1
    02E73 E090      LDI	R25,0
    02E74 8399      STD	Y+1,R25
    02E75 8388      ST	Y,R24
    02E76 E12F      LDI	R18,0x1F
    02E77 E031      LDI	R19,1
    02E78 E009      LDI	R16,0x9
    02E79 E010      LDI	R17,0
    02E7A 940E 45CB CALL	_EEPROMWriteBytes
(0207)   }
(0208)   for (i = 0; i < sizeof(Ver); i++){SettingDdata.softwareVersion[i] = Ver[i];}
    02E7C 2744      CLR	R20
    02E7D C00F      RJMP	0x2E8D
    02E7E E185      LDI	R24,0x15
    02E7F E096      LDI	R25,6
    02E80 2FE4      MOV	R30,R20
    02E81 27FF      CLR	R31
    02E82 0FE8      ADD	R30,R24
    02E83 1FF9      ADC	R31,R25
    02E84 9026      ELPM	R2,Z
    02E85 E584      LDI	R24,0x54
    02E86 E098      LDI	R25,0x8
    02E87 2FE4      MOV	R30,R20
    02E88 27FF      CLR	R31
    02E89 0FE8      ADD	R30,R24
    02E8A 1FF9      ADC	R31,R25
    02E8B 8220      ST	Z,R2
    02E8C 9543      INC	R20
    02E8D 304A      CPI	R20,0xA
    02E8E F378      BCS	0x2E7E
(0209)   EEPROMWriteBytes(softwareVersionAddr,&SettingDdata.softwareVersion,16);//迪文软件版本
    02E8F E180      LDI	R24,0x10
    02E90 E090      LDI	R25,0
    02E91 8399      STD	Y+1,R25
    02E92 8388      ST	Y,R24
    02E93 E524      LDI	R18,0x54
    02E94 E038      LDI	R19,0x8
    02E95 E802      LDI	R16,0x82
    02E96 E010      LDI	R17,0
    02E97 940E 45CB CALL	_EEPROMWriteBytes
(0210)   for (i = 0; i < sizeof(HARDVer); i++){SettingDdata.hardwareVersion[i] = HARDVer[i];}
    02E99 2744      CLR	R20
    02E9A C00F      RJMP	0x2EAA
    02E9B E18F      LDI	R24,0x1F
    02E9C E096      LDI	R25,6
    02E9D 2FE4      MOV	R30,R20
    02E9E 27FF      CLR	R31
    02E9F 0FE8      ADD	R30,R24
    02EA0 1FF9      ADC	R31,R25
    02EA1 9026      ELPM	R2,Z
    02EA2 E684      LDI	R24,0x64
    02EA3 E098      LDI	R25,0x8
    02EA4 2FE4      MOV	R30,R20
    02EA5 27FF      CLR	R31
    02EA6 0FE8      ADD	R30,R24
    02EA7 1FF9      ADC	R31,R25
    02EA8 8220      ST	Z,R2
    02EA9 9543      INC	R20
    02EAA 304B      CPI	R20,0xB
    02EAB F378      BCS	0x2E9B
(0211)   EEPROMWriteBytes(hardwareVersionAddr,&SettingDdata.hardwareVersion,16);//主板硬件版本
    02EAC E180      LDI	R24,0x10
    02EAD E090      LDI	R25,0
    02EAE 8399      STD	Y+1,R25
    02EAF 8388      ST	Y,R24
    02EB0 E624      LDI	R18,0x64
    02EB1 E038      LDI	R19,0x8
    02EB2 E902      LDI	R16,0x92
    02EB3 E010      LDI	R17,0
    02EB4 940E 45CB CALL	_EEPROMWriteBytes
(0212)   for (i = 0; i < sizeof(HEXVer); i++){SettingDdata.hexVersion[i] = HEXVer[i];}
    02EB6 2744      CLR	R20
    02EB7 C00F      RJMP	0x2EC7
    02EB8 E28A      LDI	R24,0x2A
    02EB9 E096      LDI	R25,6
    02EBA 2FE4      MOV	R30,R20
    02EBB 27FF      CLR	R31
    02EBC 0FE8      ADD	R30,R24
    02EBD 1FF9      ADC	R31,R25
    02EBE 9026      ELPM	R2,Z
    02EBF E784      LDI	R24,0x74
    02EC0 E098      LDI	R25,0x8
    02EC1 2FE4      MOV	R30,R20
    02EC2 27FF      CLR	R31
    02EC3 0FE8      ADD	R30,R24
    02EC4 1FF9      ADC	R31,R25
    02EC5 8220      ST	Z,R2
    02EC6 9543      INC	R20
    02EC7 304B      CPI	R20,0xB
    02EC8 F378      BCS	0x2EB8
(0213)   EEPROMWriteBytes(hexVersionAddr,&SettingDdata.hexVersion,16);//主板软件版本
    02EC9 E180      LDI	R24,0x10
    02ECA E090      LDI	R25,0
    02ECB 8399      STD	Y+1,R25
    02ECC 8388      ST	Y,R24
    02ECD E724      LDI	R18,0x74
    02ECE E038      LDI	R19,0x8
    02ECF EA02      LDI	R16,0xA2
    02ED0 E010      LDI	R17,0
    02ED1 940E 45CB CALL	_EEPROMWriteBytes
(0214) 
(0215)   EEPROMReadBytes(snNumberAddr,&SettingDdata.snNumber,16);//SN号
    02ED3 E180      LDI	R24,0x10
    02ED4 E090      LDI	R25,0
    02ED5 8399      STD	Y+1,R25
    02ED6 8388      ST	Y,R24
    02ED7 E824      LDI	R18,0x84
    02ED8 E038      LDI	R19,0x8
    02ED9 EB02      LDI	R16,0xB2
    02EDA E010      LDI	R17,0
    02EDB 940E 45B0 CALL	_EEPROMReadBytes
(0216) 
(0217)   EEPROMReadBytes(SET_HANDLEFIVEAddr,&SettingDdata.SET_HANDLEFIVE,1);//5号爆脂手柄选择
    02EDD E081      LDI	R24,1
    02EDE E090      LDI	R25,0
    02EDF 8399      STD	Y+1,R25
    02EE0 8388      ST	Y,R24
    02EE1 E928      LDI	R18,0x98
    02EE2 E038      LDI	R19,0x8
    02EE3 EC07      LDI	R16,0xC7
    02EE4 E010      LDI	R17,0
    02EE5 940E 45B0 CALL	_EEPROMReadBytes
(0218)   if(SettingDdata.SET_HANDLEFIVE>1||SettingDdata.SET_HANDLEFIVE<0)
    02EE7 E081      LDI	R24,1
    02EE8 9020 0898 LDS	R2,SettingDdata+68
    02EEA 1582      CP	R24,R2
    02EEB F018      BCS	0x2EEF
    02EEC 2D82      MOV	R24,R2
    02EED 3080      CPI	R24,0
    02EEE F468      BCC	0x2EFC
(0219)   {SettingDdata.SET_HANDLEFIVE=0;EEPROMWriteBytes(SET_HANDLEFIVEAddr,&SettingDdata.SET_HANDLEFIVE,1);}
    02EEF 2422      CLR	R2
    02EF0 9220 0898 STS	SettingDdata+68,R2
    02EF2 E081      LDI	R24,1
    02EF3 E090      LDI	R25,0
    02EF4 8399      STD	Y+1,R25
    02EF5 8388      ST	Y,R24
    02EF6 E928      LDI	R18,0x98
    02EF7 E038      LDI	R19,0x8
    02EF8 EC07      LDI	R16,0xC7
    02EF9 E010      LDI	R17,0
    02EFA 940E 45CB CALL	_EEPROMWriteBytes
(0220)   EEPROMReadBytes(SET_WORKTIMEAddr,&SettingDdata.SET_WORKTIME,1);//治疗时间读取
    02EFC E081      LDI	R24,1
    02EFD E090      LDI	R25,0
    02EFE 8399      STD	Y+1,R25
    02EFF 8388      ST	Y,R24
    02F00 E929      LDI	R18,0x99
    02F01 E038      LDI	R19,0x8
    02F02 EC08      LDI	R16,0xC8
    02F03 E010      LDI	R17,0
    02F04 940E 45B0 CALL	_EEPROMReadBytes
(0221)   EEPROMReadBytes(SET_WORKPOWERAddr,&SettingDdata.SET_WORKPOWER,1);//治疗能量百分比读取
    02F06 E081      LDI	R24,1
    02F07 E090      LDI	R25,0
    02F08 8399      STD	Y+1,R25
    02F09 8388      ST	Y,R24
    02F0A E92A      LDI	R18,0x9A
    02F0B E038      LDI	R19,0x8
    02F0C EC09      LDI	R16,0xC9
    02F0D E010      LDI	R17,0
    02F0E 940E 45B0 CALL	_EEPROMReadBytes
(0222)   RfPer=SettingDdata.SET_WORKPOWER;
    02F10 9020 089A LDS	R2,SettingDdata+70
    02F12 9220 07D0 STS	RfPer,R2
(0223)   if(RfPer>100){RfPer=100;EEPROMWriteBytes(SET_WORKPOWERAddr,&SettingDdata.SET_WORKPOWER,1);}
    02F14 E684      LDI	R24,0x64
    02F15 1582      CP	R24,R2
    02F16 F460      BCC	0x2F23
    02F17 9380 07D0 STS	RfPer,R24
    02F19 E081      LDI	R24,1
    02F1A E090      LDI	R25,0
    02F1B 8399      STD	Y+1,R25
    02F1C 8388      ST	Y,R24
    02F1D E92A      LDI	R18,0x9A
    02F1E E038      LDI	R19,0x8
    02F1F EC09      LDI	R16,0xC9
    02F20 E010      LDI	R17,0
    02F21 940E 45CB CALL	_EEPROMWriteBytes
(0224)   if(RfPer<0){RfPer=100;EEPROMWriteBytes(SET_WORKPOWERAddr,&SettingDdata.SET_WORKPOWER,1);}
    02F23 9180 07D0 LDS	R24,RfPer
    02F25 3080      CPI	R24,0
    02F26 F468      BCC	0x2F34
    02F27 E684      LDI	R24,0x64
    02F28 9380 07D0 STS	RfPer,R24
    02F2A E081      LDI	R24,1
    02F2B E090      LDI	R25,0
    02F2C 8399      STD	Y+1,R25
    02F2D 8388      ST	Y,R24
    02F2E E92A      LDI	R18,0x9A
    02F2F E038      LDI	R19,0x8
    02F30 EC09      LDI	R16,0xC9
    02F31 E010      LDI	R17,0
    02F32 940E 45CB CALL	_EEPROMWriteBytes
(0225)   
(0226)   MACHINE_STATE.WORK_STATE=0;
    02F34 2422      CLR	R2
    02F35 9220 089C STS	MACHINE_STATE+1,R2
(0227)   MACHINE_STATE.HANDLE_ID=0;
    02F37 9220 089B STS	MACHINE_STATE,R2
(0228)   delay_ms(2200);
    02F39 E908      LDI	R16,0x98
    02F3A E018      LDI	R17,0x8
    02F3B 940E 06B7 CALL	_delay_ms
(0229)   EEPROMReadBytes(SET_HANDLEONEAddr,&SettingDdata.SET_HANDLEONE,1);//1号手柄选择
    02F3D E081      LDI	R24,1
    02F3E E090      LDI	R25,0
    02F3F 8399      STD	Y+1,R25
    02F40 8388      ST	Y,R24
    02F41 E924      LDI	R18,0x94
    02F42 E038      LDI	R19,0x8
    02F43 EC03      LDI	R16,0xC3
    02F44 E010      LDI	R17,0
    02F45 940E 45B0 CALL	_EEPROMReadBytes
(0230)   if(SettingDdata.SET_HANDLEONE>=1)
    02F47 9180 0894 LDS	R24,SettingDdata+64
    02F49 3081      CPI	R24,1
    02F4A F098      BCS	0x2F5E
(0231)   {SettingDdata.SET_HANDLEONE=1;DwinToPage(PAGE_HANDLECHOOSE1); MACHINE_STATE.WORK_PAGE=PAGE_HANDLECHOOSE1;EEPROMWriteBytes(SET_HANDLEONEAddr,&SettingDdata.SET_HANDLEONE,1);}//有一号手柄跳转到0页
    02F4B E081      LDI	R24,1
    02F4C 9380 0894 STS	SettingDdata+64,R24
    02F4E 2700      CLR	R16
    02F4F 940E 3601 CALL	_DwinToPage
    02F51 2422      CLR	R2
    02F52 9220 089F STS	MACHINE_STATE+4,R2
    02F54 E081      LDI	R24,1
    02F55 E090      LDI	R25,0
    02F56 8399      STD	Y+1,R25
    02F57 8388      ST	Y,R24
    02F58 E924      LDI	R18,0x94
    02F59 E038      LDI	R19,0x8
    02F5A EC03      LDI	R16,0xC3
    02F5B E010      LDI	R17,0
    02F5C 940E 45CB CALL	_EEPROMWriteBytes
(0232)   if(SettingDdata.SET_HANDLEONE<0)
    02F5E 9180 0894 LDS	R24,SettingDdata+64
    02F60 3080      CPI	R24,0
    02F61 F498      BCC	0x2F75
(0233)   {SettingDdata.SET_HANDLEONE=1;DwinToPage(PAGE_HANDLECHOOSE1); MACHINE_STATE.WORK_PAGE=PAGE_HANDLECHOOSE1;EEPROMWriteBytes(SET_HANDLEONEAddr,&SettingDdata.SET_HANDLEONE,1);}//有一号手柄跳转到0页
    02F62 E081      LDI	R24,1
    02F63 9380 0894 STS	SettingDdata+64,R24
    02F65 2700      CLR	R16
    02F66 940E 3601 CALL	_DwinToPage
    02F68 2422      CLR	R2
    02F69 9220 089F STS	MACHINE_STATE+4,R2
    02F6B E081      LDI	R24,1
    02F6C E090      LDI	R25,0
    02F6D 8399      STD	Y+1,R25
    02F6E 8388      ST	Y,R24
    02F6F E924      LDI	R18,0x94
    02F70 E038      LDI	R19,0x8
    02F71 EC03      LDI	R16,0xC3
    02F72 E010      LDI	R17,0
    02F73 940E 45CB CALL	_EEPROMWriteBytes
(0234)   if(SettingDdata.SET_HANDLEONE==0)
    02F75 9020 0894 LDS	R2,SettingDdata+64
    02F77 2022      TST	R2
    02F78 F431      BNE	0x2F7F
(0235)   {DwinToPage(PAGE_HANDLECHOOSE4); MACHINE_STATE.WORK_PAGE=PAGE_HANDLECHOOSE4;}//无一号手柄跳转到23页
    02F79 E107      LDI	R16,0x17
    02F7A 940E 3601 CALL	_DwinToPage
    02F7C E187      LDI	R24,0x17
    02F7D 9380 089F STS	MACHINE_STATE+4,R24
(0236) 
(0237)   start_pwm(); 
    02F7F 940E 2F9B CALL	_start_pwm
    02F81 9626      ADIW	R28,6
    02F82 9149      LD	R20,Y+
    02F83 9508      RET
FILE: E:\1.JD_Project\21.Android-360\1.Android-360Code\App\isr.c
(0001) #include "includes.h"
(0002) void Delay_MS(unsigned int t)
(0003) {
(0004)   DelayMs=t;
_Delay_MS:
  t                    --> R16
    02F84 9310 011D STS	DelayMs+1,R17
    02F86 9300 011C STS	DelayMs,R16
(0005)   while(DelayMs>0);
    02F88 9020 011C LDS	R2,DelayMs
    02F8A 9030 011D LDS	R3,DelayMs+1
    02F8C 2022      TST	R2
    02F8D F7D1      BNE	0x2F88
    02F8E 2033      TST	R3
    02F8F F7C1      BNE	0x2F88
    02F90 9508      RET
(0006) }
(0007) void Delay_10MS(unsigned int t)
(0008) {
(0009)   Clk=0;
_Delay_10MS:
  t                    --> R16
    02F91 2422      CLR	R2
    02F92 9220 010F STS	Clk,R2
(0010)   while(Clk<t);
    02F94 9020 010F LDS	R2,Clk
    02F96 2433      CLR	R3
    02F97 1620      CP	R2,R16
    02F98 0631      CPC	R3,R17
    02F99 F3D0      BCS	0x2F94
    02F9A 9508      RET
(0011) }
(0012) void start_pwm(void)
(0013)  {
(0014)     timer2_init();
_start_pwm:
    02F9B 940E 2D86 CALL	_timer2_init
(0015)     TCCR2 = 0x72; 
    02F9D E782      LDI	R24,0x72
    02F9E BD85      OUT	0x25,R24
    02F9F 9508      RET
(0016)  }	
(0017) void stop_pwm(void)
(0018)  {
(0019)    timer2_init();
_stop_pwm:
    02FA0 940E 2D86 CALL	_timer2_init
(0020)    PORTB &=0x7f;
    02FA2 B388      IN	R24,0x18
    02FA3 778F      ANDI	R24,0x7F
    02FA4 BB88      OUT	0x18,R24
    02FA5 9508      RET
(0021)  } 
(0022) void out_pulse(void)
(0023) {
(0024)   TCNT1H = 0x00; 
_out_pulse:
    02FA6 2422      CLR	R2
    02FA7 BC2D      OUT	0x2D,R2
(0025)   TCNT1L = 0x01;
    02FA8 E081      LDI	R24,1
    02FA9 BD8C      OUT	0x2C,R24
(0026)   OCR1C  = 1250; 
    02FAA EE82      LDI	R24,0xE2
    02FAB E094      LDI	R25,4
    02FAC 9390 0079 STS	0x79,R25
    02FAE 9380 0078 STS	0x78,R24
(0027)   ETIMSK |=0X01;
    02FB0 9180 007D LDS	R24,0x7D
    02FB2 6081      ORI	R24,1
    02FB3 9380 007D STS	0x7D,R24
    02FB5 9508      RET
(0028) } 
(0029) void sound(void)//???
(0030) {
(0031)   if(Sound_Count>0)
_sound:
    02FB6 E080      LDI	R24,0
    02FB7 9020 0120 LDS	R2,Sound_Count
    02FB9 1582      CP	R24,R2
    02FBA F430      BCC	0x2FC1
(0032)   {
(0033)     Sound_Count--;
    02FBB 2D82      MOV	R24,R2
    02FBC 5081      SUBI	R24,1
    02FBD 9380 0120 STS	Sound_Count,R24
(0034) 	SPK_ON;
    02FBF 9AD8      SBI	0x1B,0
(0035)   }
    02FC0 C001      RJMP	0x2FC2
(0036)   else SPK_OFF;
    02FC1 98D8      CBI	0x1B,0
    02FC2 9508      RET
(0037) }
(0038) void water_count(void)
(0039) {
(0040)   static unsigned int w_cnt=0;
(0041)   static unsigned int w_bit=0;
(0042)   w_cnt++; 
_water_count:
    02FC3 9180 03C3 LDS	R24,isr.c:w_cnt
    02FC5 9190 03C4 LDS	R25,isr.c:w_cnt+1
    02FC7 9601      ADIW	R24,1
    02FC8 9390 03C4 STS	isr.c:w_cnt+1,R25
    02FCA 9380 03C3 STS	isr.c:w_cnt,R24
(0043)   if(w_cnt>80)
    02FCC E580      LDI	R24,0x50
    02FCD E090      LDI	R25,0
    02FCE 9020 03C3 LDS	R2,isr.c:w_cnt
    02FD0 9030 03C4 LDS	R3,isr.c:w_cnt+1
    02FD2 1582      CP	R24,R2
    02FD3 0593      CPC	R25,R3
    02FD4 F480      BCC	0x2FE5
(0044)   {
(0045) 	water=w_buf;
    02FD5 9020 03A7 LDS	R2,w_buf
    02FD7 9030 03A8 LDS	R3,w_buf+1
    02FD9 9220 010B STS	water,R2
(0046) 	w_buf=0;
    02FDB 2422      CLR	R2
    02FDC 2433      CLR	R3
    02FDD 9230 03A8 STS	w_buf+1,R3
    02FDF 9220 03A7 STS	w_buf,R2
(0047) 	w_cnt=0;
    02FE1 9230 03C4 STS	isr.c:w_cnt+1,R3
    02FE3 9220 03C3 STS	isr.c:w_cnt,R2
(0048)   }
(0049)   if(w_bit!=(PINF&0x04))
    02FE5 B180      IN	R24,0x00
    02FE6 2799      CLR	R25
    02FE7 7084      ANDI	R24,4
    02FE8 7090      ANDI	R25,0
    02FE9 9020 03C5 LDS	R2,isr.c:w_bit
    02FEB 9030 03C6 LDS	R3,isr.c:w_bit+1
    02FED 1628      CP	R2,R24
    02FEE 0639      CPC	R3,R25
    02FEF F0A9      BEQ	0x3005
(0050)   {
(0051)     w_bit=PINF&0x04;
    02FF0 B180      IN	R24,0x00
    02FF1 2799      CLR	R25
    02FF2 7084      ANDI	R24,4
    02FF3 7090      ANDI	R25,0
    02FF4 9390 03C6 STS	isr.c:w_bit+1,R25
    02FF6 9380 03C5 STS	isr.c:w_bit,R24
(0052) 	if(w_buf<255) 
    02FF8 9180 03A7 LDS	R24,w_buf
    02FFA 9190 03A8 LDS	R25,w_buf+1
    02FFC 3F8F      CPI	R24,0xFF
    02FFD E0E0      LDI	R30,0
    02FFE 079E      CPC	R25,R30
    02FFF F428      BCC	0x3005
(0053) 	w_buf++;
    03000 9601      ADIW	R24,1
    03001 9390 03A8 STS	w_buf+1,R25
    03003 9380 03A7 STS	w_buf,R24
(0054)   }
    03005 9508      RET
_timer0_comp_isr:
    03006 920A      ST	-Y,R0
    03007 921A      ST	-Y,R1
    03008 922A      ST	-Y,R2
    03009 923A      ST	-Y,R3
    0300A 924A      ST	-Y,R4
    0300B 925A      ST	-Y,R5
    0300C 926A      ST	-Y,R6
    0300D 927A      ST	-Y,R7
    0300E 928A      ST	-Y,R8
    0300F 929A      ST	-Y,R9
    03010 930A      ST	-Y,R16
    03011 931A      ST	-Y,R17
    03012 932A      ST	-Y,R18
    03013 933A      ST	-Y,R19
    03014 938A      ST	-Y,R24
    03015 939A      ST	-Y,R25
    03016 93AA      ST	-Y,R26
    03017 93BA      ST	-Y,R27
    03018 93EA      ST	-Y,R30
    03019 93FA      ST	-Y,R31
    0301A B60F      IN	R0,0x3F
    0301B 920A      ST	-Y,R0
(0055) }
(0056) #pragma interrupt_handler timer0_comp_isr:16
(0057) 
(0058) void timer0_comp_isr(void)
(0059) {
(0060)   static unsigned int count=0;
(0061)   static unsigned int xf=0;
(0062)   TCNT0=0;
    0301C 2422      CLR	R2
    0301D BE22      OUT	0x32,R2
(0063)   OCR0 = 0x97;
    0301E E987      LDI	R24,0x97
    0301F BF81      OUT	0x31,R24
(0064)   Clk++;
    03020 9180 010F LDS	R24,Clk
    03022 5F8F      SUBI	R24,0xFF
    03023 9380 010F STS	Clk,R24
(0065)   sound();
    03025 DF90      RCALL	_sound
(0066)   if(DelayMs>0) DelayMs--;
    03026 9020 011C LDS	R2,DelayMs
    03028 9030 011D LDS	R3,DelayMs+1
    0302A 2022      TST	R2
    0302B F411      BNE	0x302E
    0302C 2033      TST	R3
    0302D F031      BEQ	0x3034
    0302E 01C1      MOVW	R24,R2
    0302F 9701      SBIW	R24,1
    03030 9390 011D STS	DelayMs+1,R25
    03032 9380 011C STS	DelayMs,R24
(0067)   //Updata(); 
(0068)   if(MACHINE_STATE.WORK_STATE==0) return;
    03034 9020 089C LDS	R2,MACHINE_STATE+1
    03036 2022      TST	R2
    03037 F409      BNE	0x3039
    03038 C069      RJMP	0x30A2
(0069)   if(MACHINE_STATE.HANDLE_ID==5)return;
    03039 9180 089B LDS	R24,MACHINE_STATE
    0303B 3085      CPI	R24,5
    0303C F409      BNE	0x303E
    0303D C064      RJMP	0x30A2
(0070) 
(0071)   if((Intensity[5]==0)||(Intensity[6]==0)) XF_OFF; //吸放气 H
    0303E 9020 03B8 LDS	R2,Intensity+5
    03040 2022      TST	R2
    03041 F021      BEQ	0x3046
    03042 9020 03B9 LDS	R2,Intensity+6
    03044 2022      TST	R2
    03045 F431      BNE	0x304C
    03046 9180 0065 LDS	R24,0x65
    03048 6082      ORI	R24,2
    03049 9380 0065 STS	0x65,R24
    0304B C056      RJMP	0x30A2
(0072)   else if(xf==0)
    0304C 9020 03C9 LDS	R2,isr.c:xf
    0304E 9030 03CA LDS	R3,isr.c:xf+1
    03050 2022      TST	R2
    03051 F579      BNE	0x3081
    03052 2033      TST	R3
    03053 F569      BNE	0x3081
(0073)   {
(0074)     if(count<Intensity[5]*20) count++;
    03054 9110 03B8 LDS	R17,Intensity+5
    03056 E104      LDI	R16,0x14
    03057 0301      MULSU	R16,R17
    03058 9020 03C7 LDS	R2,isr.c:count
    0305A 9030 03C8 LDS	R3,isr.c:count+1
    0305C 1420      CP	R2,R0
    0305D 0431      CPC	R3,R1
    0305E F438      BCC	0x3066
    0305F 01C1      MOVW	R24,R2
    03060 9601      ADIW	R24,1
    03061 9390 03C8 STS	isr.c:count+1,R25
    03063 9380 03C7 STS	isr.c:count,R24
    03065 C03C      RJMP	0x30A2
(0075) 	else 
(0076) 	{
(0077) 	  count=0;
    03066 2422      CLR	R2
    03067 2433      CLR	R3
    03068 9230 03C8 STS	isr.c:count+1,R3
    0306A 9220 03C7 STS	isr.c:count,R2
(0078) 	  xf=1;
    0306C E081      LDI	R24,1
    0306D E090      LDI	R25,0
    0306E 9390 03CA STS	isr.c:xf+1,R25
    03070 9380 03C9 STS	isr.c:xf,R24
(0079) 	  if((Intensity[5]>0)&&(Intensity[6]>0)) XF_ON; 
    03072 E080      LDI	R24,0
    03073 9020 03B8 LDS	R2,Intensity+5
    03075 1582      CP	R24,R2
    03076 F558      BCC	0x30A2
    03077 9020 03B9 LDS	R2,Intensity+6
    03079 1582      CP	R24,R2
    0307A F538      BCC	0x30A2
    0307B 9180 0065 LDS	R24,0x65
    0307D 7F8D      ANDI	R24,0xFD
    0307E 9380 0065 STS	0x65,R24
(0080) 	}
(0081)   }
    03080 C021      RJMP	0x30A2
(0082)   else
(0083)   {
(0084)     //if(count<Intensity[6]*20) count++;
(0085) 	if(count<Intensity[6]*10) count++;//20190410改
    03081 9110 03B9 LDS	R17,Intensity+6
    03083 E00A      LDI	R16,0xA
    03084 0301      MULSU	R16,R17
    03085 9020 03C7 LDS	R2,isr.c:count
    03087 9030 03C8 LDS	R3,isr.c:count+1
    03089 1420      CP	R2,R0
    0308A 0431      CPC	R3,R1
    0308B F438      BCC	0x3093
    0308C 01C1      MOVW	R24,R2
    0308D 9601      ADIW	R24,1
    0308E 9390 03C8 STS	isr.c:count+1,R25
    03090 9380 03C7 STS	isr.c:count,R24
    03092 C00F      RJMP	0x30A2
(0086) 	else 
(0087) 	{
(0088) 	  count=0;
    03093 2422      CLR	R2
    03094 2433      CLR	R3
    03095 9230 03C8 STS	isr.c:count+1,R3
    03097 9220 03C7 STS	isr.c:count,R2
(0089) 	  xf=0;
    03099 9230 03CA STS	isr.c:xf+1,R3
    0309B 9220 03C9 STS	isr.c:xf,R2
(0090) 	  XF_OFF; 
    0309D 9180 0065 LDS	R24,0x65
    0309F 6082      ORI	R24,2
    030A0 9380 0065 STS	0x65,R24
(0091) 	}
(0092)   }
    030A2 9009      LD	R0,Y+
    030A3 BE0F      OUT	0x3F,R0
    030A4 91F9      LD	R31,Y+
    030A5 91E9      LD	R30,Y+
    030A6 91B9      LD	R27,Y+
    030A7 91A9      LD	R26,Y+
    030A8 9199      LD	R25,Y+
    030A9 9189      LD	R24,Y+
    030AA 9139      LD	R19,Y+
    030AB 9129      LD	R18,Y+
    030AC 9119      LD	R17,Y+
    030AD 9109      LD	R16,Y+
    030AE 9099      LD	R9,Y+
    030AF 9089      LD	R8,Y+
    030B0 9079      LD	R7,Y+
    030B1 9069      LD	R6,Y+
    030B2 9059      LD	R5,Y+
    030B3 9049      LD	R4,Y+
    030B4 9039      LD	R3,Y+
    030B5 9029      LD	R2,Y+
    030B6 9019      LD	R1,Y+
    030B7 9009      LD	R0,Y+
    030B8 9518      RETI
(0093) }
(0094) 
(0095) 
(0096) #pragma interrupt_handler timer1_compc_isr:25
(0097) 
(0098) void timer1_compc_isr(void)
(0099) {
_timer1_compc_isr:
    030B9 9518      RETI
_timer2_comp_isr:
    030BA 922A      ST	-Y,R2
    030BB B62F      IN	R2,0x3F
    030BC 922A      ST	-Y,R2
(0100) 
(0101) }
(0102) 
(0103) //TIMER2 initialize - prescale:64
(0104) // WGM: PWM Fast
(0105) // desired value: 500Hz
(0106) // actual value: 488.281Hz (2.4%)
(0107) 
(0108) 
(0109) #pragma interrupt_handler timer2_comp_isr:10
(0110) void timer2_comp_isr(void)
(0111) {
(0112)   /*
(0113)   if((Intensity[8]==0)&&(Intensity[2]>0)&&(Work>0))
(0114)   {
(0115)    OCR2=Intensity[2]*25; 
(0116)   }
(0117)   else OCR2=0;*/
(0118)  OCR2=0;
    030BD 2422      CLR	R2
    030BE BC23      OUT	0x23,R2
    030BF 9029      LD	R2,Y+
    030C0 BE2F      OUT	0x3F,R2
    030C1 9029      LD	R2,Y+
    030C2 9518      RETI
_timer2_ovf_isr:
    030C3 920A      ST	-Y,R0
    030C4 921A      ST	-Y,R1
    030C5 922A      ST	-Y,R2
    030C6 923A      ST	-Y,R3
    030C7 930A      ST	-Y,R16
    030C8 931A      ST	-Y,R17
    030C9 932A      ST	-Y,R18
    030CA 933A      ST	-Y,R19
    030CB 938A      ST	-Y,R24
    030CC B60F      IN	R0,0x3F
    030CD 920A      ST	-Y,R0
(0119) }
(0120) #pragma interrupt_handler timer2_ovf_isr:11
(0121) void timer2_ovf_isr(void)
(0122) {
(0123)   static unsigned char count=0;
(0124)   TCNT2 = 0x01;
    030CE E081      LDI	R24,1
    030CF BD84      OUT	0x24,R24
(0125)   //water_count();
(0126) 
(0127)   
(0128)   if(MACHINE_STATE.WORK_STATE==0)
    030D0 9020 089C LDS	R2,MACHINE_STATE+1
    030D2 2022      TST	R2
    030D3 F441      BNE	0x30DC
(0129)   {
(0130)    BitSet(PORTA,6);
    030D4 9ADE      SBI	0x1B,6
(0131)    BitSet(PORTA,7);
    030D5 9ADF      SBI	0x1B,7
(0132)    LED2_OFF;
    030D6 9AC0      SBI	0x18,0
(0133)    LD2_OFF;
    030D7 9AC1      SBI	0x18,1
(0134)    RFE_OFF;
    030D8 98C6      CBI	0x18,6
(0135)    MD_OFF;
    030D9 981D      CBI	0x03,5
(0136)    LED3_OFF;
    030DA 9A1F      SBI	0x03,7
(0137)    return;
    030DB C0A4      RJMP	0x3180
(0138)   }
(0139)   if(MACHINE_STATE.HANDLE_ID==5)return;
    030DC 9180 089B LDS	R24,MACHINE_STATE
    030DE 3085      CPI	R24,5
    030DF F409      BNE	0x30E1
    030E0 C09F      RJMP	0x3180
(0140)   BitClr(PORTA,6); //负压真空泵打开 H
    030E1 98DE      CBI	0x1B,6
(0141)   if(Intensity[8]<2) BitClr(PORTA,7);// 没用到 H
    030E2 9180 03BB LDS	R24,Intensity+8
    030E4 3082      CPI	R24,2
    030E5 F408      BCC	0x30E7
    030E6 98DF      CBI	0x1B,7
(0142)   count=(count+1)%50;
    030E7 E312      LDI	R17,0x32
    030E8 9100 03CB LDS	R16,isr.c:count:1|count
    030EA 5F0F      SUBI	R16,0xFF
    030EB 940E 448D CALL	mod8u
    030ED 9300 03CB STS	isr.c:count:1|count,R16
(0143)   RfPer=SettingDdata.SET_WORKPOWER;
    030EF 9020 089A LDS	R2,SettingDdata+70
    030F1 9220 07D0 STS	RfPer,R2
(0144)   if(Intensity[8]==0)//1号手柄 射频等级 H
    030F3 9020 03BB LDS	R2,Intensity+8
    030F5 2022      TST	R2
    030F6 F4C1      BNE	0x310F
(0145)   {
(0146)     if((Intensity[2]*5*RfPer/100)>count) RFE_ON;
    030F7 9110 03B5 LDS	R17,Intensity+2
    030F9 E005      LDI	R16,5
    030FA 0301      MULSU	R16,R17
    030FB 0180      MOVW	R16,R0
    030FC 9120 07D0 LDS	R18,RfPer
    030FE 2733      CLR	R19
    030FF 940E 44A5 CALL	empy16s
    03101 E624      LDI	R18,0x64
    03102 E030      LDI	R19,0
    03103 940E 43ED CALL	div16s
    03105 9020 03CB LDS	R2,isr.c:count:1|count
    03107 2433      CLR	R3
    03108 1620      CP	R2,R16
    03109 0631      CPC	R3,R17
    0310A F414      BGE	0x310D
    0310B 9AC6      SBI	0x18,6
    0310C C073      RJMP	0x3180
(0147)     else RFE_OFF;
    0310D 98C6      CBI	0x18,6
(0148)   }
    0310E C071      RJMP	0x3180
(0149)   else if(Intensity[8]==1)//2号手柄 LED 射频  电机转速等级  H
    0310F 9180 03BB LDS	R24,Intensity+8
    03111 3081      CPI	R24,1
    03112 F581      BNE	0x3143
(0150)   {
(0151)     if(Intensity[0]*5>count) LED2_ON;
    03113 9110 03B3 LDS	R17,Intensity
    03115 E005      LDI	R16,5
    03116 0301      MULSU	R16,R17
    03117 9020 03CB LDS	R2,isr.c:count:1|count
    03119 2433      CLR	R3
    0311A 1420      CP	R2,R0
    0311B 0431      CPC	R3,R1
    0311C F414      BGE	0x311F
    0311D 98C0      CBI	0x18,0
    0311E C001      RJMP	0x3120
(0152)     else LED2_OFF;
    0311F 9AC0      SBI	0x18,0
(0153)     if((Intensity[2]*4*RfPer/100)>count) RFE_ON;
    03120 9110 07D0 LDS	R17,RfPer
    03122 9100 03B5 LDS	R16,Intensity+2
    03124 0F00      LSL	R16
    03125 0F00      LSL	R16
    03126 0301      MULSU	R16,R17
    03127 0180      MOVW	R16,R0
    03128 E624      LDI	R18,0x64
    03129 E030      LDI	R19,0
    0312A 940E 43ED CALL	div16s
    0312C 9020 03CB LDS	R2,isr.c:count:1|count
    0312E 2433      CLR	R3
    0312F 1620      CP	R2,R16
    03130 0631      CPC	R3,R17
    03131 F414      BGE	0x3134
    03132 9AC6      SBI	0x18,6
    03133 C001      RJMP	0x3135
(0154)     else RFE_OFF;
    03134 98C6      CBI	0x18,6
(0155)     if(Intensity[3]*5>count) MD_ON;
    03135 9110 03B6 LDS	R17,Intensity+3
    03137 E005      LDI	R16,5
    03138 0301      MULSU	R16,R17
    03139 9020 03CB LDS	R2,isr.c:count:1|count
    0313B 2433      CLR	R3
    0313C 1420      CP	R2,R0
    0313D 0431      CPC	R3,R1
    0313E F414      BGE	0x3141
    0313F 9A1D      SBI	0x03,5
    03140 C03F      RJMP	0x3180
(0156)     else MD_OFF;
    03141 981D      CBI	0x03,5
(0157)   }
    03142 C03D      RJMP	0x3180
(0158)   else if(Intensity[8]==2)//3号手柄  LED 射频等级 H
    03143 9180 03BB LDS	R24,Intensity+8
    03145 3082      CPI	R24,2
    03146 F511      BNE	0x3169
(0159)   {
(0160)     if(Intensity[0]*5>count) LED3_ON;
    03147 9110 03B3 LDS	R17,Intensity
    03149 E005      LDI	R16,5
    0314A 0301      MULSU	R16,R17
    0314B 9020 03CB LDS	R2,isr.c:count:1|count
    0314D 2433      CLR	R3
    0314E 1420      CP	R2,R0
    0314F 0431      CPC	R3,R1
    03150 F414      BGE	0x3153
    03151 981F      CBI	0x03,7
    03152 C001      RJMP	0x3154
(0161)     else LED3_OFF;
    03153 9A1F      SBI	0x03,7
(0162)     if((Intensity[2]*2*RfPer/100)>count) RFE_ON;
    03154 9110 07D0 LDS	R17,RfPer
    03156 9100 03B5 LDS	R16,Intensity+2
    03158 0F00      LSL	R16
    03159 0301      MULSU	R16,R17
    0315A 0180      MOVW	R16,R0
    0315B E624      LDI	R18,0x64
    0315C E030      LDI	R19,0
    0315D 940E 43ED CALL	div16s
    0315F 9020 03CB LDS	R2,isr.c:count:1|count
    03161 2433      CLR	R3
    03162 1620      CP	R2,R16
    03163 0631      CPC	R3,R17
    03164 F414      BGE	0x3167
    03165 9AC6      SBI	0x18,6
    03166 C019      RJMP	0x3180
(0163)     else RFE_OFF;
    03167 98C6      CBI	0x18,6
(0164)   }
    03168 C017      RJMP	0x3180
(0165)   else if(Intensity[8]==3)//4号手柄射频等级  H
    03169 9180 03BB LDS	R24,Intensity+8
    0316B 3083      CPI	R24,3
    0316C F499      BNE	0x3180
(0166)   {
(0167)     if((Intensity[2]*RfPer/100)>count) RFE_ON;
    0316D 9110 07D0 LDS	R17,RfPer
    0316F 9100 03B5 LDS	R16,Intensity+2
    03171 0301      MULSU	R16,R17
    03172 0180      MOVW	R16,R0
    03173 E624      LDI	R18,0x64
    03174 E030      LDI	R19,0
    03175 940E 43ED CALL	div16s
    03177 9020 03CB LDS	R2,isr.c:count:1|count
    03179 2433      CLR	R3
    0317A 1620      CP	R2,R16
    0317B 0631      CPC	R3,R17
    0317C F414      BGE	0x317F
    0317D 9AC6      SBI	0x18,6
    0317E C001      RJMP	0x3180
(0168)     else RFE_OFF;
    0317F 98C6      CBI	0x18,6
(0169)   }
    03180 9009      LD	R0,Y+
    03181 BE0F      OUT	0x3F,R0
    03182 9189      LD	R24,Y+
    03183 9139      LD	R19,Y+
    03184 9129      LD	R18,Y+
    03185 9119      LD	R17,Y+
    03186 9109      LD	R16,Y+
    03187 9039      LD	R3,Y+
    03188 9029      LD	R2,Y+
    03189 9019      LD	R1,Y+
    0318A 9009      LD	R0,Y+
    0318B 9518      RETI
_timer3_compc_isr:
    0318C 938A      ST	-Y,R24
    0318D B78F      IN	R24,0x3F
    0318E 938A      ST	-Y,R24
(0170)   
(0171) }
(0172) //TIMER3 initialize - prescale:64
(0173) // WGM: 1) PWM 8bit Phz correct, TOP=0x00FF
(0174) // desired value: 245Hz
(0175) // actual value: 245.098Hz (0.0%)
(0176) 
(0177) 
(0178) #pragma interrupt_handler timer3_compc_isr:29
(0179) void timer3_compc_isr(void)
(0180) {
(0181)  //compare occured TCNT3
(0182)  OCR3CH = 0xff;
    0318F EF8F      LDI	R24,0xFF
    03190 9380 0083 STS	0x83,R24
(0183)  OCR3CL =255;
    03192 9380 0082 STS	0x82,R24
    03194 9189      LD	R24,Y+
    03195 BF8F      OUT	0x3F,R24
    03196 9189      LD	R24,Y+
    03197 9518      RETI
_timer3_ovf_isr:
    03198 938A      ST	-Y,R24
    03199 B78F      IN	R24,0x3F
    0319A 938A      ST	-Y,R24
(0184)  //PORTE &= 0x7F;
(0185) }
(0186) #pragma interrupt_handler timer3_ovf_isr:30
(0187) void timer3_ovf_isr(void)
(0188) {
(0189)  TCNT3H = 0xFF; //reload counter high value
    0319B EF8F      LDI	R24,0xFF
    0319C 9380 0089 STS	0x89,R24
(0190)  TCNT3L = 0x01; //reload counter low value
    0319E E081      LDI	R24,1
    0319F 9380 0088 STS	0x88,R24
    031A1 9189      LD	R24,Y+
    031A2 BF8F      OUT	0x3F,R24
    031A3 9189      LD	R24,Y+
    031A4 9518      RETI
(0191)  //PORTE |=0x80;
(0192) }
(0193) 
(0194) #pragma interrupt_handler adc_isr:22
(0195) void adc_isr(void)
(0196) {
_adc_isr:
    031A5 9518      RETI
FILE: E:\1.JD_Project\21.Android-360\1.Android-360Code\App\main.c
(0001) 
(0002) #include "includes.h"
(0003) 
(0004) void main(void)
(0005) {
(0006)   unsigned x=0;
_main:
  x                    --> R10
    031A6 24AA      CLR	R10
    031A7 24BB      CLR	R11
(0007)   init_system();
    031A8 940E 2E51 CALL	_init_system
(0008)   Sound_Count=20;
    031AA E184      LDI	R24,0x14
    031AB 9380 0120 STS	Sound_Count,R24
    031AD C004      RJMP	0x31B2
(0009)   while(1)
(0010)   {  
(0011)     //Dispartch_Task();
(0012)     DataSynchronization();
    031AE 940E 06CC CALL	_DataSynchronization
(0013)     HandpieceKey();
    031B0 940E 24C6 CALL	_HandpieceKey
    031B2 CFFB      RJMP	0x31AE
    031B3 9508      RET
FILE: E:\1.JD_Project\21.Android-360\1.Android-360Code\App\task.c
(0001) #include "includes.h"
(0002) struct Task Tasks[MAX_TASKS];
(0003) unsigned char Error_code;
(0004) unsigned int  Error_tick_const;
(0005) unsigned char Last_error_code;  
(0006) void Init_Task(void) 
(0007) {
(0008)    unsigned char Index;
(0009)    for(Index = 0; Index <MAX_TASKS; Index++)
_Init_Task:
  Index                --> R16
    031B4 2700      CLR	R16
    031B5 C047      RJMP	0x31FD
(0010)      {
(0011)        Tasks[Index].pTask  = 0;
    031B6 EF83      LDI	R24,0xF3
    031B7 E097      LDI	R25,7
    031B8 2FE0      MOV	R30,R16
    031B9 27FF      CLR	R31
    031BA 0FEE      LSL	R30
    031BB 1FFF      ROL	R31
    031BC 0FEE      LSL	R30
    031BD 1FFF      ROL	R31
    031BE 0FEE      LSL	R30
    031BF 1FFF      ROL	R31
    031C0 0FE8      ADD	R30,R24
    031C1 1FF9      ADC	R31,R25
    031C2 2422      CLR	R2
    031C3 2433      CLR	R3
    031C4 8231      STD	Z+1,R3
    031C5 8220      ST	Z,R2
(0012)        Tasks[Index].Delay  = 0;
    031C6 EF85      LDI	R24,0xF5
    031C7 E097      LDI	R25,7
    031C8 2FE0      MOV	R30,R16
    031C9 27FF      CLR	R31
    031CA 0FEE      LSL	R30
    031CB 1FFF      ROL	R31
    031CC 0FEE      LSL	R30
    031CD 1FFF      ROL	R31
    031CE 0FEE      LSL	R30
    031CF 1FFF      ROL	R31
    031D0 0FE8      ADD	R30,R24
    031D1 1FF9      ADC	R31,R25
    031D2 8231      STD	Z+1,R3
    031D3 8220      ST	Z,R2
(0013)        Tasks[Index].Period = 0;
    031D4 EF87      LDI	R24,0xF7
    031D5 E097      LDI	R25,7
    031D6 2FE0      MOV	R30,R16
    031D7 27FF      CLR	R31
    031D8 0FEE      LSL	R30
    031D9 1FFF      ROL	R31
    031DA 0FEE      LSL	R30
    031DB 1FFF      ROL	R31
    031DC 0FEE      LSL	R30
    031DD 1FFF      ROL	R31
    031DE 0FE8      ADD	R30,R24
    031DF 1FF9      ADC	R31,R25
    031E0 8231      STD	Z+1,R3
    031E1 8220      ST	Z,R2
(0014)        Tasks[Index].RunMe  = 0;
    031E2 EF89      LDI	R24,0xF9
    031E3 E097      LDI	R25,7
    031E4 2FE0      MOV	R30,R16
    031E5 27FF      CLR	R31
    031E6 0FEE      LSL	R30
    031E7 1FFF      ROL	R31
    031E8 0FEE      LSL	R30
    031E9 1FFF      ROL	R31
    031EA 0FEE      LSL	R30
    031EB 1FFF      ROL	R31
    031EC 0FE8      ADD	R30,R24
    031ED 1FF9      ADC	R31,R25
    031EE 8220      ST	Z,R2
(0015)        Tasks[Index].Co_op  = 0;
    031EF EF8A      LDI	R24,0xFA
    031F0 E097      LDI	R25,7
    031F1 2FE0      MOV	R30,R16
    031F2 27FF      CLR	R31
    031F3 0FEE      LSL	R30
    031F4 1FFF      ROL	R31
    031F5 0FEE      LSL	R30
    031F6 1FFF      ROL	R31
    031F7 0FEE      LSL	R30
    031F8 1FFF      ROL	R31
    031F9 0FE8      ADD	R30,R24
    031FA 1FF9      ADC	R31,R25
    031FB 8220      ST	Z,R2
    031FC 9503      INC	R16
    031FD 300B      CPI	R16,0xB
    031FE F408      BCC	0x3200
    031FF CFB6      RJMP	0x31B6
    03200 9508      RET
_Add_Task:
  Index                --> R20
  Co_op                --> R10
  PERIOD               --> R12
  DELAY                --> R18
  pFunction            --> R16
    03201 940E 4531 CALL	push_xgset303C
    03203 80CE      LDD	R12,Y+6
    03204 80DF      LDD	R13,Y+7
    03205 84A8      LDD	R10,Y+8
    03206 84B9      LDD	R11,Y+9
(0016) 
(0017) 	 }
(0018) }		
(0019) unsigned char Add_Task(void(*pFunction)(void),
(0020)                        unsigned int DELAY,
(0021) 					   unsigned int PERIOD,
(0022) 					   unsigned int Co_op)
(0023) {
(0024)    unsigned char Index = 0;
    03207 2744      CLR	R20
    03208 C001      RJMP	0x320A
(0025)    while((Tasks[Index].pTask != 0)&&(Index<MAX_TASKS))
(0026)     {
(0027)        Index++;
    03209 9543      INC	R20
    0320A EF83      LDI	R24,0xF3
    0320B E097      LDI	R25,7
    0320C 2FE4      MOV	R30,R20
    0320D 27FF      CLR	R31
    0320E 0FEE      LSL	R30
    0320F 1FFF      ROL	R31
    03210 0FEE      LSL	R30
    03211 1FFF      ROL	R31
    03212 0FEE      LSL	R30
    03213 1FFF      ROL	R31
    03214 0FE8      ADD	R30,R24
    03215 1FF9      ADC	R31,R25
    03216 8020      LD	R2,Z
    03217 8031      LDD	R3,Z+1
    03218 2022      TST	R2
    03219 F411      BNE	0x321C
    0321A 2033      TST	R3
    0321B F011      BEQ	0x321E
    0321C 304B      CPI	R20,0xB
    0321D F358      BCS	0x3209
(0028)     }
(0029)    if(Index == MAX_TASKS)
    0321E 304B      CPI	R20,0xB
    0321F F429      BNE	0x3225
(0030)     {  	       
(0031)        Error_code = ERROR_TOO_MANY_RASKS;
    03220 2422      CLR	R2
    03221 9220 07F2 STS	Error_code,R2
(0032) 	   return MAX_TASKS; 
    03223 E00B      LDI	R16,0xB
    03224 C038      RJMP	0x325D
(0033)     }
(0034)    Tasks[Index].pTask = pFunction;
    03225 EF83      LDI	R24,0xF3
    03226 E097      LDI	R25,7
    03227 2FE4      MOV	R30,R20
    03228 27FF      CLR	R31
    03229 0FEE      LSL	R30
    0322A 1FFF      ROL	R31
    0322B 0FEE      LSL	R30
    0322C 1FFF      ROL	R31
    0322D 0FEE      LSL	R30
    0322E 1FFF      ROL	R31
    0322F 0FE8      ADD	R30,R24
    03230 1FF9      ADC	R31,R25
    03231 8311      STD	Z+1,R17
    03232 8300      ST	Z,R16
(0035)    Tasks[Index].Delay  = DELAY;
    03233 EF85      LDI	R24,0xF5
    03234 E097      LDI	R25,7
    03235 2FE4      MOV	R30,R20
    03236 27FF      CLR	R31
    03237 0FEE      LSL	R30
    03238 1FFF      ROL	R31
    03239 0FEE      LSL	R30
    0323A 1FFF      ROL	R31
    0323B 0FEE      LSL	R30
    0323C 1FFF      ROL	R31
    0323D 0FE8      ADD	R30,R24
    0323E 1FF9      ADC	R31,R25
    0323F 8331      STD	Z+1,R19
    03240 8320      ST	Z,R18
(0036)    Tasks[Index].Period = PERIOD;
    03241 EF87      LDI	R24,0xF7
    03242 E097      LDI	R25,7
    03243 2FE4      MOV	R30,R20
    03244 27FF      CLR	R31
    03245 0FEE      LSL	R30
    03246 1FFF      ROL	R31
    03247 0FEE      LSL	R30
    03248 1FFF      ROL	R31
    03249 0FEE      LSL	R30
    0324A 1FFF      ROL	R31
    0324B 0FE8      ADD	R30,R24
    0324C 1FF9      ADC	R31,R25
    0324D 82D1      STD	Z+1,R13
    0324E 82C0      ST	Z,R12
(0037)    Tasks[Index].Co_op=Co_op;
    0324F EF8A      LDI	R24,0xFA
    03250 E097      LDI	R25,7
    03251 2FE4      MOV	R30,R20
    03252 27FF      CLR	R31
    03253 0FEE      LSL	R30
    03254 1FFF      ROL	R31
    03255 0FEE      LSL	R30
    03256 1FFF      ROL	R31
    03257 0FEE      LSL	R30
    03258 1FFF      ROL	R31
    03259 0FE8      ADD	R30,R24
    0325A 1FF9      ADC	R31,R25
    0325B 82A0      ST	Z,R10
(0038)    return Index;
    0325C 2F04      MOV	R16,R20
    0325D 940C 4538 JMP	pop_xgset303C
(0039) }
(0040) unsigned char Delete_Task(unsigned char TASK_INDEX)
(0041) {
(0042)    if(Tasks[TASK_INDEX].pTask == 0)
_Delete_Task:
  TASK_INDEX           --> R16
    0325F EF83      LDI	R24,0xF3
    03260 E097      LDI	R25,7
    03261 2FE0      MOV	R30,R16
    03262 27FF      CLR	R31
    03263 0FEE      LSL	R30
    03264 1FFF      ROL	R31
    03265 0FEE      LSL	R30
    03266 1FFF      ROL	R31
    03267 0FEE      LSL	R30
    03268 1FFF      ROL	R31
    03269 0FE8      ADD	R30,R24
    0326A 1FF9      ADC	R31,R25
    0326B 8020      LD	R2,Z
    0326C 8031      LDD	R3,Z+1
    0326D 2022      TST	R2
    0326E F439      BNE	0x3276
    0326F 2033      TST	R3
    03270 F429      BNE	0x3276
(0043)     {
(0044) 	  Error_code = ERROR_CANNONT_DELETE_TASK;
    03271 E081      LDI	R24,1
    03272 9380 07F2 STS	Error_code,R24
(0045) 	  return Return_ERROR; 
    03274 E002      LDI	R16,2
    03275 C047      RJMP	0x32BD
(0046) 	}
(0047)    Tasks[TASK_INDEX].pTask  = 0;
    03276 EF83      LDI	R24,0xF3
    03277 E097      LDI	R25,7
    03278 2FE0      MOV	R30,R16
    03279 27FF      CLR	R31
    0327A 0FEE      LSL	R30
    0327B 1FFF      ROL	R31
    0327C 0FEE      LSL	R30
    0327D 1FFF      ROL	R31
    0327E 0FEE      LSL	R30
    0327F 1FFF      ROL	R31
    03280 0FE8      ADD	R30,R24
    03281 1FF9      ADC	R31,R25
    03282 2422      CLR	R2
    03283 2433      CLR	R3
    03284 8231      STD	Z+1,R3
    03285 8220      ST	Z,R2
(0048)    Tasks[TASK_INDEX].Delay  = 0;
    03286 EF85      LDI	R24,0xF5
    03287 E097      LDI	R25,7
    03288 2FE0      MOV	R30,R16
    03289 27FF      CLR	R31
    0328A 0FEE      LSL	R30
    0328B 1FFF      ROL	R31
    0328C 0FEE      LSL	R30
    0328D 1FFF      ROL	R31
    0328E 0FEE      LSL	R30
    0328F 1FFF      ROL	R31
    03290 0FE8      ADD	R30,R24
    03291 1FF9      ADC	R31,R25
    03292 8231      STD	Z+1,R3
    03293 8220      ST	Z,R2
(0049)    Tasks[TASK_INDEX].Period = 0;
    03294 EF87      LDI	R24,0xF7
    03295 E097      LDI	R25,7
    03296 2FE0      MOV	R30,R16
    03297 27FF      CLR	R31
    03298 0FEE      LSL	R30
    03299 1FFF      ROL	R31
    0329A 0FEE      LSL	R30
    0329B 1FFF      ROL	R31
    0329C 0FEE      LSL	R30
    0329D 1FFF      ROL	R31
    0329E 0FE8      ADD	R30,R24
    0329F 1FF9      ADC	R31,R25
    032A0 8231      STD	Z+1,R3
    032A1 8220      ST	Z,R2
(0050)    Tasks[TASK_INDEX].RunMe  = 0;
    032A2 EF89      LDI	R24,0xF9
    032A3 E097      LDI	R25,7
    032A4 2FE0      MOV	R30,R16
    032A5 27FF      CLR	R31
    032A6 0FEE      LSL	R30
    032A7 1FFF      ROL	R31
    032A8 0FEE      LSL	R30
    032A9 1FFF      ROL	R31
    032AA 0FEE      LSL	R30
    032AB 1FFF      ROL	R31
    032AC 0FE8      ADD	R30,R24
    032AD 1FF9      ADC	R31,R25
    032AE 8220      ST	Z,R2
(0051)    Tasks[TASK_INDEX].Co_op  = 0;
    032AF EF8A      LDI	R24,0xFA
    032B0 E097      LDI	R25,7
    032B1 2FE0      MOV	R30,R16
    032B2 27FF      CLR	R31
    032B3 0FEE      LSL	R30
    032B4 1FFF      ROL	R31
    032B5 0FEE      LSL	R30
    032B6 1FFF      ROL	R31
    032B7 0FEE      LSL	R30
    032B8 1FFF      ROL	R31
    032B9 0FE8      ADD	R30,R24
    032BA 1FF9      ADC	R31,R25
    032BB 8220      ST	Z,R2
(0052)    return Return_NORMAR;
    032BC E003      LDI	R16,3
    032BD 9508      RET
(0053) }  
(0054) void Report_Status(void)
(0055)  {
(0056)  ;    //加入空闲任务代码
_Report_Status:
    032BE 9508      RET
_Updata:
  Index                --> R20
    032BF 934A      ST	-Y,R20
(0057)  }
(0058)    
(0059) //轮询
(0060) void Updata(void)
(0061) {
(0062)    unsigned char Index;
(0063)    for (Index = 0;Index < MAX_TASKS;Index++)
    032C0 2744      CLR	R20
    032C1 C0C2      RJMP	0x3384
(0064)     {
(0065) 	  if(Tasks[Index].pTask)                  
    032C2 EF83      LDI	R24,0xF3
    032C3 E097      LDI	R25,7
    032C4 2FE4      MOV	R30,R20
    032C5 27FF      CLR	R31
    032C6 0FEE      LSL	R30
    032C7 1FFF      ROL	R31
    032C8 0FEE      LSL	R30
    032C9 1FFF      ROL	R31
    032CA 0FEE      LSL	R30
    032CB 1FFF      ROL	R31
    032CC 0FE8      ADD	R30,R24
    032CD 1FF9      ADC	R31,R25
    032CE 8020      LD	R2,Z
    032CF 8031      LDD	R3,Z+1
    032D0 2022      TST	R2
    032D1 F419      BNE	0x32D5
    032D2 2033      TST	R3
    032D3 F409      BNE	0x32D5
    032D4 C0AE      RJMP	0x3383
(0066) 	   {
(0067) 	     if(Tasks[Index].Delay == 0)         
    032D5 EF85      LDI	R24,0xF5
    032D6 E097      LDI	R25,7
    032D7 2FE4      MOV	R30,R20
    032D8 27FF      CLR	R31
    032D9 0FEE      LSL	R30
    032DA 1FFF      ROL	R31
    032DB 0FEE      LSL	R30
    032DC 1FFF      ROL	R31
    032DD 0FEE      LSL	R30
    032DE 1FFF      ROL	R31
    032DF 0FE8      ADD	R30,R24
    032E0 1FF9      ADC	R31,R25
    032E1 8020      LD	R2,Z
    032E2 8031      LDD	R3,Z+1
    032E3 2022      TST	R2
    032E4 F009      BEQ	0x32E6
    032E5 C08B      RJMP	0x3371
    032E6 2033      TST	R3
    032E7 F009      BEQ	0x32E9
    032E8 C088      RJMP	0x3371
(0068) 		   {
(0069) 	         if(Tasks[Index].Co_op)           
    032E9 EF8A      LDI	R24,0xFA
    032EA E097      LDI	R25,7
    032EB 2FE4      MOV	R30,R20
    032EC 27FF      CLR	R31
    032ED 0FEE      LSL	R30
    032EE 1FFF      ROL	R31
    032EF 0FEE      LSL	R30
    032F0 1FFF      ROL	R31
    032F1 0FEE      LSL	R30
    032F2 1FFF      ROL	R31
    032F3 0FE8      ADD	R30,R24
    032F4 1FF9      ADC	R31,R25
    032F5 8020      LD	R2,Z
    032F6 2022      TST	R2
    032F7 F079      BEQ	0x3307
(0070)               {
(0071) 		         Tasks[Index].RunMe =1;     
    032F8 EF89      LDI	R24,0xF9
    032F9 E097      LDI	R25,7
    032FA 2FE4      MOV	R30,R20
    032FB 27FF      CLR	R31
    032FC 0FEE      LSL	R30
    032FD 1FFF      ROL	R31
    032FE 0FEE      LSL	R30
    032FF 1FFF      ROL	R31
    03300 0FEE      LSL	R30
    03301 1FFF      ROL	R31
    03302 0FE8      ADD	R30,R24
    03303 1FF9      ADC	R31,R25
    03304 E081      LDI	R24,1
    03305 8380      ST	Z,R24
(0072) 			  }
    03306 C041      RJMP	0x3348
(0073) 			 else
(0074) 			  {
(0075) 			 	(*Tasks[Index].pTask)();
    03307 EF83      LDI	R24,0xF3
    03308 E097      LDI	R25,7
    03309 2FE4      MOV	R30,R20
    0330A 27FF      CLR	R31
    0330B 0FEE      LSL	R30
    0330C 1FFF      ROL	R31
    0330D 0FEE      LSL	R30
    0330E 1FFF      ROL	R31
    0330F 0FEE      LSL	R30
    03310 1FFF      ROL	R31
    03311 0FE8      ADD	R30,R24
    03312 1FF9      ADC	R31,R25
    03313 81A0      LD	R26,Z
    03314 81B1      LDD	R27,Z+1
    03315 01FD      MOVW	R30,R26
    03316 940E 4551 CALL	xicallx
(0076)                 Tasks[Index].RunMe=0; 
    03318 EF89      LDI	R24,0xF9
    03319 E097      LDI	R25,7
    0331A 2FE4      MOV	R30,R20
    0331B 27FF      CLR	R31
    0331C 0FEE      LSL	R30
    0331D 1FFF      ROL	R31
    0331E 0FEE      LSL	R30
    0331F 1FFF      ROL	R31
    03320 0FEE      LSL	R30
    03321 1FFF      ROL	R31
    03322 0FE8      ADD	R30,R24
    03323 1FF9      ADC	R31,R25
    03324 2422      CLR	R2
    03325 8220      ST	Z,R2
(0077) 	 		    if(Tasks[Index].Period==0)
    03326 EF87      LDI	R24,0xF7
    03327 E097      LDI	R25,7
    03328 2FE4      MOV	R30,R20
    03329 27FF      CLR	R31
    0332A 0FEE      LSL	R30
    0332B 1FFF      ROL	R31
    0332C 0FEE      LSL	R30
    0332D 1FFF      ROL	R31
    0332E 0FEE      LSL	R30
    0332F 1FFF      ROL	R31
    03330 0FE8      ADD	R30,R24
    03331 1FF9      ADC	R31,R25
    03332 8020      LD	R2,Z
    03333 8031      LDD	R3,Z+1
    03334 2022      TST	R2
    03335 F491      BNE	0x3348
    03336 2033      TST	R3
    03337 F481      BNE	0x3348
(0078) 				 {
(0079) 				   Tasks[Index].pTask =0;
    03338 EF83      LDI	R24,0xF3
    03339 E097      LDI	R25,7
    0333A 2FE4      MOV	R30,R20
    0333B 27FF      CLR	R31
    0333C 0FEE      LSL	R30
    0333D 1FFF      ROL	R31
    0333E 0FEE      LSL	R30
    0333F 1FFF      ROL	R31
    03340 0FEE      LSL	R30
    03341 1FFF      ROL	R31
    03342 0FE8      ADD	R30,R24
    03343 1FF9      ADC	R31,R25
    03344 2422      CLR	R2
    03345 2433      CLR	R3
    03346 8231      STD	Z+1,R3
    03347 8220      ST	Z,R2
(0080) 				 }
(0081) 			  }	   
(0082) 			 if(Tasks[Index].Period)
    03348 EF87      LDI	R24,0xF7
    03349 E097      LDI	R25,7
    0334A 2FE4      MOV	R30,R20
    0334B 27FF      CLR	R31
    0334C 0FEE      LSL	R30
    0334D 1FFF      ROL	R31
    0334E 0FEE      LSL	R30
    0334F 1FFF      ROL	R31
    03350 0FEE      LSL	R30
    03351 1FFF      ROL	R31
    03352 0FE8      ADD	R30,R24
    03353 1FF9      ADC	R31,R25
    03354 8020      LD	R2,Z
    03355 8031      LDD	R3,Z+1
    03356 2022      TST	R2
    03357 F419      BNE	0x335B
    03358 2033      TST	R3
    03359 F409      BNE	0x335B
    0335A C028      RJMP	0x3383
(0083) 			   {
(0084) 			     Tasks[Index].Delay = Tasks[Index].Period;
    0335B 2E24      MOV	R2,R20
    0335C 2433      CLR	R3
    0335D 0C22      LSL	R2
    0335E 1C33      ROL	R3
    0335F 0C22      LSL	R2
    03360 1C33      ROL	R3
    03361 0C22      LSL	R2
    03362 1C33      ROL	R3
    03363 0121      MOVW	R4,R2
    03364 01F1      MOVW	R30,R2
    03365 0FE8      ADD	R30,R24
    03366 1FF9      ADC	R31,R25
    03367 8020      LD	R2,Z
    03368 8031      LDD	R3,Z+1
    03369 EF85      LDI	R24,0xF5
    0336A E097      LDI	R25,7
    0336B 01F2      MOVW	R30,R4
    0336C 0FE8      ADD	R30,R24
    0336D 1FF9      ADC	R31,R25
    0336E 8231      STD	Z+1,R3
    0336F 8220      ST	Z,R2
(0085) 			   }	
(0086) 		   }
    03370 C012      RJMP	0x3383
(0087) 		  else 
(0088) 		   {
(0089) 		     Tasks[Index].Delay -=1;
    03371 EF85      LDI	R24,0xF5
    03372 E097      LDI	R25,7
    03373 2E24      MOV	R2,R20
    03374 2433      CLR	R3
    03375 0C22      LSL	R2
    03376 1C33      ROL	R3
    03377 0C22      LSL	R2
    03378 1C33      ROL	R3
    03379 0C22      LSL	R2
    0337A 1C33      ROL	R3
    0337B 0E28      ADD	R2,R24
    0337C 1E39      ADC	R3,R25
    0337D 01F1      MOVW	R30,R2
    0337E 8180      LD	R24,Z
    0337F 8191      LDD	R25,Z+1
    03380 9701      SBIW	R24,1
    03381 8391      STD	Z+1,R25
    03382 8380      ST	Z,R24
    03383 9543      INC	R20
    03384 304B      CPI	R20,0xB
    03385 F408      BCC	0x3387
    03386 CF3B      RJMP	0x32C2
    03387 9149      LD	R20,Y+
    03388 9508      RET
_Dispartch_Task:
  Index                --> R20
    03389 934A      ST	-Y,R20
(0090) 		   }
(0091) 	   }
(0092) 	}
(0093) }	
(0094) //调度
(0095) void Dispartch_Task(void)
(0096)  {
(0097)     unsigned char Index;
(0098) 	for(Index = 0; Index < MAX_TASKS;Index++)
    0338A 2744      CLR	R20
    0338B C047      RJMP	0x33D3
(0099) 	  {
(0100) 	    if(Tasks[Index].RunMe>0)
    0338C EF89      LDI	R24,0xF9
    0338D E097      LDI	R25,7
    0338E 2FE4      MOV	R30,R20
    0338F 27FF      CLR	R31
    03390 0FEE      LSL	R30
    03391 1FFF      ROL	R31
    03392 0FEE      LSL	R30
    03393 1FFF      ROL	R31
    03394 0FEE      LSL	R30
    03395 1FFF      ROL	R31
    03396 0FE8      ADD	R30,R24
    03397 1FF9      ADC	R31,R25
    03398 8020      LD	R2,Z
    03399 E080      LDI	R24,0
    0339A 1582      CP	R24,R2
    0339B F008      BCS	0x339D
    0339C C035      RJMP	0x33D2
(0101) 		  {
(0102) 		    (*Tasks[Index].pTask)();
    0339D EF83      LDI	R24,0xF3
    0339E E097      LDI	R25,7
    0339F 2FE4      MOV	R30,R20
    033A0 27FF      CLR	R31
    033A1 0FEE      LSL	R30
    033A2 1FFF      ROL	R31
    033A3 0FEE      LSL	R30
    033A4 1FFF      ROL	R31
    033A5 0FEE      LSL	R30
    033A6 1FFF      ROL	R31
    033A7 0FE8      ADD	R30,R24
    033A8 1FF9      ADC	R31,R25
    033A9 81A0      LD	R26,Z
    033AA 81B1      LDD	R27,Z+1
    033AB 01FD      MOVW	R30,R26
    033AC 940E 4551 CALL	xicallx
(0103) 		    Tasks[Index].RunMe-=1;
    033AE EF89      LDI	R24,0xF9
    033AF E097      LDI	R25,7
    033B0 2E24      MOV	R2,R20
    033B1 2433      CLR	R3
    033B2 0C22      LSL	R2
    033B3 1C33      ROL	R3
    033B4 0C22      LSL	R2
    033B5 1C33      ROL	R3
    033B6 0C22      LSL	R2
    033B7 1C33      ROL	R3
    033B8 0E28      ADD	R2,R24
    033B9 1E39      ADC	R3,R25
    033BA 01F1      MOVW	R30,R2
    033BB 8180      LD	R24,Z
    033BC 5081      SUBI	R24,1
    033BD 8380      ST	Z,R24
(0104) 			if(Tasks[Index].Period == 0)
    033BE EF87      LDI	R24,0xF7
    033BF E097      LDI	R25,7
    033C0 2FE4      MOV	R30,R20
    033C1 27FF      CLR	R31
    033C2 0FEE      LSL	R30
    033C3 1FFF      ROL	R31
    033C4 0FEE      LSL	R30
    033C5 1FFF      ROL	R31
    033C6 0FEE      LSL	R30
    033C7 1FFF      ROL	R31
    033C8 0FE8      ADD	R30,R24
    033C9 1FF9      ADC	R31,R25
    033CA 8020      LD	R2,Z
    033CB 8031      LDD	R3,Z+1
    033CC 2022      TST	R2
    033CD F421      BNE	0x33D2
    033CE 2033      TST	R3
    033CF F411      BNE	0x33D2
(0105) 			  {
(0106) 			   Delete_Task(Index);
    033D0 2F04      MOV	R16,R20
    033D1 DE8D      RCALL	_Delete_Task
    033D2 9543      INC	R20
    033D3 304B      CPI	R20,0xB
    033D4 F408      BCC	0x33D6
    033D5 CFB6      RJMP	0x338C
    033D6 9149      LD	R20,Y+
    033D7 9508      RET
_uart0_rx_isr:
  len                  --> R22
  i                    --> R20
    033D8 920A      ST	-Y,R0
    033D9 921A      ST	-Y,R1
    033DA 922A      ST	-Y,R2
    033DB 923A      ST	-Y,R3
    033DC 930A      ST	-Y,R16
    033DD 931A      ST	-Y,R17
    033DE 938A      ST	-Y,R24
    033DF 939A      ST	-Y,R25
    033E0 93AA      ST	-Y,R26
    033E1 93BA      ST	-Y,R27
    033E2 93EA      ST	-Y,R30
    033E3 93FA      ST	-Y,R31
    033E4 B60F      IN	R0,0x3F
    033E5 920A      ST	-Y,R0
    033E6 934A      ST	-Y,R20
    033E7 936A      ST	-Y,R22
FILE: E:\1.JD_Project\21.Android-360\1.Android-360Code\App\uart.c
(0001) #include "includes.h"
(0002) #include <iom128v.h>
(0003) #include <macros.h>
(0004) #include <eeprom.h>
(0005) const unsigned char filename[]={"LOGO.BMP\0"};
(0006) const unsigned char filename1[]={"L.BMP\0"};
(0007) const unsigned char usbtext[]={"USB ERROR\0"};
(0008) const unsigned char ERR_USR_COUNNECT[]={"The USB device has disconnected,or not connected.\0"};
(0009) const unsigned char ERR_DISK_DISCON[]={"The USB device has disconnected,or not connected.\0"};
(0010) const unsigned char ERR_SUCCESS[]={"success\0"};
(0011) const unsigned char ERR_STATUS_ERR[]={"Disk status error, may be connecting or disconnect.\0"};
(0012) const unsigned char ERR_FAT_ERROR[]={"Disk file system does not support.\0"};
(0013) const unsigned char ERR_DISK_FULL[]={"Disk file is too full, the remaining space is too little.\0"};
(0014) const unsigned char ERR_MISS_DIR[]={"The home DIR you specified does not exist\0"};
(0015) const unsigned char ERR_FILE_CLOSE[]={"File has already closed, if need to use,please open again.\0"};
(0016) const unsigned char ERR_OPEN_DIR[]={"The specified path is opened.\0"};
(0017) const unsigned char ERR_MISS_FILE[]={"The home DIR you specified does not exist, maybe the wrong file name.\0"};
(0018) const unsigned char ERR_USB_DISK_ERR[]={"the USB memory operation failed.\0"};
(0019) unsigned char RTX=0;
(0020) 
(0021) unsigned char DwinCmd = 0;
(0022) unsigned int DwinAddr = 0;
(0023) unsigned int DwinData = 0;
(0024) unsigned int Dwindata2 = 0;
(0025) unsigned char DIWEN_RECEICEDATA_STATE=0;//接收迪文数据状态
(0026) unsigned char SAVE_FAT_FLAME;//爆脂能量等级
(0027) 
(0028) #pragma interrupt_handler uart0_rx_isr:19
(0029) void uart0_rx_isr(void)
(0030) {
(0031)    unsigned char i;
(0032)    unsigned char len;
(0033)    i=UDR0; 
    033E8 B14C      IN	R20,0x0C
(0034)    if(RTX==1) return;
    033E9 9180 03CC LDS	R24,RTX
    033EB 3081      CPI	R24,1
    033EC F409      BNE	0x33EE
    033ED C073      RJMP	0x3461
(0035)    if(R_full==1)return;//接收缓冲区不空   
    033EE 9180 038E LDS	R24,R_full
    033F0 3081      CPI	R24,1
    033F1 F409      BNE	0x33F3
    033F2 C06E      RJMP	0x3461
(0036)    if ((R_count==0)&&(i==0x5A))//判断头是5a
    033F3 9020 038B LDS	R2,R_count
    033F5 2022      TST	R2
    033F6 F449      BNE	0x3400
    033F7 354A      CPI	R20,0x5A
    033F8 F439      BNE	0x3400
(0037)     {
(0038)       R_buf[0]=i;
    033F9 9340 0133 STS	R_buf,R20
(0039) 	    R_count+=1;
    033FB 2D82      MOV	R24,R2
    033FC 5F8F      SUBI	R24,0xFF
    033FD 9380 038B STS	R_count,R24
(0040)     }
    033FF C017      RJMP	0x3417
(0041)    else if(R_count>0)
    03400 E080      LDI	R24,0
    03401 9020 038B LDS	R2,R_count
    03403 1582      CP	R24,R2
    03404 F468      BCC	0x3412
(0042)     {
(0043)       R_buf[R_count]=i;
    03405 E383      LDI	R24,0x33
    03406 E091      LDI	R25,1
    03407 2DE2      MOV	R30,R2
    03408 27FF      CLR	R31
    03409 0FE8      ADD	R30,R24
    0340A 1FF9      ADC	R31,R25
    0340B 8340      ST	Z,R20
(0044) 	    R_count+=1; 
    0340C 9180 038B LDS	R24,R_count
    0340E 5F8F      SUBI	R24,0xFF
    0340F 9380 038B STS	R_count,R24
(0045)     }
    03411 C005      RJMP	0x3417
(0046)    else
(0047)     {
(0048)       R_count=0;
    03412 2422      CLR	R2
    03413 9220 038B STS	R_count,R2
(0049) 	    R_full=0;
    03415 9220 038E STS	R_full,R2
(0050)     }
(0051)    if(R_count>40)//长度不能超过30
    03417 E288      LDI	R24,0x28
    03418 9020 038B LDS	R2,R_count
    0341A 1582      CP	R24,R2
    0341B F418      BCC	0x341F
(0052)    {
(0053)     R_count=0;
    0341C 2422      CLR	R2
    0341D 9220 038B STS	R_count,R2
(0054)    }
(0055)    if(R_count>5)//接收数据长度
    0341F E085      LDI	R24,5
    03420 9020 038B LDS	R2,R_count
    03422 1582      CP	R24,R2
    03423 F410      BCC	0x3426
(0056)    {
(0057)       len=R_buf[4];
    03424 9160 0137 LDS	R22,R_buf+4
(0058)    }
(0059)    if(R_count==(len+9))
    03426 2F86      MOV	R24,R22
    03427 5F87      SUBI	R24,0xF7
    03428 9020 038B LDS	R2,R_count
    0342A 1628      CP	R2,R24
    0342B F439      BNE	0x3433
(0060)     {
(0061) 	   R_full=1;
    0342C E081      LDI	R24,1
    0342D 9380 038E STS	R_full,R24
(0062) 	   R_count=0;
    0342F 2422      CLR	R2
    03430 9220 038B STS	R_count,R2
(0063)      len=0;
    03432 2766      CLR	R22
(0064) 	  }
(0065)    if(R_full==1)//处理数据
    03433 9180 038E LDS	R24,R_full
    03435 3081      CPI	R24,1
    03436 F551      BNE	0x3461
(0066)    {
(0067)     for(i=0;i<30;i++)
    03437 2744      CLR	R20
    03438 C016      RJMP	0x344F
(0068)     {RX1Data[RX1Counterhead][i]=R_buf[i];}
    03439 9110 0577 LDS	R17,RX1Counterhead
    0343B E10E      LDI	R16,0x1E
    0343C 0301      MULSU	R16,R17
    0343D 0110      MOVW	R2,R0
    0343E E788      LDI	R24,0x78
    0343F E095      LDI	R25,5
    03440 0E28      ADD	R2,R24
    03441 1E39      ADC	R3,R25
    03442 2FE4      MOV	R30,R20
    03443 27FF      CLR	R31
    03444 0DE2      ADD	R30,R2
    03445 1DF3      ADC	R31,R3
    03446 E383      LDI	R24,0x33
    03447 E091      LDI	R25,1
    03448 2FA4      MOV	R26,R20
    03449 27BB      CLR	R27
    0344A 0FA8      ADD	R26,R24
    0344B 1FB9      ADC	R27,R25
    0344C 902C      LD	R2,X
    0344D 8220      ST	Z,R2
    0344E 9543      INC	R20
    0344F 314E      CPI	R20,0x1E
    03450 F340      BCS	0x3439
(0069)    // memcpy(&RX1Data[RX1Counter][0], R_buf, len+3);
(0070)     RX1Counterhead++;
    03451 9180 0577 LDS	R24,RX1Counterhead
    03453 5F8F      SUBI	R24,0xFF
    03454 9380 0577 STS	RX1Counterhead,R24
(0071)     if(RX1Counterhead>20){RX1Counterhead=0;}
    03456 E184      LDI	R24,0x14
    03457 9020 0577 LDS	R2,RX1Counterhead
    03459 1582      CP	R24,R2
    0345A F418      BCC	0x345E
    0345B 2422      CLR	R2
    0345C 9220 0577 STS	RX1Counterhead,R2
(0072)     R_full=0;
    0345E 2422      CLR	R2
    0345F 9220 038E STS	R_full,R2
(0073) 
(0074) 
(0075)     /*
(0076)     if(DisPage==MVPAGE)
(0077) 	  {
(0078) 	  R_full=0;
(0079) 	  MC=1;
(0080) 	  return;
(0081) 	  }
(0082) 	  MV=0;
(0083)     if(R_buf[1]==0x72)
(0084) 	  {
(0085) 	  Touch_Buf=TOUCH_UP;
(0086) 	  Touch_X=R_buf[2];
(0087) 	  Touch_X<<=8;
(0088) 	  Touch_X+=R_buf[3];
(0089) 	  Touch_Y=R_buf[4];
(0090) 	  Touch_Y<<=8;
(0091) 	  Touch_Y+=R_buf[5];
(0092) 	  }
(0093) 	else if(R_buf[1]==0x73)
(0094) 	  {
(0095) 	  Touch_Buf=TOUCH_DOWN;
(0096) 	  Touch_X=R_buf[2];
(0097) 	  Touch_X<<=8;
(0098) 	  Touch_X+=R_buf[3];
(0099) 	  Touch_Y=R_buf[4];
(0100) 	  Touch_Y<<=8;
(0101) 	  Touch_Y+=R_buf[5];
(0102) 	  }
(0103)     else if(R_buf[1]==0x78)
(0104) 	  {
(0105) 	  Touch_Buf=TOUCH_UP;
(0106) 	  Touch_ID=R_buf[2];
(0107) 	  Touch_ID<<=8;
(0108) 	  Touch_ID+=R_buf[3];
(0109) 	  }
(0110) 	else if(R_buf[1]==0x79)
(0111) 	  {
(0112) 	  Touch_Buf=TOUCH_DOWN;
(0113) 	  Touch_ID=R_buf[2];
(0114) 	  Touch_ID<<=8;
(0115) 	  Touch_ID+=R_buf[3];
(0116) 	  }
(0117) 	else if((R_buf[1]==0x9B)&&(R_buf[2]==0x5A))//时间
(0118) 	  {
(0119) 	  for(i=0;i<7;i++)
(0120) 	  {
(0121) 	    datetime[i]=R_buf[i+3];
(0122) 	  }
(0123) 	  }
(0124) 	  R_full=0;
(0125)     */
(0126)     }
    03461 9169      LD	R22,Y+
    03462 9149      LD	R20,Y+
    03463 9009      LD	R0,Y+
    03464 BE0F      OUT	0x3F,R0
    03465 91F9      LD	R31,Y+
    03466 91E9      LD	R30,Y+
    03467 91B9      LD	R27,Y+
    03468 91A9      LD	R26,Y+
    03469 9199      LD	R25,Y+
    0346A 9189      LD	R24,Y+
    0346B 9119      LD	R17,Y+
    0346C 9109      LD	R16,Y+
    0346D 9039      LD	R3,Y+
    0346E 9029      LD	R2,Y+
    0346F 9019      LD	R1,Y+
    03470 9009      LD	R0,Y+
    03471 9518      RETI
_uart1_rx_isr:
  i                    --> R20
    03472 920A      ST	-Y,R0
    03473 921A      ST	-Y,R1
    03474 922A      ST	-Y,R2
    03475 923A      ST	-Y,R3
    03476 930A      ST	-Y,R16
    03477 931A      ST	-Y,R17
    03478 938A      ST	-Y,R24
    03479 939A      ST	-Y,R25
    0347A 93AA      ST	-Y,R26
    0347B 93BA      ST	-Y,R27
    0347C 93EA      ST	-Y,R30
    0347D 93FA      ST	-Y,R31
    0347E B60F      IN	R0,0x3F
    0347F 920A      ST	-Y,R0
    03480 934A      ST	-Y,R20
(0127) }
(0128) #pragma interrupt_handler uart1_rx_isr:31
(0129) void uart1_rx_isr(void)
(0130) {
(0131)   unsigned char i;
(0132)   i=UDR1; 
    03481 9140 009C LDS	R20,0x9C
(0133)   if(R_full1==1)return;                            //接收缓冲区不空    
    03483 9180 038F LDS	R24,R_full1
    03485 3081      CPI	R24,1
    03486 F409      BNE	0x3488
    03487 C069      RJMP	0x34F1
(0134)   if(R_count1==0)
    03488 9020 038C LDS	R2,R_count1
    0348A 2022      TST	R2
    0348B F449      BNE	0x3495
(0135)   {
(0136)     if(i==0xaa)
    0348C 3A4A      CPI	R20,0xAA
    0348D F549      BNE	0x34B7
(0137) 	{
(0138)       R_buf1[0]=i;
    0348E 9340 022D STS	R_buf1,R20
(0139)       R_count1+=1;
    03490 2D82      MOV	R24,R2
    03491 5F8F      SUBI	R24,0xFF
    03492 9380 038C STS	R_count1,R24
(0140) 	}
(0141)   }
    03494 C022      RJMP	0x34B7
(0142)   else if(R_count1==1)
    03495 9180 038C LDS	R24,R_count1
    03497 3081      CPI	R24,1
    03498 F431      BNE	0x349F
(0143)   {
(0144)     R_buf1[1]=i;
    03499 9340 022E STS	R_buf1+1,R20
(0145)     R_count1+=1; 
    0349B 5F8F      SUBI	R24,0xFF
    0349C 9380 038C STS	R_count1,R24
(0146)   }
    0349E C018      RJMP	0x34B7
(0147)   else if(R_count1<R_buf1[1])
    0349F 9020 022E LDS	R2,R_buf1+1
    034A1 9030 038C LDS	R3,R_count1
    034A3 1432      CP	R3,R2
    034A4 F468      BCC	0x34B2
(0148)   {
(0149)     R_buf1[R_count1]=i;
    034A5 E28D      LDI	R24,0x2D
    034A6 E092      LDI	R25,2
    034A7 2DE3      MOV	R30,R3
    034A8 27FF      CLR	R31
    034A9 0FE8      ADD	R30,R24
    034AA 1FF9      ADC	R31,R25
    034AB 8340      ST	Z,R20
(0150) 	R_count1+=1; 
    034AC 9180 038C LDS	R24,R_count1
    034AE 5F8F      SUBI	R24,0xFF
    034AF 9380 038C STS	R_count1,R24
(0151)   }
    034B1 C005      RJMP	0x34B7
(0152)   else
(0153)   {
(0154)     R_full1=0;
    034B2 2422      CLR	R2
    034B3 9220 038F STS	R_full1,R2
(0155) 	R_count1=0;
    034B5 9220 038C STS	R_count1,R2
(0156)   }
(0157)   if(R_count1==R_buf1[1])
    034B7 9020 022E LDS	R2,R_buf1+1
    034B9 9030 038C LDS	R3,R_count1
    034BB 1432      CP	R3,R2
    034BC F431      BNE	0x34C3
(0158)   {
(0159) 	R_full1=1;
    034BD E081      LDI	R24,1
    034BE 9380 038F STS	R_full1,R24
(0160) 	R_count1=0;
    034C0 2422      CLR	R2
    034C1 9220 038C STS	R_count1,R2
(0161)   }
(0162) 
(0163)   if (R_full1==1)
    034C3 9180 038F LDS	R24,R_full1
    034C5 3081      CPI	R24,1
    034C6 F551      BNE	0x34F1
(0164)   {
(0165)     for(i=0;i<30;i++)
    034C7 2744      CLR	R20
    034C8 C016      RJMP	0x34DF
(0166)     {RX2Data[RX2Counterhead][i]=R_buf1[i];}
    034C9 9110 0449 LDS	R17,RX2Counterhead
    034CB E10E      LDI	R16,0x1E
    034CC 0301      MULSU	R16,R17
    034CD 0110      MOVW	R2,R0
    034CE E48A      LDI	R24,0x4A
    034CF E094      LDI	R25,4
    034D0 0E28      ADD	R2,R24
    034D1 1E39      ADC	R3,R25
    034D2 2FE4      MOV	R30,R20
    034D3 27FF      CLR	R31
    034D4 0DE2      ADD	R30,R2
    034D5 1DF3      ADC	R31,R3
    034D6 E28D      LDI	R24,0x2D
    034D7 E092      LDI	R25,2
    034D8 2FA4      MOV	R26,R20
    034D9 27BB      CLR	R27
    034DA 0FA8      ADD	R26,R24
    034DB 1FB9      ADC	R27,R25
    034DC 902C      LD	R2,X
    034DD 8220      ST	Z,R2
    034DE 9543      INC	R20
    034DF 314E      CPI	R20,0x1E
    034E0 F340      BCS	0x34C9
(0167)    // memcpy(&RX1Data[RX1Counter][0], R_buf, len+3);
(0168)     RX2Counterhead++;
    034E1 9180 0449 LDS	R24,RX2Counterhead
    034E3 5F8F      SUBI	R24,0xFF
    034E4 9380 0449 STS	RX2Counterhead,R24
(0169)     if(RX2Counterhead>10){RX2Counterhead=0;}
    034E6 E08A      LDI	R24,0xA
    034E7 9020 0449 LDS	R2,RX2Counterhead
    034E9 1582      CP	R24,R2
    034EA F418      BCC	0x34EE
    034EB 2422      CLR	R2
    034EC 9220 0449 STS	RX2Counterhead,R2
(0170)     R_full1=0;
    034EE 2422      CLR	R2
    034EF 9220 038F STS	R_full1,R2
(0171)   }
    034F1 9149      LD	R20,Y+
    034F2 9009      LD	R0,Y+
    034F3 BE0F      OUT	0x3F,R0
    034F4 91F9      LD	R31,Y+
    034F5 91E9      LD	R30,Y+
    034F6 91B9      LD	R27,Y+
    034F7 91A9      LD	R26,Y+
    034F8 9199      LD	R25,Y+
    034F9 9189      LD	R24,Y+
    034FA 9119      LD	R17,Y+
    034FB 9109      LD	R16,Y+
    034FC 9039      LD	R3,Y+
    034FD 9029      LD	R2,Y+
    034FE 9019      LD	R1,Y+
    034FF 9009      LD	R0,Y+
    03500 9518      RETI
_uart0_tx_isr:
    03501 922A      ST	-Y,R2
    03502 923A      ST	-Y,R3
    03503 938A      ST	-Y,R24
    03504 939A      ST	-Y,R25
    03505 93EA      ST	-Y,R30
    03506 93FA      ST	-Y,R31
    03507 B62F      IN	R2,0x3F
    03508 922A      ST	-Y,R2
(0172) 
(0173) }
(0174) 
(0175) //串口发送中断程序
(0176) #pragma interrupt_handler uart0_tx_isr:21
(0177) void uart0_tx_isr(void)
(0178) {
(0179)   if(T_ptr<T_count)
    03509 9020 0391 LDS	R2,T_count
    0350B 9030 0390 LDS	R3,T_ptr
    0350D 1432      CP	R3,R2
    0350E F468      BCC	0x351C
(0180)    {
(0181)      UDR0=T_buf[T_ptr];
    0350F E981      LDI	R24,0x91
    03510 E092      LDI	R25,2
    03511 2DE3      MOV	R30,R3
    03512 27FF      CLR	R31
    03513 0FE8      ADD	R30,R24
    03514 1FF9      ADC	R31,R25
    03515 8020      LD	R2,Z
    03516 B82C      OUT	0x0C,R2
(0182)      T_ptr++;
    03517 2D83      MOV	R24,R3
    03518 5F8F      SUBI	R24,0xFF
    03519 9380 0390 STS	T_ptr,R24
(0183)    }
    0351B C005      RJMP	0x3521
(0184)   else
(0185)   {
(0186)     T_count=0;
    0351C 2422      CLR	R2
    0351D 9220 0391 STS	T_count,R2
(0187) 	T_ptr=0;
    0351F 9220 0390 STS	T_ptr,R2
(0188)   }
    03521 9029      LD	R2,Y+
    03522 BE2F      OUT	0x3F,R2
    03523 91F9      LD	R31,Y+
    03524 91E9      LD	R30,Y+
    03525 9199      LD	R25,Y+
    03526 9189      LD	R24,Y+
    03527 9039      LD	R3,Y+
    03528 9029      LD	R2,Y+
    03529 9518      RETI
_uart1_tx_isr:
    0352A 922A      ST	-Y,R2
    0352B 923A      ST	-Y,R3
    0352C 938A      ST	-Y,R24
    0352D 939A      ST	-Y,R25
    0352E 93EA      ST	-Y,R30
    0352F 93FA      ST	-Y,R31
    03530 B62F      IN	R2,0x3F
    03531 922A      ST	-Y,R2
(0189) }
(0190) #pragma interrupt_handler uart1_tx_isr:33
(0191) void uart1_tx_isr(void)
(0192) {
(0193)   if(T_ptr<T_count)
    03532 9020 0391 LDS	R2,T_count
    03534 9030 0390 LDS	R3,T_ptr
    03536 1432      CP	R3,R2
    03537 F478      BCC	0x3547
(0194)    {
(0195)      TXD;
    03538 9A91      SBI	0x12,1
(0196)      UDR1=T_buf[T_ptr];
    03539 E981      LDI	R24,0x91
    0353A E092      LDI	R25,2
    0353B 2DE3      MOV	R30,R3
    0353C 27FF      CLR	R31
    0353D 0FE8      ADD	R30,R24
    0353E 1FF9      ADC	R31,R25
    0353F 8020      LD	R2,Z
    03540 9220 009C STS	0x9C,R2
(0197)      T_ptr++;
    03542 2D83      MOV	R24,R3
    03543 5F8F      SUBI	R24,0xFF
    03544 9380 0390 STS	T_ptr,R24
(0198)    }
    03546 C006      RJMP	0x354D
(0199)   else
(0200)   {
(0201)     T_count=0;
    03547 2422      CLR	R2
    03548 9220 0391 STS	T_count,R2
(0202) 	T_ptr=0;
    0354A 9220 0390 STS	T_ptr,R2
(0203) 	RXD;
    0354C 9891      CBI	0x12,1
(0204)   }
    0354D 9029      LD	R2,Y+
    0354E BE2F      OUT	0x3F,R2
    0354F 91F9      LD	R31,Y+
    03550 91E9      LD	R30,Y+
    03551 9199      LD	R25,Y+
    03552 9189      LD	R24,Y+
    03553 9039      LD	R3,Y+
    03554 9029      LD	R2,Y+
    03555 9518      RETI
_WaitTX:
  time                 --> Y,+0
    03556 940E 43E4 CALL	push_arg4
(0205) }
(0206) void WaitTX(unsigned long time)
(0207) {
(0208)   DelayMs=time;
    03558 8028      LD	R2,Y
    03559 8039      LDD	R3,Y+1
    0355A 9230 011D STS	DelayMs+1,R3
    0355C 9220 011C STS	DelayMs,R2
(0209)   DelayMs=time;
    0355E 9230 011D STS	DelayMs+1,R3
    03560 9220 011C STS	DelayMs,R2
(0210)   while((R_full==0)&&(DelayMs>0));
    03562 9020 038E LDS	R2,R_full
    03564 2022      TST	R2
    03565 F441      BNE	0x356E
    03566 9020 011C LDS	R2,DelayMs
    03568 9030 011D LDS	R3,DelayMs+1
    0356A 2022      TST	R2
    0356B F7B1      BNE	0x3562
    0356C 2033      TST	R3
    0356D F7A1      BNE	0x3562
    0356E 9624      ADIW	R28,4
    0356F 9508      RET
_WaitRX:
  time                 --> Y,+0
    03570 940E 43E4 CALL	push_arg4
(0211) }
(0212) void WaitRX(unsigned long time)
(0213) {
(0214)   DelayMs=time;
    03572 8028      LD	R2,Y
    03573 8039      LDD	R3,Y+1
    03574 9230 011D STS	DelayMs+1,R3
    03576 9220 011C STS	DelayMs,R2
(0215)   while(((R_full==0)&&(DelayMs>0)));
    03578 9020 038E LDS	R2,R_full
    0357A 2022      TST	R2
    0357B F441      BNE	0x3584
    0357C 9020 011C LDS	R2,DelayMs
    0357E 9030 011D LDS	R3,DelayMs+1
    03580 2022      TST	R2
    03581 F7B1      BNE	0x3578
    03582 2033      TST	R3
    03583 F7A1      BNE	0x3578
    03584 9624      ADIW	R28,4
    03585 9508      RET
_DefaultSetting:
  buff                 --> Y,+2
    03586 9762      SBIW	R28,0x12
(0216) }
(0217) /*void Wait(unsigned long time)
(0218) {
(0219)   unsigned long x=0;
(0220)   while(T_count>0)
(0221)   {
(0222)    x++;
(0223)    if(x>time)
(0224)    {
(0225)      T_count=0;
(0226)    }
(0227)   }
(0228) }*/
(0229) 
(0230) /*HAO***************************************************/
(0231) DATE_STRUCT DwinDate;//迪文屏 RTC数值
(0232) Treatment_information HNDLE_INFORMATION;//整机运行使用当前的参数
(0233) Treatment_state MACHINE_STATE;
(0234) 
(0235) Set_information SettingDdata;//后台治疗参数
(0236) 
(0237) static const unsigned char CRCHigh[] = {
(0238) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0239) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
(0240) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0241) 	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
(0242) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0243) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
(0244) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
(0245) 	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
(0246) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0247) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
(0248) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0249) 	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
(0250) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0251) 	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
(0252) 	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
(0253) 	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
(0254) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0255) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
(0256) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0257) 	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
(0258) 	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
(0259) 	0x00, 0xC1, 0x81, 0x40};
(0260) 
(0261) static const unsigned char CRCLow[] = {
(0262) 	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
(0263) 	0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
(0264) 	0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
(0265) 	0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
(0266) 	0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
(0267) 	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
(0268) 	0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
(0269) 	0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
(0270) 	0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
(0271) 	0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
(0272) 	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
(0273) 	0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
(0274) 	0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
(0275) 	0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
(0276) 	0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
(0277) 	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
(0278) 	0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
(0279) 	0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
(0280) 	0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
(0281) 	0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
(0282) 	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
(0283) 	0x41, 0x81, 0x80, 0x40};
(0284) /**
(0285)  * @brief  手柄默认配置
(0286)  * @note   
(0287)  * @param 
(0288)  * @retval 无
(0289)  */
(0290) void DefaultSetting(void)
(0291) {
(0292)   unsigned char buff[16]; //缓存 
(0293) 
(0294)   HNDLE_INFORMATION.SAVE_PRESS=DEFAULTDATA;
    03587 E082      LDI	R24,2
    03588 9380 08A0 STS	HNDLE_INFORMATION,R24
(0295)   HNDLE_INFORMATION.SAVE_RF=DEFAULTDATA;
    0358A 9380 08A1 STS	HNDLE_INFORMATION+1,R24
(0296)   HNDLE_INFORMATION.SAVE_PRESS_IN=DEFAULTDATA;
    0358C 9380 08A2 STS	HNDLE_INFORMATION+2,R24
(0297)   HNDLE_INFORMATION.SAVE_PRESS_OUT=DEFAULTDATA;
    0358E 9380 08A3 STS	HNDLE_INFORMATION+3,R24
(0298)   HNDLE_INFORMATION.SAVE_LED=DEFAULTDATA;
    03590 9380 08A4 STS	HNDLE_INFORMATION+4,R24
(0299)   HNDLE_INFORMATION.SAVE_INFRARED=DEFAULTDATA;
    03592 9380 08A5 STS	HNDLE_INFORMATION+5,R24
(0300)   HNDLE_INFORMATION.SAVE_MOTO_SPEED=DEFAULTDATA;
    03594 9380 08A6 STS	HNDLE_INFORMATION+6,R24
(0301)   HNDLE_INFORMATION.SAVE_MOTO_TOWARD=DEFAULTDATA;
    03596 9380 08A7 STS	HNDLE_INFORMATION+7,R24
(0302)   MACHINE_STATE.WORK_SAVE_STATE=3;//默认模式
    03598 E083      LDI	R24,3
    03599 9380 089D STS	MACHINE_STATE+2,R24
(0303)   memset(buff, 0, 6);
    0359B E086      LDI	R24,6
    0359C E090      LDI	R25,0
    0359D 8399      STD	Y+1,R25
    0359E 8388      ST	Y,R24
    0359F 2722      CLR	R18
    035A0 2733      CLR	R19
    035A1 018E      MOVW	R16,R28
    035A2 5F0E      SUBI	R16,0xFE
    035A3 4F1F      SBCI	R17,0xFF
    035A4 940E 43D0 CALL	_memset
(0304)   //DwinWriteLongWords(ADDR_BOOTINGSAVE_ADATA, buff, 3); //清除保存ABC迪文显示
(0305)   //同步数据
(0306)   
(0307)   buff[0]= MACHINE_STATE.HANDLE_ID;
    035A6 9020 089B LDS	R2,MACHINE_STATE
    035A8 822A      STD	Y+2,R2
(0308)   buff[1]=HNDLE_INFORMATION.SAVE_PRESS;
    035A9 9020 08A0 LDS	R2,HNDLE_INFORMATION
    035AB 822B      STD	Y+3,R2
(0309)   buff[2]=HNDLE_INFORMATION.SAVE_RF;
    035AC 9020 08A1 LDS	R2,HNDLE_INFORMATION+1
    035AE 822C      STD	Y+4,R2
(0310)   buff[3]=HNDLE_INFORMATION.SAVE_PRESS_IN;
    035AF 9020 08A2 LDS	R2,HNDLE_INFORMATION+2
    035B1 822D      STD	Y+5,R2
(0311)   buff[4]=HNDLE_INFORMATION.SAVE_PRESS_OUT;
    035B2 9020 08A3 LDS	R2,HNDLE_INFORMATION+3
    035B4 822E      STD	Y+6,R2
(0312)   buff[5]=HNDLE_INFORMATION.SAVE_LED;
    035B5 9020 08A4 LDS	R2,HNDLE_INFORMATION+4
    035B7 822F      STD	Y+7,R2
(0313)   buff[6]=HNDLE_INFORMATION.SAVE_INFRARED;
    035B8 9020 08A5 LDS	R2,HNDLE_INFORMATION+5
    035BA 8628      STD	Y+8,R2
(0314)   buff[7]=HNDLE_INFORMATION.SAVE_MOTO_SPEED;
    035BB 9020 08A6 LDS	R2,HNDLE_INFORMATION+6
    035BD 8629      STD	Y+9,R2
(0315)   buff[8]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;
    035BE 9020 08A7 LDS	R2,HNDLE_INFORMATION+7
    035C0 862A      STD	Y+10,R2
(0316)           
(0317)   //DwinWriteLongWords(ADDR_BOOTINGPRESSLINE, buff, 4); //迪文屏通信
(0318)   //DwinWriteLongWords(ADDR_BOOTINGPRESSDATA, buff, 4);//迪文屏通信函数
(0319)   //DwinWriteLongWords(ADDR_BOOTINGPRESSKEY, buff, 4);//迪文屏通信函数
(0320) 
(0321)   //DwinWriteLongWords(ADDR_BOOTINGLEDLINE, &buff[8], 3); //迪文屏通信
(0322)   //DwinWriteLongWords(ADDR_BOOTINGLEDDATA, &buff[8], 4);//迪文屏通信函数
(0323)   //DwinWriteLongWords(ADDR_BOOTINGLEDKEY, &buff[8], 4);//迪文屏通信函数
(0324)   Intensity[7]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;
    035C1 9220 03BA STS	Intensity+7,R2
(0325)   ModeSet();//电机转向设置
    035C3 940E 099D CALL	_ModeSet
(0326)   DwinWriteLongWords(ADDR_HANDPARAMETER, buff, 9); //对应地址 连续写两个字节 写进度条及变量显示
    035C5 E089      LDI	R24,0x9
    035C6 8388      ST	Y,R24
    035C7 019E      MOVW	R18,R28
    035C8 5F2E      SUBI	R18,0xFE
    035C9 4F3F      SBCI	R19,0xFF
    035CA E000      LDI	R16,0
    035CB E413      LDI	R17,0x43
    035CC D103      RCALL	_DwinWriteLongWords
    035CD 9662      ADIW	R28,0x12
    035CE 9508      RET
_CheckCRC16:
  result               --> R10
  lowByte              --> R22
  highByte             --> R20
  index                --> R12
  length               --> R18
  buff                 --> R16
    035CF 940E 453F CALL	push_xgsetF03C
(0327) }
(0328)   
(0329) /**
(0330)  * @brief  生成CRC校验
(0331)  * @note
(0332)  * @param  *buff: 校验数组地址指针
(0333)  * @param  length: 需要校验的数据长度
(0334)  * @retval 2字节校验结果
(0335)  */
(0336) unsigned int CheckCRC16(unsigned char *buff, unsigned char length)
(0337) {
(0338) 	unsigned int result = 0;
    035D1 24AA      CLR	R10
    035D2 24BB      CLR	R11
(0339) 	unsigned int index = 0;
    035D3 24CC      CLR	R12
    035D4 24DD      CLR	R13
(0340) 	unsigned char highByte = 0xff;
    035D5 EF4F      LDI	R20,0xFF
(0341) 	unsigned char lowByte = 0xff;
    035D6 EF6F      LDI	R22,0xFF
    035D7 C019      RJMP	0x35F1
(0342) 	while (length--)
(0343) 	{
(0344) 		index = lowByte ^ *(buff++);
    035D8 01F8      MOVW	R30,R16
    035D9 9021      LD	R2,Z+
    035DA 018F      MOVW	R16,R30
    035DB 2433      CLR	R3
    035DC 2EC6      MOV	R12,R22
    035DD 24DD      CLR	R13
    035DE 24C2      EOR	R12,R2
    035DF 24D3      EOR	R13,R3
(0345) 		lowByte = (unsigned char)(highByte ^ CRCHigh[index]);
    035E0 E483      LDI	R24,0x43
    035E1 E098      LDI	R25,0x8
    035E2 01F6      MOVW	R30,R12
    035E3 0FE8      ADD	R30,R24
    035E4 1FF9      ADC	R31,R25
    035E5 9026      ELPM	R2,Z
    035E6 2433      CLR	R3
    035E7 2F64      MOV	R22,R20
    035E8 2777      CLR	R23
    035E9 2562      EOR	R22,R2
    035EA 2573      EOR	R23,R3
(0346) 		highByte = CRCLow[index];
    035EB E483      LDI	R24,0x43
    035EC E099      LDI	R25,0x9
    035ED 01F6      MOVW	R30,R12
    035EE 0FE8      ADD	R30,R24
    035EF 1FF9      ADC	R31,R25
    035F0 9146      ELPM	R20,Z
    035F1 2E22      MOV	R2,R18
    035F2 2433      CLR	R3
    035F3 5021      SUBI	R18,1
    035F4 2022      TST	R2
    035F5 F711      BNE	0x35D8
(0347) 	}
(0348) 	result = (unsigned int)highByte << 8 | (unsigned int)lowByte;
    035F6 2E26      MOV	R2,R22
    035F7 2433      CLR	R3
    035F8 2EA4      MOV	R10,R20
    035F9 24BB      CLR	R11
    035FA 2CBA      MOV	R11,R10
    035FB 24AA      CLR	R10
    035FC 28A2      OR	R10,R2
    035FD 28B3      OR	R11,R3
(0349) 	return result;
    035FE 0185      MOVW	R16,R10
    035FF 940C 4548 JMP	pop_xgsetF03C
_DwinToPage:
  check                --> R12
  i                    --> R10
  pageIndex            --> R20
    03601 940E 4531 CALL	push_xgset303C
    03603 2F40      MOV	R20,R16
    03604 9722      SBIW	R28,2
(0350) }
(0351) /**
(0352)  * @brief  迪文屏跳转界面
(0353)  * @note   This function can be used for all STM32F10x devices.
(0354)  * @param  pageIndex: 需要跳转的页面id
(0355)  * @retval 无
(0356)  */
(0357) void DwinToPage(unsigned char pageIndex)
(0358) {
(0359) 	unsigned char i = 0;
    03605 24AA      CLR	R10
(0360) 	unsigned int check = 0;
    03606 24CC      CLR	R12
    03607 24DD      CLR	R13
(0361)   while(T_count>0);
    03608 E080      LDI	R24,0
    03609 9020 0391 LDS	R2,T_count
    0360B 1582      CP	R24,R2
    0360C F3D8      BCS	0x3608
(0362)   memset(T_buf, 0, sizeof(T_buf));
    0360D EC88      LDI	R24,0xC8
    0360E E090      LDI	R25,0
    0360F 8399      STD	Y+1,R25
    03610 8388      ST	Y,R24
    03611 2722      CLR	R18
    03612 2733      CLR	R19
    03613 E901      LDI	R16,0x91
    03614 E012      LDI	R17,2
    03615 940E 43D0 CALL	_memset
(0363)   T_buf[0]=0x5A;//2字节帧头
    03617 E58A      LDI	R24,0x5A
    03618 9380 0291 STS	T_buf,R24
(0364)   T_buf[1]=0xA5;//2字节帧头
    0361A EA85      LDI	R24,0xA5
    0361B 9380 0292 STS	T_buf+1,R24
(0365)   T_buf[2]=0xA0;//目标地址
    0361D EA80      LDI	R24,0xA0
    0361E 9380 0293 STS	T_buf+2,R24
(0366)   T_buf[3]=0xA4;//源地址 
    03620 EA84      LDI	R24,0xA4
    03621 9380 0294 STS	T_buf+3,R24
(0367)   T_buf[4]=0x04;//长度  指令+数据长度
    03623 E084      LDI	R24,4
    03624 9380 0295 STS	T_buf+4,R24
(0368)   T_buf[5]=0x4000 >> 8;;//2字节指令 可以认为是迪文的地址  跳转页面指令0x4000
    03626 E480      LDI	R24,0x40
    03627 9380 0296 STS	T_buf+5,R24
(0369)   T_buf[6]=0x4000 & 0xff;;//2字节指令 可以认为是迪文的地址  跳转页面指令0x4000
    03629 2422      CLR	R2
    0362A 9220 0297 STS	T_buf+6,R2
(0370)   T_buf[7]=pageIndex >> 8;;//数据
    0362C 2E24      MOV	R2,R20
    0362D 9426      LSR	R2
    0362E 9426      LSR	R2
    0362F 9426      LSR	R2
    03630 9426      LSR	R2
    03631 9426      LSR	R2
    03632 9426      LSR	R2
    03633 9426      LSR	R2
    03634 9426      LSR	R2
    03635 9220 0298 STS	T_buf+7,R2
(0371)   T_buf[8]=pageIndex & 0xff;//数据
    03637 2F84      MOV	R24,R20
    03638 7F8F      ANDI	R24,0xFF
    03639 9380 0299 STS	T_buf+8,R24
(0372)   T_buf[9]=0x00;//状态 主机默认FF 从机无故障00或者故障码
    0363B 2422      CLR	R2
    0363C 9220 029A STS	T_buf+9,R2
(0373) 
(0374)   for ( i = 0; i < (T_buf[4]+6); i++)//校验和
    0363E 24AA      CLR	R10
    0363F C014      RJMP	0x3654
(0375)   {
(0376)       T_buf[T_buf[4]+6]+=T_buf[i];
    03640 E987      LDI	R24,0x97
    03641 E092      LDI	R25,2
    03642 9020 0295 LDS	R2,T_buf+4
    03644 2433      CLR	R3
    03645 0E28      ADD	R2,R24
    03646 1E39      ADC	R3,R25
    03647 0121      MOVW	R4,R2
    03648 E981      LDI	R24,0x91
    03649 E092      LDI	R25,2
    0364A 2DEA      MOV	R30,R10
    0364B 27FF      CLR	R31
    0364C 0FE8      ADD	R30,R24
    0364D 1FF9      ADC	R31,R25
    0364E 8020      LD	R2,Z
    0364F 01F2      MOVW	R30,R4
    03650 8030      LD	R3,Z
    03651 0C32      ADD	R3,R2
    03652 8230      ST	Z,R3
    03653 94A3      INC	R10
    03654 9180 0295 LDS	R24,T_buf+4
    03656 5F8A      SUBI	R24,0xFA
    03657 16A8      CP	R10,R24
    03658 F338      BCS	0x3640
(0377)   }
(0378) 
(0379)   T_buf[11]=0x0D;//2字节帧尾
    03659 E08D      LDI	R24,0xD
    0365A 9380 029C STS	T_buf+11,R24
(0380)   T_buf[12]=0x0A;//2字节帧尾
    0365C E08A      LDI	R24,0xA
    0365D 9380 029D STS	T_buf+12,R24
(0381) 
(0382)   T_count=T_buf[4]+9;//长度
    0365F 9180 0295 LDS	R24,T_buf+4
    03661 5F87      SUBI	R24,0xF7
    03662 9380 0391 STS	T_count,R24
(0383)   T_ptr=1;
    03664 E081      LDI	R24,1
    03665 9380 0390 STS	T_ptr,R24
(0384)   UDR0=T_buf[0];
    03667 9020 0291 LDS	R2,T_buf
    03669 B82C      OUT	0x0C,R2
    0366A 9622      ADIW	R28,2
    0366B 940C 4538 JMP	pop_xgset303C
_DwinWriteWord:
  check                --> R14
  i                    --> R10
  data                 --> R12
  addr                 --> R20
    0366D 940E 4506 CALL	push_xgset30FC
    0366F 0169      MOVW	R12,R18
    03670 01A8      MOVW	R20,R16
    03671 9722      SBIW	R28,2
(0385) }
(0386) /**
(0387)  * @brief  向迪文屏发送写寄存器指令
(0388)  * @note   是否进行CRC16校验，影响发送指令的长度
(0389)  * @param  addr: 寄存器地址 可以认为是指令
(0390)  * @param  data: 写入的数据
(0391)  * @param  ifCheck: 是否进行CRC16校验 true:校验  false:不校验
(0392)  * @retval None
(0393)  */
(0394) void DwinWriteWord(unsigned int addr, unsigned int data) //向迪文屏写入1个word数据
(0395) {
(0396) 	unsigned char i = 0;
    03672 24AA      CLR	R10
(0397) 	unsigned int check = 0;
    03673 24EE      CLR	R14
    03674 24FF      CLR	R15
(0398)   while(T_count>0);
    03675 E080      LDI	R24,0
    03676 9020 0391 LDS	R2,T_count
    03678 1582      CP	R24,R2
    03679 F3D8      BCS	0x3675
(0399)   memset(T_buf, 0, sizeof(T_buf));
    0367A EC88      LDI	R24,0xC8
    0367B E090      LDI	R25,0
    0367C 8399      STD	Y+1,R25
    0367D 8388      ST	Y,R24
    0367E 2722      CLR	R18
    0367F 2733      CLR	R19
    03680 E901      LDI	R16,0x91
    03681 E012      LDI	R17,2
    03682 940E 43D0 CALL	_memset
(0400)   T_buf[0]=0x5A;//2字节帧头
    03684 E58A      LDI	R24,0x5A
    03685 9380 0291 STS	T_buf,R24
(0401)   T_buf[1]=0xA5;//2字节帧头
    03687 EA85      LDI	R24,0xA5
    03688 9380 0292 STS	T_buf+1,R24
(0402)   T_buf[2]=0xA0;//目标地址
    0368A EA80      LDI	R24,0xA0
    0368B 9380 0293 STS	T_buf+2,R24
(0403)   T_buf[3]=0xA4;//源地址 
    0368D EA84      LDI	R24,0xA4
    0368E 9380 0294 STS	T_buf+3,R24
(0404)   T_buf[4]=0x03;//长度  指令+数据长度
    03690 E083      LDI	R24,3
    03691 9380 0295 STS	T_buf+4,R24
(0405)   T_buf[5]=addr >> 8;;//2字节指令 可以认为是迪文的地址
    03693 011A      MOVW	R2,R20
    03694 2C23      MOV	R2,R3
    03695 2433      CLR	R3
    03696 9220 0296 STS	T_buf+5,R2
(0406)   T_buf[6]=addr & 0xff;;//2字节指令 可以认为是迪文的地址
    03698 01CA      MOVW	R24,R20
    03699 7090      ANDI	R25,0
    0369A 9380 0297 STS	T_buf+6,R24
(0407)   T_buf[7]=data;//数据
    0369C 92C0 0298 STS	T_buf+7,R12
(0408)   T_buf[8]=0x00;//状态 主机默认FF 从机无故障00或者故障码
    0369E 2422      CLR	R2
    0369F 9220 0299 STS	T_buf+8,R2
(0409) 
(0410)   for ( i = 0; i < (T_buf[4]+6); i++)//校验和
    036A1 24AA      CLR	R10
    036A2 C014      RJMP	0x36B7
(0411)   {
(0412)       T_buf[T_buf[4]+6]+=T_buf[i];
    036A3 E987      LDI	R24,0x97
    036A4 E092      LDI	R25,2
    036A5 9020 0295 LDS	R2,T_buf+4
    036A7 2433      CLR	R3
    036A8 0E28      ADD	R2,R24
    036A9 1E39      ADC	R3,R25
    036AA 0121      MOVW	R4,R2
    036AB E981      LDI	R24,0x91
    036AC E092      LDI	R25,2
    036AD 2DEA      MOV	R30,R10
    036AE 27FF      CLR	R31
    036AF 0FE8      ADD	R30,R24
    036B0 1FF9      ADC	R31,R25
    036B1 8020      LD	R2,Z
    036B2 01F2      MOVW	R30,R4
    036B3 8030      LD	R3,Z
    036B4 0C32      ADD	R3,R2
    036B5 8230      ST	Z,R3
    036B6 94A3      INC	R10
    036B7 9180 0295 LDS	R24,T_buf+4
    036B9 5F8A      SUBI	R24,0xFA
    036BA 16A8      CP	R10,R24
    036BB F338      BCS	0x36A3
(0413)   }
(0414) 
(0415)   T_buf[10]=0x0D;//2字节帧尾
    036BC E08D      LDI	R24,0xD
    036BD 9380 029B STS	T_buf+10,R24
(0416)   T_buf[11]=0x0A;//2字节帧尾
    036BF E08A      LDI	R24,0xA
    036C0 9380 029C STS	T_buf+11,R24
(0417) 
(0418)   T_count=T_buf[4]+9;//长度
    036C2 9180 0295 LDS	R24,T_buf+4
    036C4 5F87      SUBI	R24,0xF7
    036C5 9380 0391 STS	T_count,R24
(0419)   T_ptr=1;
    036C7 E081      LDI	R24,1
    036C8 9380 0390 STS	T_ptr,R24
(0420)   UDR0=T_buf[0];
    036CA 9020 0291 LDS	R2,T_buf
    036CC B82C      OUT	0x0C,R2
    036CD 9622      ADIW	R28,2
    036CE 940C 44F0 JMP	pop_xgset30FC
_DwinWriteLongWords:
  check                --> Y,+3
  i                    --> R10
  length               --> R20
  p                    --> R12
  addr                 --> R22
    036D0 940E 453F CALL	push_xgsetF03C
    036D2 0169      MOVW	R12,R18
    036D3 01B8      MOVW	R22,R16
    036D4 9722      SBIW	R28,2
    036D5 854A      LDD	R20,Y+10
(0421) }
(0422) 
(0423) /**
(0424)  * @brief  向迪文屏发送连续写寄存器指令
(0425)  * @note
(0426)  * @param  addr: 需要写入寄存器的首地址
(0427)  * @param  *p: 待写入数据的首地址
(0428)  * @param  length: 写入数据的长度 单位：word（2个字节）
(0429)  * @param  isCRC: 是否进行CRC16校验 true:校验  false:不校验
(0430)  * @retval None
(0431)  */
(0432) void DwinWriteLongWords(unsigned int addr, unsigned char *p, unsigned char length)
(0433) {
(0434) 	//向地址addr连续写length长度word数据
(0435) 	// 1个word数据占2个字节
(0436) 
(0437) 	unsigned int check;
(0438) 	unsigned char i = 0;
    036D6 24AA      CLR	R10
(0439)   while(T_count>0);
    036D7 E080      LDI	R24,0
    036D8 9020 0391 LDS	R2,T_count
    036DA 1582      CP	R24,R2
    036DB F3D8      BCS	0x36D7
(0440) 	memset(T_buf, 0, sizeof(T_buf));
    036DC EC88      LDI	R24,0xC8
    036DD E090      LDI	R25,0
    036DE 8399      STD	Y+1,R25
    036DF 8388      ST	Y,R24
    036E0 2722      CLR	R18
    036E1 2733      CLR	R19
    036E2 E901      LDI	R16,0x91
    036E3 E012      LDI	R17,2
    036E4 940E 43D0 CALL	_memset
(0441)   T_buf[0]=0x5A;//2字节帧头
    036E6 E58A      LDI	R24,0x5A
    036E7 9380 0291 STS	T_buf,R24
(0442)   T_buf[1]=0xA5;//2字节帧头
    036E9 EA85      LDI	R24,0xA5
    036EA 9380 0292 STS	T_buf+1,R24
(0443)   T_buf[2]=0xA0;//目标地址
    036EC EA80      LDI	R24,0xA0
    036ED 9380 0293 STS	T_buf+2,R24
(0444)   T_buf[3]=0xA4;//源地址 
    036EF EA84      LDI	R24,0xA4
    036F0 9380 0294 STS	T_buf+3,R24
(0445)   T_buf[4]=length+2;//长度  指令+数据长度
    036F2 2F84      MOV	R24,R20
    036F3 5F8E      SUBI	R24,0xFE
    036F4 9380 0295 STS	T_buf+4,R24
(0446)   T_buf[5]=addr >> 8;;//2字节指令 可以认为是迪文的地址
    036F6 011B      MOVW	R2,R22
    036F7 2C23      MOV	R2,R3
    036F8 2433      CLR	R3
    036F9 9220 0296 STS	T_buf+5,R2
(0447)   T_buf[6]=addr & 0xff;;//2字节指令 可以认为是迪文的地址
    036FB 01CB      MOVW	R24,R22
    036FC 7090      ANDI	R25,0
    036FD 9380 0297 STS	T_buf+6,R24
(0448) 
(0449)   for (i = 0; i < length; i++)//赋值数据
    036FF 24AA      CLR	R10
    03700 C00D      RJMP	0x370E
(0450) 	{
(0451)       T_buf[i + 7] = p[i];
    03701 2DEA      MOV	R30,R10
    03702 27FF      CLR	R31
    03703 0DEC      ADD	R30,R12
    03704 1DFD      ADC	R31,R13
    03705 8020      LD	R2,Z
    03706 E988      LDI	R24,0x98
    03707 E092      LDI	R25,2
    03708 2DEA      MOV	R30,R10
    03709 27FF      CLR	R31
    0370A 0FE8      ADD	R30,R24
    0370B 1FF9      ADC	R31,R25
    0370C 8220      ST	Z,R2
    0370D 94A3      INC	R10
    0370E 16A4      CP	R10,R20
    0370F F388      BCS	0x3701
(0452)   }
(0453)   T_buf[length+7]=0x00;//状态 主机默认FF 从机无故障00或者故障码
    03710 E988      LDI	R24,0x98
    03711 E092      LDI	R25,2
    03712 2FE4      MOV	R30,R20
    03713 27FF      CLR	R31
    03714 0FE8      ADD	R30,R24
    03715 1FF9      ADC	R31,R25
    03716 2422      CLR	R2
    03717 8220      ST	Z,R2
(0454) 
(0455)   for ( i = 0; i < (length+8); i++)//校验和
    03718 24AA      CLR	R10
    03719 C013      RJMP	0x372D
(0456)   {
(0457)       T_buf[length+8]+=T_buf[i];
    0371A E989      LDI	R24,0x99
    0371B E092      LDI	R25,2
    0371C 2E24      MOV	R2,R20
    0371D 2433      CLR	R3
    0371E 0E28      ADD	R2,R24
    0371F 1E39      ADC	R3,R25
    03720 0121      MOVW	R4,R2
    03721 E981      LDI	R24,0x91
    03722 E092      LDI	R25,2
    03723 2DEA      MOV	R30,R10
    03724 27FF      CLR	R31
    03725 0FE8      ADD	R30,R24
    03726 1FF9      ADC	R31,R25
    03727 8020      LD	R2,Z
    03728 01F2      MOVW	R30,R4
    03729 8030      LD	R3,Z
    0372A 0C32      ADD	R3,R2
    0372B 8230      ST	Z,R3
    0372C 94A3      INC	R10
    0372D 2F84      MOV	R24,R20
    0372E 5F88      SUBI	R24,0xF8
    0372F 16A8      CP	R10,R24
    03730 F348      BCS	0x371A
(0458)   }
(0459)   T_buf[length+9]=0x0D;//2字节帧尾
    03731 E98A      LDI	R24,0x9A
    03732 E092      LDI	R25,2
    03733 2FE4      MOV	R30,R20
    03734 27FF      CLR	R31
    03735 0FE8      ADD	R30,R24
    03736 1FF9      ADC	R31,R25
    03737 E08D      LDI	R24,0xD
    03738 8380      ST	Z,R24
(0460)   T_buf[length+10]=0x0A;//2字节帧尾
    03739 E98B      LDI	R24,0x9B
    0373A E092      LDI	R25,2
    0373B 2FE4      MOV	R30,R20
    0373C 27FF      CLR	R31
    0373D 0FE8      ADD	R30,R24
    0373E 1FF9      ADC	R31,R25
    0373F E08A      LDI	R24,0xA
    03740 8380      ST	Z,R24
(0461) 	
(0462)   T_count=length+11;//长度
    03741 2F84      MOV	R24,R20
    03742 5F85      SUBI	R24,0xF5
    03743 9380 0391 STS	T_count,R24
(0463)   T_ptr=1;
    03745 E081      LDI	R24,1
    03746 9380 0390 STS	T_ptr,R24
(0464)   UDR0=T_buf[0];
    03748 9020 0291 LDS	R2,T_buf
    0374A B82C      OUT	0x0C,R2
    0374B 9622      ADIW	R28,2
    0374C 940C 4548 JMP	pop_xgsetF03C
_Key_Password:
  buff                 --> Y,+2
  check                --> R20
  i                    --> R22
  key                  --> R10
    0374E 940E 4523 CALL	push_xgsetF00C
    03750 2EA0      MOV	R10,R16
    03751 9766      SBIW	R28,0x16
(0465) }
(0466) 
(0467) /**
(0468)  * @brief  密码解析
(0469)  * @note
(0470)  * @param  key: 1后台密码 2sn密码
(0471)  * @retval None
(0472)  */
(0473) void Key_Password(unsigned char key)
(0474) {
(0475)   unsigned char check = 1;
    03752 E041      LDI	R20,1
(0476) 	unsigned char i = 0;
    03753 2766      CLR	R22
(0477) 
(0478) 	unsigned char buff[20];
(0479) 	switch (key)
    03754 24BB      CLR	R11
    03755 01C5      MOVW	R24,R10
    03756 3081      CPI	R24,1
    03757 E0E0      LDI	R30,0
    03758 079E      CPC	R25,R30
    03759 F031      BEQ	0x3760
    0375A 3082      CPI	R24,2
    0375B E0E0      LDI	R30,0
    0375C 079E      CPC	R25,R30
    0375D F409      BNE	0x375F
    0375E C0EB      RJMP	0x384A
    0375F C15F      RJMP	0x38BF
(0480) 	{
(0481) 	case 1: //后台密码解析
(0482) 		for (i = 0; i < 8; i++)
    03760 2766      CLR	R22
    03761 C013      RJMP	0x3775
(0483) 		{
(0484) 			if (passwordInput[i] != password[i])
    03762 E283      LDI	R24,0x23
    03763 E091      LDI	R25,1
    03764 2FE6      MOV	R30,R22
    03765 27FF      CLR	R31
    03766 0FE8      ADD	R30,R24
    03767 1FF9      ADC	R31,R25
    03768 8020      LD	R2,Z
    03769 E480      LDI	R24,0x40
    0376A E094      LDI	R25,4
    0376B 2FE6      MOV	R30,R22
    0376C 27FF      CLR	R31
    0376D 0FE8      ADD	R30,R24
    0376E 1FF9      ADC	R31,R25
    0376F 8030      LD	R3,Z
    03770 1432      CP	R3,R2
    03771 F011      BEQ	0x3774
(0485) 			{
(0486) 				check = 0; //输入密码错误
    03772 2744      CLR	R20
(0487) 				break;
    03773 C003      RJMP	0x3777
    03774 9563      INC	R22
    03775 3068      CPI	R22,0x8
    03776 F358      BCS	0x3762
(0488) 			}
(0489) 		}
(0490) 		if (check) //密码正确
    03777 2344      TST	R20
    03778 F409      BNE	0x377A
    03779 C098      RJMP	0x3812
(0491) 		{
(0492) 			memset(passwordInput, 0x20, sizeof(passwordInput));
    0377A E088      LDI	R24,0x8
    0377B E090      LDI	R25,0
    0377C 8399      STD	Y+1,R25
    0377D 8388      ST	Y,R24
    0377E E220      LDI	R18,0x20
    0377F E030      LDI	R19,0
    03780 E400      LDI	R16,0x40
    03781 E014      LDI	R17,4
    03782 940E 43D0 CALL	_memset
(0493) 			DwinWriteLongWords(ADDR_BOOTING_PASSWORDDISPLAY, passwordInput, 4); //清空密码显示
    03784 E084      LDI	R24,4
    03785 8388      ST	Y,R24
    03786 E420      LDI	R18,0x40
    03787 E034      LDI	R19,4
    03788 E000      LDI	R16,0
    03789 E512      LDI	R17,0x52
    0378A DF45      RCALL	_DwinWriteLongWords
(0494) 			DwinToPage(PAGE_SETTING);								  //跳转后台设置页面
    0378B E101      LDI	R16,0x11
    0378C DE74      RCALL	_DwinToPage
(0495) 
(0496)       EEPROMReadBytes(softwareVersionAddr,&SettingDdata.softwareVersion,16);//迪文软件版本
    0378D E180      LDI	R24,0x10
    0378E E090      LDI	R25,0
    0378F 8399      STD	Y+1,R25
    03790 8388      ST	Y,R24
    03791 E524      LDI	R18,0x54
    03792 E038      LDI	R19,0x8
    03793 E802      LDI	R16,0x82
    03794 E010      LDI	R17,0
    03795 940E 45B0 CALL	_EEPROMReadBytes
(0497)       //for (i = 0; i < 16; i++){SettingDdata.softwareVersion[i]=buff[i];}
(0498)       DwinWriteLongWords(ADDR_BOOTING_softwareVersion,SettingDdata.softwareVersion, 8); //迪文通信
    03797 E088      LDI	R24,0x8
    03798 8388      ST	Y,R24
    03799 E524      LDI	R18,0x54
    0379A E038      LDI	R19,0x8
    0379B E000      LDI	R16,0
    0379C E513      LDI	R17,0x53
    0379D DF32      RCALL	_DwinWriteLongWords
(0499) 
(0500)       EEPROMReadBytes(hardwareVersionAddr,&SettingDdata.hardwareVersion,16);//主板硬件版本
    0379E E180      LDI	R24,0x10
    0379F E090      LDI	R25,0
    037A0 8399      STD	Y+1,R25
    037A1 8388      ST	Y,R24
    037A2 E624      LDI	R18,0x64
    037A3 E038      LDI	R19,0x8
    037A4 E902      LDI	R16,0x92
    037A5 E010      LDI	R17,0
    037A6 940E 45B0 CALL	_EEPROMReadBytes
(0501)       DwinWriteLongWords(ADDR_BOOTING_hardwareVersion, SettingDdata.hardwareVersion, 8); //迪文通信
    037A8 E088      LDI	R24,0x8
    037A9 8388      ST	Y,R24
    037AA E624      LDI	R18,0x64
    037AB E038      LDI	R19,0x8
    037AC E000      LDI	R16,0
    037AD E514      LDI	R17,0x54
    037AE DF21      RCALL	_DwinWriteLongWords
(0502) 
(0503)       EEPROMReadBytes(hexVersionAddr,&SettingDdata.hexVersion,16);//主板软件版本
    037AF E180      LDI	R24,0x10
    037B0 E090      LDI	R25,0
    037B1 8399      STD	Y+1,R25
    037B2 8388      ST	Y,R24
    037B3 E724      LDI	R18,0x74
    037B4 E038      LDI	R19,0x8
    037B5 EA02      LDI	R16,0xA2
    037B6 E010      LDI	R17,0
    037B7 940E 45B0 CALL	_EEPROMReadBytes
(0504)       DwinWriteLongWords(ADDR_BOOTING_hexVersion, SettingDdata.hexVersion, 8); //迪文通信
    037B9 E088      LDI	R24,0x8
    037BA 8388      ST	Y,R24
    037BB E724      LDI	R18,0x74
    037BC E038      LDI	R19,0x8
    037BD E000      LDI	R16,0
    037BE E515      LDI	R17,0x55
    037BF DF10      RCALL	_DwinWriteLongWords
(0505) 
(0506)       EEPROMReadBytes(snNumberAddr,&SettingDdata.snNumber,16);//SN号
    037C0 E180      LDI	R24,0x10
    037C1 E090      LDI	R25,0
    037C2 8399      STD	Y+1,R25
    037C3 8388      ST	Y,R24
    037C4 E824      LDI	R18,0x84
    037C5 E038      LDI	R19,0x8
    037C6 EB02      LDI	R16,0xB2
    037C7 E010      LDI	R17,0
    037C8 940E 45B0 CALL	_EEPROMReadBytes
(0507)       DwinWriteLongWords(ADDR_BOOTING_snNumber, SettingDdata.snNumber, 8); //迪文通信
    037CA E088      LDI	R24,0x8
    037CB 8388      ST	Y,R24
    037CC E824      LDI	R18,0x84
    037CD E038      LDI	R19,0x8
    037CE E000      LDI	R16,0
    037CF E516      LDI	R17,0x56
    037D0 DEFF      RCALL	_DwinWriteLongWords
(0508) 
(0509)       EEPROMReadBytes(SET_HANDLEONEAddr,&SettingDdata.SET_HANDLEONE,1);//1号手柄选择
    037D1 E081      LDI	R24,1
    037D2 E090      LDI	R25,0
    037D3 8399      STD	Y+1,R25
    037D4 8388      ST	Y,R24
    037D5 E924      LDI	R18,0x94
    037D6 E038      LDI	R19,0x8
    037D7 EC03      LDI	R16,0xC3
    037D8 E010      LDI	R17,0
    037D9 940E 45B0 CALL	_EEPROMReadBytes
(0510)       DwinWriteWord(ADDR_KEY_SET_HANDLEONEDATA, SettingDdata.SET_HANDLEONE);//迪文屏通信函数
    037DB 9120 0894 LDS	R18,SettingDdata+64
    037DD 2733      CLR	R19
    037DE E801      LDI	R16,0x81
    037DF E316      LDI	R17,0x36
    037E0 DE8C      RCALL	_DwinWriteWord
(0511) 
(0512)       EEPROMReadBytes(SET_HANDLEFIVEAddr,&SettingDdata.SET_HANDLEFIVE,1);//5号爆脂手柄选择
    037E1 E081      LDI	R24,1
    037E2 E090      LDI	R25,0
    037E3 8399      STD	Y+1,R25
    037E4 8388      ST	Y,R24
    037E5 E928      LDI	R18,0x98
    037E6 E038      LDI	R19,0x8
    037E7 EC07      LDI	R16,0xC7
    037E8 E010      LDI	R17,0
    037E9 940E 45B0 CALL	_EEPROMReadBytes
(0513)       DwinWriteWord(ADDR_KEY_SET_HANDLEFIVEDATA, SettingDdata.SET_HANDLEFIVE);//迪文屏通信函数
    037EB 9120 0898 LDS	R18,SettingDdata+68
    037ED 2733      CLR	R19
    037EE E805      LDI	R16,0x85
    037EF E316      LDI	R17,0x36
    037F0 DE7C      RCALL	_DwinWriteWord
(0514) 
(0515)       EEPROMReadBytes(SET_WORKTIMEAddr,&SettingDdata.SET_WORKTIME,1);//治疗时间
    037F1 E081      LDI	R24,1
    037F2 E090      LDI	R25,0
    037F3 8399      STD	Y+1,R25
    037F4 8388      ST	Y,R24
    037F5 E929      LDI	R18,0x99
    037F6 E038      LDI	R19,0x8
    037F7 EC08      LDI	R16,0xC8
    037F8 E010      LDI	R17,0
    037F9 940E 45B0 CALL	_EEPROMReadBytes
(0516)       DwinWriteWord(ADDR_KEY_SET_WORKTIMEDATA,SettingDdata.SET_WORKTIME);//迪文屏通信函数
    037FB 9120 0899 LDS	R18,SettingDdata+69
    037FD 2733      CLR	R19
    037FE E806      LDI	R16,0x86
    037FF E316      LDI	R17,0x36
    03800 DE6C      RCALL	_DwinWriteWord
(0517) 
(0518)       EEPROMReadBytes(SET_WORKPOWERAddr,&SettingDdata.SET_WORKPOWER,1);//治疗能量百分比
    03801 E081      LDI	R24,1
    03802 E090      LDI	R25,0
    03803 8399      STD	Y+1,R25
    03804 8388      ST	Y,R24
    03805 E92A      LDI	R18,0x9A
    03806 E038      LDI	R19,0x8
    03807 EC09      LDI	R16,0xC9
    03808 E010      LDI	R17,0
    03809 940E 45B0 CALL	_EEPROMReadBytes
(0519)       DwinWriteWord(ADDR_KEY_SET_WORKPOWERDATA, SettingDdata.SET_WORKPOWER);//迪文屏通信函数
    0380B 9120 089A LDS	R18,SettingDdata+70
    0380D 2733      CLR	R19
    0380E E807      LDI	R16,0x87
    0380F E316      LDI	R17,0x36
    03810 DE5C      RCALL	_DwinWriteWord
(0520) 
(0521) 		}
    03811 C0AD      RJMP	0x38BF
(0522) 		else //密码错误
(0523) 		{
(0524) 			//memset(buff, 0x20, sizeof(buff));
(0525) 			//DwinWriteLongWords(ADDR_BOOTING_PASSWORDDISPLAY, buff, 4); //清空密码显示
(0526) 			//delay_ms(20);
(0527) 			strcpy((char *)buff, "Password Erro!");
    03812 ED25      LDI	R18,0xD5
    03813 E033      LDI	R19,3
    03814 018E      MOVW	R16,R28
    03815 5F0E      SUBI	R16,0xFE
    03816 4F1F      SBCI	R17,0xFF
    03817 940E 43DB CALL	_strcpy
(0528) 			DwinWriteLongWords(ADDR_BOOTING_PASSWORDERR, buff, 7); //提示密码错误
    03819 E087      LDI	R24,7
    0381A 8388      ST	Y,R24
    0381B 019E      MOVW	R18,R28
    0381C 5F2E      SUBI	R18,0xFE
    0381D 4F3F      SBCI	R19,0xFF
    0381E E000      LDI	R16,0
    0381F E511      LDI	R17,0x51
    03820 DEAF      RCALL	_DwinWriteLongWords
(0529)       delay_ms(600);
    03821 E508      LDI	R16,0x58
    03822 E012      LDI	R17,2
    03823 940E 06B7 CALL	_delay_ms
(0530)       memset(buff, 0x20, sizeof(buff));
    03825 E184      LDI	R24,0x14
    03826 E090      LDI	R25,0
    03827 8399      STD	Y+1,R25
    03828 8388      ST	Y,R24
    03829 E220      LDI	R18,0x20
    0382A E030      LDI	R19,0
    0382B 018E      MOVW	R16,R28
    0382C 5F0E      SUBI	R16,0xFE
    0382D 4F1F      SBCI	R17,0xFF
    0382E 940E 43D0 CALL	_memset
(0531) 			DwinWriteLongWords(ADDR_BOOTING_PASSWORDERR, buff, 7); //清空密码错误提示
    03830 E087      LDI	R24,7
    03831 8388      ST	Y,R24
    03832 019E      MOVW	R18,R28
    03833 5F2E      SUBI	R18,0xFE
    03834 4F3F      SBCI	R19,0xFF
    03835 E000      LDI	R16,0
    03836 E511      LDI	R17,0x51
    03837 DE98      RCALL	_DwinWriteLongWords
(0532)       memset(passwordInput, 0x20, sizeof(passwordInput));
    03838 E088      LDI	R24,0x8
    03839 E090      LDI	R25,0
    0383A 8399      STD	Y+1,R25
    0383B 8388      ST	Y,R24
    0383C E220      LDI	R18,0x20
    0383D E030      LDI	R19,0
    0383E E400      LDI	R16,0x40
    0383F E014      LDI	R17,4
    03840 940E 43D0 CALL	_memset
(0533) 			DwinWriteLongWords(ADDR_BOOTING_PASSWORDDISPLAY, passwordInput, 4); //清空密码显示
    03842 E084      LDI	R24,4
    03843 8388      ST	Y,R24
    03844 E420      LDI	R18,0x40
    03845 E034      LDI	R19,4
    03846 E000      LDI	R16,0
    03847 E512      LDI	R17,0x52
    03848 DE87      RCALL	_DwinWriteLongWords
(0534) 		}
(0535) 		break;
    03849 C075      RJMP	0x38BF
(0536) 	case 2: //sn密码解析
(0537) 		for (i = 0; i < 8; i++)
    0384A 2766      CLR	R22
    0384B C013      RJMP	0x385F
(0538) 		{
(0539) 			if (passwordInput[i] != SNpassword[i])
    0384C E28B      LDI	R24,0x2B
    0384D E091      LDI	R25,1
    0384E 2FE6      MOV	R30,R22
    0384F 27FF      CLR	R31
    03850 0FE8      ADD	R30,R24
    03851 1FF9      ADC	R31,R25
    03852 8020      LD	R2,Z
    03853 E480      LDI	R24,0x40
    03854 E094      LDI	R25,4
    03855 2FE6      MOV	R30,R22
    03856 27FF      CLR	R31
    03857 0FE8      ADD	R30,R24
    03858 1FF9      ADC	R31,R25
    03859 8030      LD	R3,Z
    0385A 1432      CP	R3,R2
    0385B F011      BEQ	0x385E
(0540) 			{
(0541) 				check = 0; //输入密码错误
    0385C 2744      CLR	R20
(0542) 				break;
    0385D C003      RJMP	0x3861
    0385E 9563      INC	R22
    0385F 3068      CPI	R22,0x8
    03860 F358      BCS	0x384C
(0543) 			}
(0544) 		}
(0545) 		if (check) //密码正确
    03861 2344      TST	R20
    03862 F129      BEQ	0x3888
(0546) 		{
(0547) 			memset(passwordInput, 0x20, sizeof(passwordInput));
    03863 E088      LDI	R24,0x8
    03864 E090      LDI	R25,0
    03865 8399      STD	Y+1,R25
    03866 8388      ST	Y,R24
    03867 E220      LDI	R18,0x20
    03868 E030      LDI	R19,0
    03869 E400      LDI	R16,0x40
    0386A E014      LDI	R17,4
    0386B 940E 43D0 CALL	_memset
(0548) 			DwinWriteLongWords(ADDR_BOOTING_SNPASSWORDDISPLAY, passwordInput, 4); //清空密码显示
    0386D E084      LDI	R24,4
    0386E 8388      ST	Y,R24
    0386F E420      LDI	R18,0x40
    03870 E034      LDI	R19,4
    03871 E000      LDI	R16,0
    03872 E612      LDI	R17,0x62
    03873 DE5C      RCALL	_DwinWriteLongWords
(0549)       DwinToPage(SNPAGE_SETTING);	//跳转SN设置页面
    03874 E105      LDI	R16,0x15
    03875 DD8B      RCALL	_DwinToPage
(0550)       memset(passwordInput, 0x20, sizeof(passwordInput));
    03876 E088      LDI	R24,0x8
    03877 E090      LDI	R25,0
    03878 8399      STD	Y+1,R25
    03879 8388      ST	Y,R24
    0387A E220      LDI	R18,0x20
    0387B E030      LDI	R19,0
    0387C E400      LDI	R16,0x40
    0387D E014      LDI	R17,4
    0387E 940E 43D0 CALL	_memset
(0551) 		 DwinWriteLongWords(ADDR_BOOTING_SNDISPLAY, passwordInput, 4); //清空SN
    03880 E084      LDI	R24,4
    03881 8388      ST	Y,R24
    03882 E420      LDI	R18,0x40
    03883 E034      LDI	R19,4
    03884 E000      LDI	R16,0
    03885 E712      LDI	R17,0x72
    03886 DE49      RCALL	_DwinWriteLongWords
(0552) 		}
    03887 C037      RJMP	0x38BF
(0553) 		else //密码错误
(0554) 		{
(0555) 			//memset(buff, 0x20, sizeof(buff));
(0556) 			//DwinWriteLongWords(ADDR_BOOTING_PASSWORDDISPLAY, buff, 4); //清空密码显示
(0557) 			//delay_ms(20);
(0558) 			strcpy((char *)buff, "Password Erro!");
    03888 ED25      LDI	R18,0xD5
    03889 E033      LDI	R19,3
    0388A 018E      MOVW	R16,R28
    0388B 5F0E      SUBI	R16,0xFE
    0388C 4F1F      SBCI	R17,0xFF
    0388D 940E 43DB CALL	_strcpy
(0559) 			DwinWriteLongWords(ADDR_BOOTING_SNPASSWORDERR, buff, 7); //提示密码错误
    0388F E087      LDI	R24,7
    03890 8388      ST	Y,R24
    03891 019E      MOVW	R18,R28
    03892 5F2E      SUBI	R18,0xFE
    03893 4F3F      SBCI	R19,0xFF
    03894 E000      LDI	R16,0
    03895 E611      LDI	R17,0x61
    03896 DE39      RCALL	_DwinWriteLongWords
(0560)       delay_ms(600);
    03897 E508      LDI	R16,0x58
    03898 E012      LDI	R17,2
    03899 940E 06B7 CALL	_delay_ms
(0561)       memset(buff, 0x20, sizeof(buff));
    0389B E184      LDI	R24,0x14
    0389C E090      LDI	R25,0
    0389D 8399      STD	Y+1,R25
    0389E 8388      ST	Y,R24
    0389F E220      LDI	R18,0x20
    038A0 E030      LDI	R19,0
    038A1 018E      MOVW	R16,R28
    038A2 5F0E      SUBI	R16,0xFE
    038A3 4F1F      SBCI	R17,0xFF
    038A4 940E 43D0 CALL	_memset
(0562) 			DwinWriteLongWords(ADDR_BOOTING_SNPASSWORDERR, buff, 7); //清空密码错误提示
    038A6 E087      LDI	R24,7
    038A7 8388      ST	Y,R24
    038A8 019E      MOVW	R18,R28
    038A9 5F2E      SUBI	R18,0xFE
    038AA 4F3F      SBCI	R19,0xFF
    038AB E000      LDI	R16,0
    038AC E611      LDI	R17,0x61
    038AD DE22      RCALL	_DwinWriteLongWords
(0563)       memset(passwordInput, 0x20, sizeof(passwordInput));
    038AE E088      LDI	R24,0x8
    038AF E090      LDI	R25,0
    038B0 8399      STD	Y+1,R25
    038B1 8388      ST	Y,R24
    038B2 E220      LDI	R18,0x20
    038B3 E030      LDI	R19,0
    038B4 E400      LDI	R16,0x40
    038B5 E014      LDI	R17,4
    038B6 940E 43D0 CALL	_memset
(0564) 			DwinWriteLongWords(ADDR_BOOTING_SNPASSWORDDISPLAY, passwordInput, 4); //清空密码显示
    038B8 E084      LDI	R24,4
    038B9 8388      ST	Y,R24
    038BA E420      LDI	R18,0x40
    038BB E034      LDI	R19,4
    038BC E000      LDI	R16,0
    038BD E612      LDI	R17,0x62
    038BE DE11      RCALL	_DwinWriteLongWords
(0565) 		}
(0566) 		break;
    038BF 9666      ADIW	R28,0x16
    038C0 940C 452A JMP	pop_xgsetF00C
_TASK_SendToDwin:
  buff                 --> Y,+2
  i                    --> R20
    038C2 940E 4519 CALL	push_xgsetF000
    038C4 9762      SBIW	R28,0x12
(0567) 	}
(0568) }
(0569) 
(0570) /**
(0571)  * @brief  迪文屏串口处理程序
(0572)  * @note   
(0573)  * @retval None
(0574)  */
(0575) void TASK_SendToDwin(void)
(0576) {
(0577) 	unsigned char i = 0;
    038C5 2744      CLR	R20
(0578) 	unsigned char buff[16]; //缓存  用于迪文屏多字节写入指令
(0579)   
(0580) 	if (RX1Countertail!=RX1Counterhead) //开启串口数据解析与发送
    038C6 9020 0577 LDS	R2,RX1Counterhead
    038C8 9030 0576 LDS	R3,RX1Countertail
    038CA 1432      CP	R3,R2
    038CB F409      BNE	0x38CD
    038CC C4C4      RJMP	0x3D91
(0581) 	{
(0582) 		/*
(0583) 		写寄存器反馈：82指令
(0584) 		00 01 02 03 04 05
(0585) 		5A A5 05 82 4F 4B
(0586) 
(0587) 		按键上传：83指令
(0588) 		00 01 02 03 04 05 06 07   08   09   0a
(0589) 		5A A5 06 83 66 66 01 界面 键值 校验1 校验2
(0590) 
(0591) 		数据读取：83指令
(0592) 		00 01 02 03 04 05 06 07   08   09   0a
(0593) 		5A A5 06 83 66 66 01 界面 键值 校验1 校验2
(0594) 		*/
(0595) 		DwinCmd = RX1Data[RX1Countertail][3];//命令类型
    038CD 2D13      MOV	R17,R3
    038CE E10E      LDI	R16,0x1E
    038CF 0301      MULSU	R16,R17
    038D0 E78B      LDI	R24,0x7B
    038D1 E095      LDI	R25,5
    038D2 01F0      MOVW	R30,R0
    038D3 0FE8      ADD	R30,R24
    038D4 1FF9      ADC	R31,R25
    038D5 8020      LD	R2,Z
    038D6 9220 03CD STS	DwinCmd,R2
(0596) 		DwinAddr = RX1Data[RX1Countertail][5] << 8 | RX1Data[RX1Countertail][6]; //地址  相当于指令
    038D8 0301      MULSU	R16,R17
    038D9 E78E      LDI	R24,0x7E
    038DA E095      LDI	R25,5
    038DB 01F0      MOVW	R30,R0
    038DC 0FE8      ADD	R30,R24
    038DD 1FF9      ADC	R31,R25
    038DE 8020      LD	R2,Z
    038DF E78D      LDI	R24,0x7D
    038E0 E095      LDI	R25,5
    038E1 01F0      MOVW	R30,R0
    038E2 0FE8      ADD	R30,R24
    038E3 1FF9      ADC	R31,R25
    038E4 8030      LD	R3,Z
    038E5 9230 03CF STS	DwinAddr+1,R3
    038E7 9220 03CE STS	DwinAddr,R2
(0597) 		DwinData = RX1Data[RX1Countertail][7]; //数据
    038E9 0301      MULSU	R16,R17
    038EA E78F      LDI	R24,0x7F
    038EB E095      LDI	R25,5
    038EC 01F0      MOVW	R30,R0
    038ED 0FE8      ADD	R30,R24
    038EE 1FF9      ADC	R31,R25
    038EF 8020      LD	R2,Z
    038F0 2433      CLR	R3
    038F1 9230 03D1 STS	DwinData+1,R3
    038F3 9220 03D0 STS	DwinData,R2
(0598)     Dwindata2 = RX1Data[RX1Countertail][8]; //状态检测
    038F5 0301      MULSU	R16,R17
    038F6 E880      LDI	R24,0x80
    038F7 E095      LDI	R25,5
    038F8 01F0      MOVW	R30,R0
    038F9 0FE8      ADD	R30,R24
    038FA 1FF9      ADC	R31,R25
    038FB 8020      LD	R2,Z
    038FC 2433      CLR	R3
    038FD 9230 03D3 STS	Dwindata2+1,R3
    038FF 9220 03D2 STS	Dwindata2,R2
(0599)  
(0600) 		//DwinTouchPage = RX1Data[RX1FinishIndex][7];													 //触控页面
(0601) 		//DwinTouchKey = RX1Data[RX1FinishIndex][8];													 //触控键值                                                                                                                                                                 
(0602) 
(0603) 		switch (DwinCmd) //根据命令区分
    03901 9160 03CD LDS	R22,DwinCmd
    03903 2777      CLR	R23
    03904 3862      CPI	R22,0x82
    03905 E0E0      LDI	R30,0
    03906 077E      CPC	R23,R30
    03907 F051      BEQ	0x3912
    03908 3862      CPI	R22,0x82
    03909 E0E0      LDI	R30,0
    0390A 077E      CPC	R23,R30
    0390B F40C      BGE	0x390D
    0390C C463      RJMP	0x3D70
    0390D 3A60      CPI	R22,0xA0
    0390E E0E0      LDI	R30,0
    0390F 077E      CPC	R23,R30
    03910 F029      BEQ	0x3916
    03911 C45E      RJMP	0x3D70
(0604) 		{
(0605)      
(0606) 		 case 0x82: DIWEN_RECEICEDATA_STATE=1; //写寄存器反馈
    03912 E081      LDI	R24,1
    03913 9380 03D4 STS	DIWEN_RECEICEDATA_STATE,R24
(0607) 			break;
    03915 C45A      RJMP	0x3D70
(0608) 		 case 0xA0: //判断主机发送
(0609) 
(0610)       DIWEN_RECEICEDATA_STATE=1; 
    03916 E081      LDI	R24,1
    03917 9380 03D4 STS	DIWEN_RECEICEDATA_STATE,R24
(0611) 			switch (DwinAddr)
    03919 9020 03CE LDS	R2,DwinAddr
    0391B 9030 03CF LDS	R3,DwinAddr+1
    0391D 01C1      MOVW	R24,R2
    0391E 3080      CPI	R24,0
    0391F E4E3      LDI	R30,0x43
    03920 079E      CPC	R25,R30
    03921 F409      BNE	0x3923
    03922 C0BE      RJMP	0x39E1
    03923 3081      CPI	R24,1
    03924 E4E3      LDI	R30,0x43
    03925 079E      CPC	R25,R30
    03926 F409      BNE	0x3928
    03927 C288      RJMP	0x3BB0
    03928 E081      LDI	R24,1
    03929 E493      LDI	R25,0x43
    0392A 1582      CP	R24,R2
    0392B 0593      CPC	R25,R3
    0392C F04C      BLT	0x3936
    0392D 9180 03CE LDS	R24,DwinAddr
    0392F 9190 03CF LDS	R25,DwinAddr+1
    03931 3080      CPI	R24,0
    03932 E4E2      LDI	R30,0x42
    03933 079E      CPC	R25,R30
    03934 F119      BEQ	0x3958
    03935 C43A      RJMP	0x3D70
    03936 9160 03CE LDS	R22,DwinAddr
    03938 9170 03CF LDS	R23,DwinAddr+1
    0393A 3060      CPI	R22,0
    0393B E4E4      LDI	R30,0x44
    0393C 077E      CPC	R23,R30
    0393D F409      BNE	0x393F
    0393E C3CE      RJMP	0x3D0D
    0393F 3061      CPI	R22,1
    03940 E4E4      LDI	R30,0x44
    03941 077E      CPC	R23,R30
    03942 F409      BNE	0x3944
    03943 C383      RJMP	0x3CC7
    03944 3060      CPI	R22,0
    03945 E4E4      LDI	R30,0x44
    03946 077E      CPC	R23,R30
    03947 F40C      BGE	0x3949
    03948 C427      RJMP	0x3D70
    03949 9160 03CE LDS	R22,DwinAddr
    0394B 9170 03CF LDS	R23,DwinAddr+1
    0394D 3060      CPI	R22,0
    0394E E4E5      LDI	R30,0x45
    0394F 077E      CPC	R23,R30
    03950 F409      BNE	0x3952
    03951 C3E3      RJMP	0x3D35
    03952 3061      CPI	R22,1
    03953 E4E5      LDI	R30,0x45
    03954 077E      CPC	R23,R30
    03955 F409      BNE	0x3957
    03956 C408      RJMP	0x3D5F
    03957 C418      RJMP	0x3D70
(0612) 			{
(0613)         case ADDR_HANDCHOOSE://手柄选择指令
(0614)         if(DwinData==ADDR_KEY_BACK_HANDLEONE)//手柄1号选择
    03958 9020 03D0 LDS	R2,DwinData
    0395A 9030 03D1 LDS	R3,DwinData+1
    0395C 2022      TST	R2
    0395D F471      BNE	0x396C
    0395E 2033      TST	R3
    0395F F461      BNE	0x396C
(0615)         {
(0616)         MACHINE_STATE.HANDLE_ID=1;   
    03960 E081      LDI	R24,1
    03961 9380 089B STS	MACHINE_STATE,R24
(0617)         Intensity[8]=MACHINE_STATE.HANDLE_ID-1;
    03963 5081      SUBI	R24,1
    03964 9380 03BB STS	Intensity+8,R24
(0618)         //DefaultSetting();   
(0619)         DwinWriteWord(DwinAddr, DwinData);//指令反馈
    03966 0191      MOVW	R18,R2
    03967 9100 03CE LDS	R16,DwinAddr
    03969 9110 03CF LDS	R17,DwinAddr+1
    0396B DD01      RCALL	_DwinWriteWord
(0620)         }
(0621) 
(0622)         if(DwinData==ADDR_KEY_BACK_HANDLETWO)//手柄2号选择
    0396C 9180 03D0 LDS	R24,DwinData
    0396E 9190 03D1 LDS	R25,DwinData+1
    03970 3081      CPI	R24,1
    03971 E0E0      LDI	R30,0
    03972 079E      CPC	R25,R30
    03973 F479      BNE	0x3983
(0623)         {
(0624)         MACHINE_STATE.HANDLE_ID=2;
    03974 E082      LDI	R24,2
    03975 9380 089B STS	MACHINE_STATE,R24
(0625)         Intensity[8]=MACHINE_STATE.HANDLE_ID-1;
    03977 5081      SUBI	R24,1
    03978 9380 03BB STS	Intensity+8,R24
(0626)         //DefaultSetting();
(0627)         DwinWriteWord(DwinAddr, DwinData);//指令反馈      
    0397A 9120 03D0 LDS	R18,DwinData
    0397C 9130 03D1 LDS	R19,DwinData+1
    0397E 9100 03CE LDS	R16,DwinAddr
    03980 9110 03CF LDS	R17,DwinAddr+1
    03982 DCEA      RCALL	_DwinWriteWord
(0628)         }
(0629) 
(0630)         if(DwinData==ADDR_KEY_BACK_HANDLETHREE)//手柄3号选择
    03983 9180 03D0 LDS	R24,DwinData
    03985 9190 03D1 LDS	R25,DwinData+1
    03987 3082      CPI	R24,2
    03988 E0E0      LDI	R30,0
    03989 079E      CPC	R25,R30
    0398A F479      BNE	0x399A
(0631)         {
(0632)         MACHINE_STATE.HANDLE_ID=3;  
    0398B E083      LDI	R24,3
    0398C 9380 089B STS	MACHINE_STATE,R24
(0633)         Intensity[8]=MACHINE_STATE.HANDLE_ID-1;
    0398E 5081      SUBI	R24,1
    0398F 9380 03BB STS	Intensity+8,R24
(0634)         //DefaultSetting();
(0635)         DwinWriteWord(DwinAddr, DwinData);//指令反馈         
    03991 9120 03D0 LDS	R18,DwinData
    03993 9130 03D1 LDS	R19,DwinData+1
    03995 9100 03CE LDS	R16,DwinAddr
    03997 9110 03CF LDS	R17,DwinAddr+1
    03999 DCD3      RCALL	_DwinWriteWord
(0636)         }
(0637) 
(0638)         if(DwinData==ADDR_KEY_BACK_HANDLEFOUR)//手柄4号选择
    0399A 9180 03D0 LDS	R24,DwinData
    0399C 9190 03D1 LDS	R25,DwinData+1
    0399E 3083      CPI	R24,3
    0399F E0E0      LDI	R30,0
    039A0 079E      CPC	R25,R30
    039A1 F479      BNE	0x39B1
(0639)         {
(0640)         MACHINE_STATE.HANDLE_ID=4; 
    039A2 E084      LDI	R24,4
    039A3 9380 089B STS	MACHINE_STATE,R24
(0641)         Intensity[8]=MACHINE_STATE.HANDLE_ID-1;
    039A5 5081      SUBI	R24,1
    039A6 9380 03BB STS	Intensity+8,R24
(0642)        // DefaultSetting();
(0643)         DwinWriteWord(DwinAddr, DwinData);//指令反馈   
    039A8 9120 03D0 LDS	R18,DwinData
    039AA 9130 03D1 LDS	R19,DwinData+1
    039AC 9100 03CE LDS	R16,DwinAddr
    039AE 9110 03CF LDS	R17,DwinAddr+1
    039B0 DCBC      RCALL	_DwinWriteWord
(0644)         }
(0645) 
(0646)         if(DwinData==ADDR_KEY_BACK_HANDLEFIVE)//手柄5号选择
    039B1 9180 03D0 LDS	R24,DwinData
    039B3 9190 03D1 LDS	R25,DwinData+1
    039B5 3084      CPI	R24,4
    039B6 E0E0      LDI	R30,0
    039B7 079E      CPC	R25,R30
    039B8 F479      BNE	0x39C8
(0647)         {
(0648)         MACHINE_STATE.HANDLE_ID=5;  
    039B9 E085      LDI	R24,5
    039BA 9380 089B STS	MACHINE_STATE,R24
(0649)         Intensity[8]=MACHINE_STATE.HANDLE_ID-1;
    039BC 5081      SUBI	R24,1
    039BD 9380 03BB STS	Intensity+8,R24
(0650)         //SAVE_FAT_FLAME=DEFAULTDATA;//默认能量等级   
(0651)         //DwinWriteWord(ADDR_BOOTING_FAT_UP_DOWNDATA, SAVE_FAT_FLAME);//迪文屏通信函数 
(0652)         DwinWriteWord(DwinAddr, DwinData);//指令反馈
    039BF 9120 03D0 LDS	R18,DwinData
    039C1 9130 03D1 LDS	R19,DwinData+1
    039C3 9100 03CE LDS	R16,DwinAddr
    039C5 9110 03CF LDS	R17,DwinAddr+1
    039C7 DCA5      RCALL	_DwinWriteWord
(0653)         }
(0654) 
(0655)         if(DwinData==0xFF)//未选手柄退出治疗界面
    039C8 9180 03D0 LDS	R24,DwinData
    039CA 9190 03D1 LDS	R25,DwinData+1
    039CC 3F8F      CPI	R24,0xFF
    039CD E0E0      LDI	R30,0
    039CE 079E      CPC	R25,R30
    039CF F009      BEQ	0x39D1
    039D0 C39F      RJMP	0x3D70
(0656)         {
(0657)         MACHINE_STATE.HANDLE_ID=0xFF;  
    039D1 EF8F      LDI	R24,0xFF
    039D2 9380 089B STS	MACHINE_STATE,R24
(0658)         Intensity[8]=MACHINE_STATE.HANDLE_ID;
    039D4 2E28      MOV	R2,R24
    039D5 9220 03BB STS	Intensity+8,R2
(0659)         //SAVE_FAT_FLAME=DEFAULTDATA;//默认能量等级   
(0660)         //DwinWriteWord(ADDR_BOOTING_FAT_UP_DOWNDATA, SAVE_FAT_FLAME);//迪文屏通信函数 
(0661)         DwinWriteWord(DwinAddr, DwinData);//指令反馈
    039D7 9120 03D0 LDS	R18,DwinData
    039D9 9130 03D1 LDS	R19,DwinData+1
    039DB 9100 03CE LDS	R16,DwinAddr
    039DD 9110 03CF LDS	R17,DwinAddr+1
    039DF DC8D      RCALL	_DwinWriteWord
(0662)         }
(0663) 
(0664)         break;
    039E0 C38F      RJMP	0x3D70
(0665) 
(0666)         case ADDR_HANDPARAMETER: //手柄参数设置
(0667) 
(0668)         switch (DwinData)
    039E1 9160 03D0 LDS	R22,DwinData
    039E3 9170 03D1 LDS	R23,DwinData+1
    039E5 3060      CPI	R22,0
    039E6 0767      CPC	R22,R23
    039E7 F081      BEQ	0x39F8
    039E8 3061      CPI	R22,1
    039E9 E0E0      LDI	R30,0
    039EA 077E      CPC	R23,R30
    039EB F409      BNE	0x39ED
    039EC C079      RJMP	0x3A66
    039ED 3062      CPI	R22,2
    039EE E0E0      LDI	R30,0
    039EF 077E      CPC	R23,R30
    039F0 F409      BNE	0x39F2
    039F1 C0E2      RJMP	0x3AD4
    039F2 3063      CPI	R22,3
    039F3 E0E0      LDI	R30,0
    039F4 077E      CPC	R23,R30
    039F5 F409      BNE	0x39F7
    039F6 C14B      RJMP	0x3B42
    039F7 C378      RJMP	0x3D70
(0669)         {
(0670)         case 0://1号手柄参数设置
(0671) 
(0672)         //负压等级
(0673)         HNDLE_INFORMATION.SAVE_PRESS=RX1Data[RX1Countertail][8];//同步调整参数
    039F8 9110 0576 LDS	R17,RX1Countertail
    039FA E10E      LDI	R16,0x1E
    039FB 0301      MULSU	R16,R17
    039FC E880      LDI	R24,0x80
    039FD E095      LDI	R25,5
    039FE 01F0      MOVW	R30,R0
    039FF 0FE8      ADD	R30,R24
    03A00 1FF9      ADC	R31,R25
    03A01 8020      LD	R2,Z
    03A02 9220 08A0 STS	HNDLE_INFORMATION,R2
(0674)         //吸气等级
(0675)         HNDLE_INFORMATION.SAVE_PRESS_IN=RX1Data[RX1Countertail][9];//同步调整参数
    03A04 0301      MULSU	R16,R17
    03A05 E881      LDI	R24,0x81
    03A06 E095      LDI	R25,5
    03A07 01F0      MOVW	R30,R0
    03A08 0FE8      ADD	R30,R24
    03A09 1FF9      ADC	R31,R25
    03A0A 8020      LD	R2,Z
    03A0B 9220 08A2 STS	HNDLE_INFORMATION+2,R2
(0676)         //放气等级
(0677)         HNDLE_INFORMATION.SAVE_PRESS_OUT=RX1Data[RX1Countertail][10];//同步调整参数
    03A0D 0301      MULSU	R16,R17
    03A0E E882      LDI	R24,0x82
    03A0F E095      LDI	R25,5
    03A10 01F0      MOVW	R30,R0
    03A11 0FE8      ADD	R30,R24
    03A12 1FF9      ADC	R31,R25
    03A13 8020      LD	R2,Z
    03A14 9220 08A3 STS	HNDLE_INFORMATION+3,R2
(0678)         //射频等级
(0679)         HNDLE_INFORMATION.SAVE_RF=RX1Data[RX1Countertail][11];//同步调整参数
    03A16 0301      MULSU	R16,R17
    03A17 E883      LDI	R24,0x83
    03A18 E095      LDI	R25,5
    03A19 01F0      MOVW	R30,R0
    03A1A 0FE8      ADD	R30,R24
    03A1B 1FF9      ADC	R31,R25
    03A1C 8020      LD	R2,Z
    03A1D 9220 08A1 STS	HNDLE_INFORMATION+1,R2
(0680)         //LED等级
(0681)         HNDLE_INFORMATION.SAVE_LED=RX1Data[RX1Countertail][12];//同步调整参数
    03A1F 0301      MULSU	R16,R17
    03A20 E884      LDI	R24,0x84
    03A21 E095      LDI	R25,5
    03A22 01F0      MOVW	R30,R0
    03A23 0FE8      ADD	R30,R24
    03A24 1FF9      ADC	R31,R25
    03A25 8020      LD	R2,Z
    03A26 9220 08A4 STS	HNDLE_INFORMATION+4,R2
(0682)         //红外等级
(0683)         HNDLE_INFORMATION.SAVE_INFRARED=RX1Data[RX1Countertail][13];//同步调整参数
    03A28 0301      MULSU	R16,R17
    03A29 E885      LDI	R24,0x85
    03A2A E095      LDI	R25,5
    03A2B 01F0      MOVW	R30,R0
    03A2C 0FE8      ADD	R30,R24
    03A2D 1FF9      ADC	R31,R25
    03A2E 8020      LD	R2,Z
    03A2F 9220 08A5 STS	HNDLE_INFORMATION+5,R2
(0684)         //电机转速等级
(0685)         HNDLE_INFORMATION.SAVE_MOTO_SPEED=RX1Data[RX1Countertail][14];//同步调整参数
    03A31 0301      MULSU	R16,R17
    03A32 E886      LDI	R24,0x86
    03A33 E095      LDI	R25,5
    03A34 01F0      MOVW	R30,R0
    03A35 0FE8      ADD	R30,R24
    03A36 1FF9      ADC	R31,R25
    03A37 8020      LD	R2,Z
    03A38 9220 08A6 STS	HNDLE_INFORMATION+6,R2
(0686)         //电机转向按键键值处理
(0687)         HNDLE_INFORMATION.SAVE_MOTO_TOWARD=RX1Data[RX1Countertail][15];//电机转向状态
    03A3A 0301      MULSU	R16,R17
    03A3B E887      LDI	R24,0x87
    03A3C E095      LDI	R25,5
    03A3D 01F0      MOVW	R30,R0
    03A3E 0FE8      ADD	R30,R24
    03A3F 1FF9      ADC	R31,R25
    03A40 8020      LD	R2,Z
    03A41 9220 08A7 STS	HNDLE_INFORMATION+7,R2
(0688)         Intensity[7]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;
    03A43 9220 03BA STS	Intensity+7,R2
(0689)         ModeSet();//电机转向设置
    03A45 940E 099D CALL	_ModeSet
(0690)         memcpy(buff,&RX1Data[RX1Countertail][7],9);
    03A47 E089      LDI	R24,0x9
    03A48 E090      LDI	R25,0
    03A49 8399      STD	Y+1,R25
    03A4A 8388      ST	Y,R24
    03A4B 9110 0576 LDS	R17,RX1Countertail
    03A4D E10E      LDI	R16,0x1E
    03A4E 0301      MULSU	R16,R17
    03A4F 0190      MOVW	R18,R0
    03A50 E78F      LDI	R24,0x7F
    03A51 E095      LDI	R25,5
    03A52 0F28      ADD	R18,R24
    03A53 1F39      ADC	R19,R25
    03A54 018E      MOVW	R16,R28
    03A55 5F0E      SUBI	R16,0xFE
    03A56 4F1F      SBCI	R17,0xFF
    03A57 940E 43C2 CALL	_memcpy
(0691)         DwinWriteLongWords(ADDR_HANDPARAMETER, buff, 9); //对应地址 连续写两个字节 写进度条及变量显示
    03A59 E089      LDI	R24,0x9
    03A5A 8388      ST	Y,R24
    03A5B 019E      MOVW	R18,R28
    03A5C 5F2E      SUBI	R18,0xFE
    03A5D 4F3F      SBCI	R19,0xFF
    03A5E E000      LDI	R16,0
    03A5F E413      LDI	R17,0x43
    03A60 DC6F      RCALL	_DwinWriteLongWords
(0692)         delay_ms(10);
    03A61 E00A      LDI	R16,0xA
    03A62 E010      LDI	R17,0
    03A63 940E 06B7 CALL	_delay_ms
(0693)           
(0694)           break;
    03A65 C30A      RJMP	0x3D70
(0695) 
(0696)         case 1://2号手柄参数设置
(0697)         //负压等级
(0698)         HNDLE_INFORMATION.SAVE_PRESS=RX1Data[RX1Countertail][8];//同步调整参数
    03A66 9110 0576 LDS	R17,RX1Countertail
    03A68 E10E      LDI	R16,0x1E
    03A69 0301      MULSU	R16,R17
    03A6A E880      LDI	R24,0x80
    03A6B E095      LDI	R25,5
    03A6C 01F0      MOVW	R30,R0
    03A6D 0FE8      ADD	R30,R24
    03A6E 1FF9      ADC	R31,R25
    03A6F 8020      LD	R2,Z
    03A70 9220 08A0 STS	HNDLE_INFORMATION,R2
(0699)         //吸气等级
(0700)         HNDLE_INFORMATION.SAVE_PRESS_IN=RX1Data[RX1Countertail][9];//同步调整参数
    03A72 0301      MULSU	R16,R17
    03A73 E881      LDI	R24,0x81
    03A74 E095      LDI	R25,5
    03A75 01F0      MOVW	R30,R0
    03A76 0FE8      ADD	R30,R24
    03A77 1FF9      ADC	R31,R25
    03A78 8020      LD	R2,Z
    03A79 9220 08A2 STS	HNDLE_INFORMATION+2,R2
(0701)         //放气等级
(0702)         HNDLE_INFORMATION.SAVE_PRESS_OUT=RX1Data[RX1Countertail][10];//同步调整参数
    03A7B 0301      MULSU	R16,R17
    03A7C E882      LDI	R24,0x82
    03A7D E095      LDI	R25,5
    03A7E 01F0      MOVW	R30,R0
    03A7F 0FE8      ADD	R30,R24
    03A80 1FF9      ADC	R31,R25
    03A81 8020      LD	R2,Z
    03A82 9220 08A3 STS	HNDLE_INFORMATION+3,R2
(0703)         //射频等级
(0704)         HNDLE_INFORMATION.SAVE_RF=RX1Data[RX1Countertail][11];//同步调整参数
    03A84 0301      MULSU	R16,R17
    03A85 E883      LDI	R24,0x83
    03A86 E095      LDI	R25,5
    03A87 01F0      MOVW	R30,R0
    03A88 0FE8      ADD	R30,R24
    03A89 1FF9      ADC	R31,R25
    03A8A 8020      LD	R2,Z
    03A8B 9220 08A1 STS	HNDLE_INFORMATION+1,R2
(0705)         //LED等级
(0706)         HNDLE_INFORMATION.SAVE_LED=RX1Data[RX1Countertail][12];//同步调整参数
    03A8D 0301      MULSU	R16,R17
    03A8E E884      LDI	R24,0x84
    03A8F E095      LDI	R25,5
    03A90 01F0      MOVW	R30,R0
    03A91 0FE8      ADD	R30,R24
    03A92 1FF9      ADC	R31,R25
    03A93 8020      LD	R2,Z
    03A94 9220 08A4 STS	HNDLE_INFORMATION+4,R2
(0707)         //红外等级
(0708)         HNDLE_INFORMATION.SAVE_INFRARED=RX1Data[RX1Countertail][13];//同步调整参数
    03A96 0301      MULSU	R16,R17
    03A97 E885      LDI	R24,0x85
    03A98 E095      LDI	R25,5
    03A99 01F0      MOVW	R30,R0
    03A9A 0FE8      ADD	R30,R24
    03A9B 1FF9      ADC	R31,R25
    03A9C 8020      LD	R2,Z
    03A9D 9220 08A5 STS	HNDLE_INFORMATION+5,R2
(0709)         //电机转速等级
(0710)         HNDLE_INFORMATION.SAVE_MOTO_SPEED=RX1Data[RX1Countertail][14];//同步调整参数
    03A9F 0301      MULSU	R16,R17
    03AA0 E886      LDI	R24,0x86
    03AA1 E095      LDI	R25,5
    03AA2 01F0      MOVW	R30,R0
    03AA3 0FE8      ADD	R30,R24
    03AA4 1FF9      ADC	R31,R25
    03AA5 8020      LD	R2,Z
    03AA6 9220 08A6 STS	HNDLE_INFORMATION+6,R2
(0711)         //电机转向按键键值处理
(0712)         HNDLE_INFORMATION.SAVE_MOTO_TOWARD=RX1Data[RX1Countertail][15];//电机转向状态
    03AA8 0301      MULSU	R16,R17
    03AA9 E887      LDI	R24,0x87
    03AAA E095      LDI	R25,5
    03AAB 01F0      MOVW	R30,R0
    03AAC 0FE8      ADD	R30,R24
    03AAD 1FF9      ADC	R31,R25
    03AAE 8020      LD	R2,Z
    03AAF 9220 08A7 STS	HNDLE_INFORMATION+7,R2
(0713)         Intensity[7]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;
    03AB1 9220 03BA STS	Intensity+7,R2
(0714)         ModeSet();//电机转向设置
    03AB3 940E 099D CALL	_ModeSet
(0715)         memcpy(buff,&RX1Data[RX1Countertail][7],9);
    03AB5 E089      LDI	R24,0x9
    03AB6 E090      LDI	R25,0
    03AB7 8399      STD	Y+1,R25
    03AB8 8388      ST	Y,R24
    03AB9 9110 0576 LDS	R17,RX1Countertail
    03ABB E10E      LDI	R16,0x1E
    03ABC 0301      MULSU	R16,R17
    03ABD 0190      MOVW	R18,R0
    03ABE E78F      LDI	R24,0x7F
    03ABF E095      LDI	R25,5
    03AC0 0F28      ADD	R18,R24
    03AC1 1F39      ADC	R19,R25
    03AC2 018E      MOVW	R16,R28
    03AC3 5F0E      SUBI	R16,0xFE
    03AC4 4F1F      SBCI	R17,0xFF
    03AC5 940E 43C2 CALL	_memcpy
(0716)         DwinWriteLongWords(ADDR_HANDPARAMETER, buff, 9); //对应地址 连续写两个字节 写进度条及变量显示
    03AC7 E089      LDI	R24,0x9
    03AC8 8388      ST	Y,R24
    03AC9 019E      MOVW	R18,R28
    03ACA 5F2E      SUBI	R18,0xFE
    03ACB 4F3F      SBCI	R19,0xFF
    03ACC E000      LDI	R16,0
    03ACD E413      LDI	R17,0x43
    03ACE DC01      RCALL	_DwinWriteLongWords
(0717)         delay_ms(10);
    03ACF E00A      LDI	R16,0xA
    03AD0 E010      LDI	R17,0
    03AD1 940E 06B7 CALL	_delay_ms
(0718)           break;
    03AD3 C29C      RJMP	0x3D70
(0719)         case 2://3号手柄参数设置
(0720)         //负压等级
(0721)         HNDLE_INFORMATION.SAVE_PRESS=RX1Data[RX1Countertail][8];//同步调整参数
    03AD4 9110 0576 LDS	R17,RX1Countertail
    03AD6 E10E      LDI	R16,0x1E
    03AD7 0301      MULSU	R16,R17
    03AD8 E880      LDI	R24,0x80
    03AD9 E095      LDI	R25,5
    03ADA 01F0      MOVW	R30,R0
    03ADB 0FE8      ADD	R30,R24
    03ADC 1FF9      ADC	R31,R25
    03ADD 8020      LD	R2,Z
    03ADE 9220 08A0 STS	HNDLE_INFORMATION,R2
(0722)         //吸气等级
(0723)         HNDLE_INFORMATION.SAVE_PRESS_IN=RX1Data[RX1Countertail][9];//同步调整参数
    03AE0 0301      MULSU	R16,R17
    03AE1 E881      LDI	R24,0x81
    03AE2 E095      LDI	R25,5
    03AE3 01F0      MOVW	R30,R0
    03AE4 0FE8      ADD	R30,R24
    03AE5 1FF9      ADC	R31,R25
    03AE6 8020      LD	R2,Z
    03AE7 9220 08A2 STS	HNDLE_INFORMATION+2,R2
(0724)         //放气等级
(0725)         HNDLE_INFORMATION.SAVE_PRESS_OUT=RX1Data[RX1Countertail][10];//同步调整参数
    03AE9 0301      MULSU	R16,R17
    03AEA E882      LDI	R24,0x82
    03AEB E095      LDI	R25,5
    03AEC 01F0      MOVW	R30,R0
    03AED 0FE8      ADD	R30,R24
    03AEE 1FF9      ADC	R31,R25
    03AEF 8020      LD	R2,Z
    03AF0 9220 08A3 STS	HNDLE_INFORMATION+3,R2
(0726)         //射频等级
(0727)         HNDLE_INFORMATION.SAVE_RF=RX1Data[RX1Countertail][11];//同步调整参数
    03AF2 0301      MULSU	R16,R17
    03AF3 E883      LDI	R24,0x83
    03AF4 E095      LDI	R25,5
    03AF5 01F0      MOVW	R30,R0
    03AF6 0FE8      ADD	R30,R24
    03AF7 1FF9      ADC	R31,R25
    03AF8 8020      LD	R2,Z
    03AF9 9220 08A1 STS	HNDLE_INFORMATION+1,R2
(0728)         //LED等级
(0729)         HNDLE_INFORMATION.SAVE_LED=RX1Data[RX1Countertail][12];//同步调整参数
    03AFB 0301      MULSU	R16,R17
    03AFC E884      LDI	R24,0x84
    03AFD E095      LDI	R25,5
    03AFE 01F0      MOVW	R30,R0
    03AFF 0FE8      ADD	R30,R24
    03B00 1FF9      ADC	R31,R25
    03B01 8020      LD	R2,Z
    03B02 9220 08A4 STS	HNDLE_INFORMATION+4,R2
(0730)         //红外等级
(0731)         HNDLE_INFORMATION.SAVE_INFRARED=RX1Data[RX1Countertail][13];//同步调整参数
    03B04 0301      MULSU	R16,R17
    03B05 E885      LDI	R24,0x85
    03B06 E095      LDI	R25,5
    03B07 01F0      MOVW	R30,R0
    03B08 0FE8      ADD	R30,R24
    03B09 1FF9      ADC	R31,R25
    03B0A 8020      LD	R2,Z
    03B0B 9220 08A5 STS	HNDLE_INFORMATION+5,R2
(0732)         //电机转速等级
(0733)         HNDLE_INFORMATION.SAVE_MOTO_SPEED=RX1Data[RX1Countertail][14];//同步调整参数
    03B0D 0301      MULSU	R16,R17
    03B0E E886      LDI	R24,0x86
    03B0F E095      LDI	R25,5
    03B10 01F0      MOVW	R30,R0
    03B11 0FE8      ADD	R30,R24
    03B12 1FF9      ADC	R31,R25
    03B13 8020      LD	R2,Z
    03B14 9220 08A6 STS	HNDLE_INFORMATION+6,R2
(0734)         //电机转向按键键值处理
(0735)         HNDLE_INFORMATION.SAVE_MOTO_TOWARD=RX1Data[RX1Countertail][15];//电机转向状态
    03B16 0301      MULSU	R16,R17
    03B17 E887      LDI	R24,0x87
    03B18 E095      LDI	R25,5
    03B19 01F0      MOVW	R30,R0
    03B1A 0FE8      ADD	R30,R24
    03B1B 1FF9      ADC	R31,R25
    03B1C 8020      LD	R2,Z
    03B1D 9220 08A7 STS	HNDLE_INFORMATION+7,R2
(0736)         Intensity[7]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;
    03B1F 9220 03BA STS	Intensity+7,R2
(0737)         ModeSet();//电机转向设置
    03B21 940E 099D CALL	_ModeSet
(0738)         memcpy(buff,&RX1Data[RX1Countertail][7],9);
    03B23 E089      LDI	R24,0x9
    03B24 E090      LDI	R25,0
    03B25 8399      STD	Y+1,R25
    03B26 8388      ST	Y,R24
    03B27 9110 0576 LDS	R17,RX1Countertail
    03B29 E10E      LDI	R16,0x1E
    03B2A 0301      MULSU	R16,R17
    03B2B 0190      MOVW	R18,R0
    03B2C E78F      LDI	R24,0x7F
    03B2D E095      LDI	R25,5
    03B2E 0F28      ADD	R18,R24
    03B2F 1F39      ADC	R19,R25
    03B30 018E      MOVW	R16,R28
    03B31 5F0E      SUBI	R16,0xFE
    03B32 4F1F      SBCI	R17,0xFF
    03B33 940E 43C2 CALL	_memcpy
(0739)         DwinWriteLongWords(ADDR_HANDPARAMETER, buff, 9); //对应地址 连续写两个字节 写进度条及变量显示
    03B35 E089      LDI	R24,0x9
    03B36 8388      ST	Y,R24
    03B37 019E      MOVW	R18,R28
    03B38 5F2E      SUBI	R18,0xFE
    03B39 4F3F      SBCI	R19,0xFF
    03B3A E000      LDI	R16,0
    03B3B E413      LDI	R17,0x43
    03B3C DB93      RCALL	_DwinWriteLongWords
(0740)         delay_ms(10);
    03B3D E00A      LDI	R16,0xA
    03B3E E010      LDI	R17,0
    03B3F 940E 06B7 CALL	_delay_ms
(0741)           
(0742)         break;
    03B41 C22E      RJMP	0x3D70
(0743)         case 3://4号手柄参数设置
(0744)         //负压等级
(0745)         HNDLE_INFORMATION.SAVE_PRESS=RX1Data[RX1Countertail][8];//同步调整参数
    03B42 9110 0576 LDS	R17,RX1Countertail
    03B44 E10E      LDI	R16,0x1E
    03B45 0301      MULSU	R16,R17
    03B46 E880      LDI	R24,0x80
    03B47 E095      LDI	R25,5
    03B48 01F0      MOVW	R30,R0
    03B49 0FE8      ADD	R30,R24
    03B4A 1FF9      ADC	R31,R25
    03B4B 8020      LD	R2,Z
    03B4C 9220 08A0 STS	HNDLE_INFORMATION,R2
(0746)         //吸气等级
(0747)         HNDLE_INFORMATION.SAVE_PRESS_IN=RX1Data[RX1Countertail][9];//同步调整参数
    03B4E 0301      MULSU	R16,R17
    03B4F E881      LDI	R24,0x81
    03B50 E095      LDI	R25,5
    03B51 01F0      MOVW	R30,R0
    03B52 0FE8      ADD	R30,R24
    03B53 1FF9      ADC	R31,R25
    03B54 8020      LD	R2,Z
    03B55 9220 08A2 STS	HNDLE_INFORMATION+2,R2
(0748)         //放气等级
(0749)         HNDLE_INFORMATION.SAVE_PRESS_OUT=RX1Data[RX1Countertail][10];//同步调整参数
    03B57 0301      MULSU	R16,R17
    03B58 E882      LDI	R24,0x82
    03B59 E095      LDI	R25,5
    03B5A 01F0      MOVW	R30,R0
    03B5B 0FE8      ADD	R30,R24
    03B5C 1FF9      ADC	R31,R25
    03B5D 8020      LD	R2,Z
    03B5E 9220 08A3 STS	HNDLE_INFORMATION+3,R2
(0750)         //射频等级
(0751)         HNDLE_INFORMATION.SAVE_RF=RX1Data[RX1Countertail][11];//同步调整参数
    03B60 0301      MULSU	R16,R17
    03B61 E883      LDI	R24,0x83
    03B62 E095      LDI	R25,5
    03B63 01F0      MOVW	R30,R0
    03B64 0FE8      ADD	R30,R24
    03B65 1FF9      ADC	R31,R25
    03B66 8020      LD	R2,Z
    03B67 9220 08A1 STS	HNDLE_INFORMATION+1,R2
(0752)         //LED等级
(0753)         HNDLE_INFORMATION.SAVE_LED=RX1Data[RX1Countertail][12];//同步调整参数
    03B69 0301      MULSU	R16,R17
    03B6A E884      LDI	R24,0x84
    03B6B E095      LDI	R25,5
    03B6C 01F0      MOVW	R30,R0
    03B6D 0FE8      ADD	R30,R24
    03B6E 1FF9      ADC	R31,R25
    03B6F 8020      LD	R2,Z
    03B70 9220 08A4 STS	HNDLE_INFORMATION+4,R2
(0754)         //红外等级
(0755)         HNDLE_INFORMATION.SAVE_INFRARED=RX1Data[RX1Countertail][13];//同步调整参数
    03B72 0301      MULSU	R16,R17
    03B73 E885      LDI	R24,0x85
    03B74 E095      LDI	R25,5
    03B75 01F0      MOVW	R30,R0
    03B76 0FE8      ADD	R30,R24
    03B77 1FF9      ADC	R31,R25
    03B78 8020      LD	R2,Z
    03B79 9220 08A5 STS	HNDLE_INFORMATION+5,R2
(0756)         //电机转速等级
(0757)         HNDLE_INFORMATION.SAVE_MOTO_SPEED=RX1Data[RX1Countertail][14];//同步调整参数
    03B7B 0301      MULSU	R16,R17
    03B7C E886      LDI	R24,0x86
    03B7D E095      LDI	R25,5
    03B7E 01F0      MOVW	R30,R0
    03B7F 0FE8      ADD	R30,R24
    03B80 1FF9      ADC	R31,R25
    03B81 8020      LD	R2,Z
    03B82 9220 08A6 STS	HNDLE_INFORMATION+6,R2
(0758)         //电机转向按键键值处理
(0759)         HNDLE_INFORMATION.SAVE_MOTO_TOWARD=RX1Data[RX1Countertail][15];//电机转向状态
    03B84 0301      MULSU	R16,R17
    03B85 E887      LDI	R24,0x87
    03B86 E095      LDI	R25,5
    03B87 01F0      MOVW	R30,R0
    03B88 0FE8      ADD	R30,R24
    03B89 1FF9      ADC	R31,R25
    03B8A 8020      LD	R2,Z
    03B8B 9220 08A7 STS	HNDLE_INFORMATION+7,R2
(0760)         Intensity[7]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;
    03B8D 9220 03BA STS	Intensity+7,R2
(0761)         ModeSet();//电机转向设置
    03B8F 940E 099D CALL	_ModeSet
(0762)         memcpy(buff,&RX1Data[RX1Countertail][7],9);
    03B91 E089      LDI	R24,0x9
    03B92 E090      LDI	R25,0
    03B93 8399      STD	Y+1,R25
    03B94 8388      ST	Y,R24
    03B95 9110 0576 LDS	R17,RX1Countertail
    03B97 E10E      LDI	R16,0x1E
    03B98 0301      MULSU	R16,R17
    03B99 0190      MOVW	R18,R0
    03B9A E78F      LDI	R24,0x7F
    03B9B E095      LDI	R25,5
    03B9C 0F28      ADD	R18,R24
    03B9D 1F39      ADC	R19,R25
    03B9E 018E      MOVW	R16,R28
    03B9F 5F0E      SUBI	R16,0xFE
    03BA0 4F1F      SBCI	R17,0xFF
    03BA1 940E 43C2 CALL	_memcpy
(0763)         DwinWriteLongWords(ADDR_HANDPARAMETER, buff, 9); //对应地址 连续写两个字节 写进度条及变量显示
    03BA3 E089      LDI	R24,0x9
    03BA4 8388      ST	Y,R24
    03BA5 019E      MOVW	R18,R28
    03BA6 5F2E      SUBI	R18,0xFE
    03BA7 4F3F      SBCI	R19,0xFF
    03BA8 E000      LDI	R16,0
    03BA9 E413      LDI	R17,0x43
    03BAA DB25      RCALL	_DwinWriteLongWords
(0764)         delay_ms(10);
    03BAB E00A      LDI	R16,0xA
    03BAC E010      LDI	R17,0
    03BAD 940E 06B7 CALL	_delay_ms
(0765)           
(0766)         break;
(0767)         
(0768)         default:
(0769)           break;
(0770)         }
(0771) 
(0772)         break;
    03BAF C1C0      RJMP	0x3D70
(0773) 
(0774) 
(0775) 	      case ADDR_HANDWORK://手柄工作启停指令
(0776) 
(0777)         switch (DwinData)
    03BB0 9160 03D0 LDS	R22,DwinData
    03BB2 9170 03D1 LDS	R23,DwinData+1
    03BB4 3060      CPI	R22,0
    03BB5 0767      CPC	R22,R23
    03BB6 F081      BEQ	0x3BC7
    03BB7 3061      CPI	R22,1
    03BB8 E0E0      LDI	R30,0
    03BB9 077E      CPC	R23,R30
    03BBA F409      BNE	0x3BBC
    03BBB C039      RJMP	0x3BF5
    03BBC 3062      CPI	R22,2
    03BBD E0E0      LDI	R30,0
    03BBE 077E      CPC	R23,R30
    03BBF F409      BNE	0x3BC1
    03BC0 C07A      RJMP	0x3C3B
    03BC1 3063      CPI	R22,3
    03BC2 E0E0      LDI	R30,0
    03BC3 077E      CPC	R23,R30
    03BC4 F409      BNE	0x3BC6
    03BC5 C0BB      RJMP	0x3C81
    03BC6 C1A9      RJMP	0x3D70
(0778)         {
(0779)         case 0://1号手柄启停处理
(0780)   
(0781)         MACHINE_STATE.WORK_STATE=RX1Data[RX1Countertail][8];//赋值
    03BC7 9110 0576 LDS	R17,RX1Countertail
    03BC9 E10E      LDI	R16,0x1E
    03BCA 0301      MULSU	R16,R17
    03BCB E880      LDI	R24,0x80
    03BCC E095      LDI	R25,5
    03BCD 01F0      MOVW	R30,R0
    03BCE 0FE8      ADD	R30,R24
    03BCF 1FF9      ADC	R31,R25
    03BD0 8020      LD	R2,Z
    03BD1 9220 089C STS	MACHINE_STATE+1,R2
(0782)         memcpy(buff,&RX1Data[RX1Countertail][7],2);
    03BD3 E082      LDI	R24,2
    03BD4 E090      LDI	R25,0
    03BD5 8399      STD	Y+1,R25
    03BD6 8388      ST	Y,R24
    03BD7 0301      MULSU	R16,R17
    03BD8 0190      MOVW	R18,R0
    03BD9 E78F      LDI	R24,0x7F
    03BDA E095      LDI	R25,5
    03BDB 0F28      ADD	R18,R24
    03BDC 1F39      ADC	R19,R25
    03BDD 018E      MOVW	R16,R28
    03BDE 5F0E      SUBI	R16,0xFE
    03BDF 4F1F      SBCI	R17,0xFF
    03BE0 940E 43C2 CALL	_memcpy
(0783)         DwinWriteLongWords(ADDR_HANDWORK, buff, 2); //反馈给安卓端
    03BE2 E082      LDI	R24,2
    03BE3 8388      ST	Y,R24
    03BE4 019E      MOVW	R18,R28
    03BE5 5F2E      SUBI	R18,0xFE
    03BE6 4F3F      SBCI	R19,0xFF
    03BE7 E001      LDI	R16,1
    03BE8 E413      LDI	R17,0x43
    03BE9 DAE6      RCALL	_DwinWriteLongWords
(0784)        // delay_ms(10);
(0785)         if(MACHINE_STATE.HANDLE_ID==1)//1号485通讯手柄
    03BEA 9180 089B LDS	R24,MACHINE_STATE
    03BEC 3081      CPI	R24,1
    03BED F009      BEQ	0x3BEF
    03BEE C181      RJMP	0x3D70
(0786)         {Send_command();delay_ms(10);}//1号手柄启停
    03BEF D78A      RCALL	_Send_command
    03BF0 E00A      LDI	R16,0xA
    03BF1 E010      LDI	R17,0
    03BF2 940E 06B7 CALL	_delay_ms
(0787)           
(0788)           break;
    03BF4 C17B      RJMP	0x3D70
(0789) 
(0790)         case 1://2号手柄启停处理
(0791)         MACHINE_STATE.WORK_STATE=RX1Data[RX1Countertail][8];//赋值
    03BF5 9110 0576 LDS	R17,RX1Countertail
    03BF7 E10E      LDI	R16,0x1E
    03BF8 0301      MULSU	R16,R17
    03BF9 E880      LDI	R24,0x80
    03BFA E095      LDI	R25,5
    03BFB 01F0      MOVW	R30,R0
    03BFC 0FE8      ADD	R30,R24
    03BFD 1FF9      ADC	R31,R25
    03BFE 8020      LD	R2,Z
    03BFF 9220 089C STS	MACHINE_STATE+1,R2
(0792)         memcpy(buff,&RX1Data[RX1Countertail][7],2);
    03C01 E082      LDI	R24,2
    03C02 E090      LDI	R25,0
    03C03 8399      STD	Y+1,R25
    03C04 8388      ST	Y,R24
    03C05 0301      MULSU	R16,R17
    03C06 0190      MOVW	R18,R0
    03C07 E78F      LDI	R24,0x7F
    03C08 E095      LDI	R25,5
    03C09 0F28      ADD	R18,R24
    03C0A 1F39      ADC	R19,R25
    03C0B 018E      MOVW	R16,R28
    03C0C 5F0E      SUBI	R16,0xFE
    03C0D 4F1F      SBCI	R17,0xFF
    03C0E 940E 43C2 CALL	_memcpy
(0793)         DwinWriteLongWords(ADDR_HANDWORK, buff, 2); //反馈给安卓端
    03C10 E082      LDI	R24,2
    03C11 8388      ST	Y,R24
    03C12 019E      MOVW	R18,R28
    03C13 5F2E      SUBI	R18,0xFE
    03C14 4F3F      SBCI	R19,0xFF
    03C15 E001      LDI	R16,1
    03C16 E413      LDI	R17,0x43
    03C17 DAB8      RCALL	_DwinWriteLongWords
(0794)         
(0795)         if(MACHINE_STATE.WORK_STATE==1)
    03C18 9180 089C LDS	R24,MACHINE_STATE+1
    03C1A 3081      CPI	R24,1
    03C1B F4A1      BNE	0x3C30
(0796)         {
(0797)           if(Intensity[8]==2)  BitClr(PORTG,4);//手柄工作指示灯
    03C1C 9180 03BB LDS	R24,Intensity+8
    03C1E 3082      CPI	R24,2
    03C1F F429      BNE	0x3C25
    03C20 9180 0065 LDS	R24,0x65
    03C22 7E8F      ANDI	R24,0xEF
    03C23 9380 0065 STS	0x65,R24
(0798)           if(Intensity[8]==3)  BitClr(PORTG,3);//手柄工作指示灯
    03C25 9180 03BB LDS	R24,Intensity+8
    03C27 3083      CPI	R24,3
    03C28 F009      BEQ	0x3C2A
    03C29 C146      RJMP	0x3D70
    03C2A 9180 0065 LDS	R24,0x65
    03C2C 7F87      ANDI	R24,0xF7
    03C2D 9380 0065 STS	0x65,R24
(0799)         }
    03C2F C140      RJMP	0x3D70
(0800)         else
(0801)         {
(0802)           BitSet(PORTG,4);
    03C30 9180 0065 LDS	R24,0x65
    03C32 6180      ORI	R24,0x10
    03C33 9380 0065 STS	0x65,R24
(0803)           BitSet(PORTG,3);
    03C35 9180 0065 LDS	R24,0x65
    03C37 6088      ORI	R24,0x8
    03C38 9380 0065 STS	0x65,R24
(0804)         }
(0805)           
(0806)           break;
    03C3A C135      RJMP	0x3D70
(0807) 
(0808)         case 2://3号手柄启停处理
(0809)         MACHINE_STATE.WORK_STATE=RX1Data[RX1Countertail][8];//赋值
    03C3B 9110 0576 LDS	R17,RX1Countertail
    03C3D E10E      LDI	R16,0x1E
    03C3E 0301      MULSU	R16,R17
    03C3F E880      LDI	R24,0x80
    03C40 E095      LDI	R25,5
    03C41 01F0      MOVW	R30,R0
    03C42 0FE8      ADD	R30,R24
    03C43 1FF9      ADC	R31,R25
    03C44 8020      LD	R2,Z
    03C45 9220 089C STS	MACHINE_STATE+1,R2
(0810)         memcpy(buff,&RX1Data[RX1Countertail][7],2);
    03C47 E082      LDI	R24,2
    03C48 E090      LDI	R25,0
    03C49 8399      STD	Y+1,R25
    03C4A 8388      ST	Y,R24
    03C4B 0301      MULSU	R16,R17
    03C4C 0190      MOVW	R18,R0
    03C4D E78F      LDI	R24,0x7F
    03C4E E095      LDI	R25,5
    03C4F 0F28      ADD	R18,R24
    03C50 1F39      ADC	R19,R25
    03C51 018E      MOVW	R16,R28
    03C52 5F0E      SUBI	R16,0xFE
    03C53 4F1F      SBCI	R17,0xFF
    03C54 940E 43C2 CALL	_memcpy
(0811)         DwinWriteLongWords(ADDR_HANDWORK, buff, 2); //反馈给安卓端
    03C56 E082      LDI	R24,2
    03C57 8388      ST	Y,R24
    03C58 019E      MOVW	R18,R28
    03C59 5F2E      SUBI	R18,0xFE
    03C5A 4F3F      SBCI	R19,0xFF
    03C5B E001      LDI	R16,1
    03C5C E413      LDI	R17,0x43
    03C5D DA72      RCALL	_DwinWriteLongWords
(0812)         
(0813)         if(MACHINE_STATE.WORK_STATE==1)
    03C5E 9180 089C LDS	R24,MACHINE_STATE+1
    03C60 3081      CPI	R24,1
    03C61 F4A1      BNE	0x3C76
(0814)         {
(0815)           if(Intensity[8]==2)  BitClr(PORTG,4);//手柄工作指示灯
    03C62 9180 03BB LDS	R24,Intensity+8
    03C64 3082      CPI	R24,2
    03C65 F429      BNE	0x3C6B
    03C66 9180 0065 LDS	R24,0x65
    03C68 7E8F      ANDI	R24,0xEF
    03C69 9380 0065 STS	0x65,R24
(0816)           if(Intensity[8]==3)  BitClr(PORTG,3);//手柄工作指示灯
    03C6B 9180 03BB LDS	R24,Intensity+8
    03C6D 3083      CPI	R24,3
    03C6E F009      BEQ	0x3C70
    03C6F C100      RJMP	0x3D70
    03C70 9180 0065 LDS	R24,0x65
    03C72 7F87      ANDI	R24,0xF7
    03C73 9380 0065 STS	0x65,R24
(0817)         }
    03C75 C0FA      RJMP	0x3D70
(0818)         else
(0819)         {
(0820)           BitSet(PORTG,4);
    03C76 9180 0065 LDS	R24,0x65
    03C78 6180      ORI	R24,0x10
    03C79 9380 0065 STS	0x65,R24
(0821)           BitSet(PORTG,3);
    03C7B 9180 0065 LDS	R24,0x65
    03C7D 6088      ORI	R24,0x8
    03C7E 9380 0065 STS	0x65,R24
(0822)         }
(0823)           
(0824)           break;
    03C80 C0EF      RJMP	0x3D70
(0825) 
(0826)         case 3://4号手柄启停处理
(0827)         MACHINE_STATE.WORK_STATE=RX1Data[RX1Countertail][8];//赋值
    03C81 9110 0576 LDS	R17,RX1Countertail
    03C83 E10E      LDI	R16,0x1E
    03C84 0301      MULSU	R16,R17
    03C85 E880      LDI	R24,0x80
    03C86 E095      LDI	R25,5
    03C87 01F0      MOVW	R30,R0
    03C88 0FE8      ADD	R30,R24
    03C89 1FF9      ADC	R31,R25
    03C8A 8020      LD	R2,Z
    03C8B 9220 089C STS	MACHINE_STATE+1,R2
(0828)         memcpy(buff,&RX1Data[RX1Countertail][7],2);
    03C8D E082      LDI	R24,2
    03C8E E090      LDI	R25,0
    03C8F 8399      STD	Y+1,R25
    03C90 8388      ST	Y,R24
    03C91 0301      MULSU	R16,R17
    03C92 0190      MOVW	R18,R0
    03C93 E78F      LDI	R24,0x7F
    03C94 E095      LDI	R25,5
    03C95 0F28      ADD	R18,R24
    03C96 1F39      ADC	R19,R25
    03C97 018E      MOVW	R16,R28
    03C98 5F0E      SUBI	R16,0xFE
    03C99 4F1F      SBCI	R17,0xFF
    03C9A 940E 43C2 CALL	_memcpy
(0829)         DwinWriteLongWords(ADDR_HANDWORK, buff, 2); //反馈给安卓端
    03C9C E082      LDI	R24,2
    03C9D 8388      ST	Y,R24
    03C9E 019E      MOVW	R18,R28
    03C9F 5F2E      SUBI	R18,0xFE
    03CA0 4F3F      SBCI	R19,0xFF
    03CA1 E001      LDI	R16,1
    03CA2 E413      LDI	R17,0x43
    03CA3 DA2C      RCALL	_DwinWriteLongWords
(0830)         
(0831)         if(MACHINE_STATE.WORK_STATE==1)
    03CA4 9180 089C LDS	R24,MACHINE_STATE+1
    03CA6 3081      CPI	R24,1
    03CA7 F4A1      BNE	0x3CBC
(0832)         {
(0833)           if(Intensity[8]==2)  BitClr(PORTG,4);//手柄工作指示灯
    03CA8 9180 03BB LDS	R24,Intensity+8
    03CAA 3082      CPI	R24,2
    03CAB F429      BNE	0x3CB1
    03CAC 9180 0065 LDS	R24,0x65
    03CAE 7E8F      ANDI	R24,0xEF
    03CAF 9380 0065 STS	0x65,R24
(0834)           if(Intensity[8]==3)  BitClr(PORTG,3);//手柄工作指示灯
    03CB1 9180 03BB LDS	R24,Intensity+8
    03CB3 3083      CPI	R24,3
    03CB4 F009      BEQ	0x3CB6
    03CB5 C0BA      RJMP	0x3D70
    03CB6 9180 0065 LDS	R24,0x65
    03CB8 7F87      ANDI	R24,0xF7
    03CB9 9380 0065 STS	0x65,R24
(0835)         }
    03CBB C0B4      RJMP	0x3D70
(0836)         else
(0837)         {
(0838)           BitSet(PORTG,4);
    03CBC 9180 0065 LDS	R24,0x65
    03CBE 6180      ORI	R24,0x10
    03CBF 9380 0065 STS	0x65,R24
(0839)           BitSet(PORTG,3);
    03CC1 9180 0065 LDS	R24,0x65
    03CC3 6088      ORI	R24,0x8
    03CC4 9380 0065 STS	0x65,R24
(0840)         }
(0841)           
(0842)           break;
(0843)         
(0844)         default:
(0845)           break;
(0846)         }
(0847) 
(0848)         break;
    03CC6 C0A9      RJMP	0x3D70
(0849) 		
(0850) 
(0851)         case ADDR_HAND40KWORK://爆脂手柄工作启停指令
(0852)         MACHINE_STATE.WORK_STATE=RX1Data[RX1Countertail][8];//赋值
    03CC7 9110 0576 LDS	R17,RX1Countertail
    03CC9 E10E      LDI	R16,0x1E
    03CCA 0301      MULSU	R16,R17
    03CCB E880      LDI	R24,0x80
    03CCC E095      LDI	R25,5
    03CCD 01F0      MOVW	R30,R0
    03CCE 0FE8      ADD	R30,R24
    03CCF 1FF9      ADC	R31,R25
    03CD0 8020      LD	R2,Z
    03CD1 9220 089C STS	MACHINE_STATE+1,R2
(0853)         memcpy(buff,&RX1Data[RX1Countertail][7],2);
    03CD3 E082      LDI	R24,2
    03CD4 E090      LDI	R25,0
    03CD5 8399      STD	Y+1,R25
    03CD6 8388      ST	Y,R24
    03CD7 0301      MULSU	R16,R17
    03CD8 0190      MOVW	R18,R0
    03CD9 E78F      LDI	R24,0x7F
    03CDA E095      LDI	R25,5
    03CDB 0F28      ADD	R18,R24
    03CDC 1F39      ADC	R19,R25
    03CDD 018E      MOVW	R16,R28
    03CDE 5F0E      SUBI	R16,0xFE
    03CDF 4F1F      SBCI	R17,0xFF
    03CE0 940E 43C2 CALL	_memcpy
(0854)         DwinWriteLongWords(ADDR_HAND40KWORK, buff, 2); //反馈给安卓端
    03CE2 E082      LDI	R24,2
    03CE3 8388      ST	Y,R24
    03CE4 019E      MOVW	R18,R28
    03CE5 5F2E      SUBI	R18,0xFE
    03CE6 4F3F      SBCI	R19,0xFF
    03CE7 E001      LDI	R16,1
    03CE8 E414      LDI	R17,0x44
    03CE9 D9E6      RCALL	_DwinWriteLongWords
(0855)         
(0856)         if(MACHINE_STATE.WORK_STATE==1)
    03CEA 9180 089C LDS	R24,MACHINE_STATE+1
    03CEC 3081      CPI	R24,1
    03CED F4A1      BNE	0x3D02
(0857)         {
(0858)           if(Intensity[8]==2)  BitClr(PORTG,4);//手柄工作指示灯
    03CEE 9180 03BB LDS	R24,Intensity+8
    03CF0 3082      CPI	R24,2
    03CF1 F429      BNE	0x3CF7
    03CF2 9180 0065 LDS	R24,0x65
    03CF4 7E8F      ANDI	R24,0xEF
    03CF5 9380 0065 STS	0x65,R24
(0859)           if(Intensity[8]==3)  BitClr(PORTG,3);//手柄工作指示灯
    03CF7 9180 03BB LDS	R24,Intensity+8
    03CF9 3083      CPI	R24,3
    03CFA F009      BEQ	0x3CFC
    03CFB C074      RJMP	0x3D70
    03CFC 9180 0065 LDS	R24,0x65
    03CFE 7F87      ANDI	R24,0xF7
    03CFF 9380 0065 STS	0x65,R24
(0860)         }
    03D01 C06E      RJMP	0x3D70
(0861)         else
(0862)         {
(0863)           BitSet(PORTG,4);
    03D02 9180 0065 LDS	R24,0x65
    03D04 6180      ORI	R24,0x10
    03D05 9380 0065 STS	0x65,R24
(0864)           BitSet(PORTG,3);
    03D07 9180 0065 LDS	R24,0x65
    03D09 6088      ORI	R24,0x8
    03D0A 9380 0065 STS	0x65,R24
(0865)         }
(0866)         break;
    03D0C C063      RJMP	0x3D70
(0867) 
(0868)         case ADDR_HAND40KPARAMETER: //爆脂手柄能量调节
(0869)         SAVE_FAT_FLAME=RX1Data[RX1Countertail][8];//同步调整参数
    03D0D 9110 0576 LDS	R17,RX1Countertail
    03D0F E10E      LDI	R16,0x1E
    03D10 0301      MULSU	R16,R17
    03D11 E880      LDI	R24,0x80
    03D12 E095      LDI	R25,5
    03D13 01F0      MOVW	R30,R0
    03D14 0FE8      ADD	R30,R24
    03D15 1FF9      ADC	R31,R25
    03D16 8020      LD	R2,Z
    03D17 9220 084B STS	SAVE_FAT_FLAME,R2
(0870)         //DwinWriteLongWords(ADDR_BOOTINGINFRAREDLINE, buff, 1); //对应地址 连续写两个字节 写进度条及变量显示
(0871)         memcpy(buff,&RX1Data[RX1Countertail][7],2);
    03D19 E082      LDI	R24,2
    03D1A E090      LDI	R25,0
    03D1B 8399      STD	Y+1,R25
    03D1C 8388      ST	Y,R24
    03D1D 0301      MULSU	R16,R17
    03D1E 0190      MOVW	R18,R0
    03D1F E78F      LDI	R24,0x7F
    03D20 E095      LDI	R25,5
    03D21 0F28      ADD	R18,R24
    03D22 1F39      ADC	R19,R25
    03D23 018E      MOVW	R16,R28
    03D24 5F0E      SUBI	R16,0xFE
    03D25 4F1F      SBCI	R17,0xFF
    03D26 940E 43C2 CALL	_memcpy
(0872)         DwinWriteLongWords(ADDR_HAND40KPARAMETER, buff, 2); //反馈给安卓端
    03D28 E082      LDI	R24,2
    03D29 8388      ST	Y,R24
    03D2A 019E      MOVW	R18,R28
    03D2B 5F2E      SUBI	R18,0xFE
    03D2C 4F3F      SBCI	R19,0xFF
    03D2D E000      LDI	R16,0
    03D2E E414      LDI	R17,0x44
    03D2F D9A0      RCALL	_DwinWriteLongWords
(0873)         delay_ms(10);
    03D30 E00A      LDI	R16,0xA
    03D31 E010      LDI	R17,0
    03D32 940E 06B7 CALL	_delay_ms
(0874) 				break;
    03D34 C03B      RJMP	0x3D70
(0875) 
(0876)         
(0877)         case ADDR_HANDPARAMETER_SAVE: //后台能量设置
(0878)         SettingDdata.SET_WORKPOWER=RX1Data[RX1Countertail][9];//同步调整参数
    03D35 9110 0576 LDS	R17,RX1Countertail
    03D37 E10E      LDI	R16,0x1E
    03D38 0301      MULSU	R16,R17
    03D39 E881      LDI	R24,0x81
    03D3A E095      LDI	R25,5
    03D3B 01F0      MOVW	R30,R0
    03D3C 0FE8      ADD	R30,R24
    03D3D 1FF9      ADC	R31,R25
    03D3E 8020      LD	R2,Z
    03D3F 9220 089A STS	SettingDdata+70,R2
(0879)         RfPer=SettingDdata.SET_WORKPOWER;
    03D41 9220 07D0 STS	RfPer,R2
(0880)         //DwinWriteLongWords(ADDR_BOOTINGINFRAREDLINE, buff, 1); //对应地址 连续写两个字节 写进度条及变量显示
(0881)         memcpy(buff,&RX1Data[RX1Countertail][7],3);
    03D43 E083      LDI	R24,3
    03D44 E090      LDI	R25,0
    03D45 8399      STD	Y+1,R25
    03D46 8388      ST	Y,R24
    03D47 0301      MULSU	R16,R17
    03D48 0190      MOVW	R18,R0
    03D49 E78F      LDI	R24,0x7F
    03D4A E095      LDI	R25,5
    03D4B 0F28      ADD	R18,R24
    03D4C 1F39      ADC	R19,R25
    03D4D 018E      MOVW	R16,R28
    03D4E 5F0E      SUBI	R16,0xFE
    03D4F 4F1F      SBCI	R17,0xFF
    03D50 940E 43C2 CALL	_memcpy
(0882)         DwinWriteLongWords(ADDR_HANDPARAMETER_SAVE, buff, 3); //反馈给安卓端
    03D52 E083      LDI	R24,3
    03D53 8388      ST	Y,R24
    03D54 019E      MOVW	R18,R28
    03D55 5F2E      SUBI	R18,0xFE
    03D56 4F3F      SBCI	R19,0xFF
    03D57 E000      LDI	R16,0
    03D58 E415      LDI	R17,0x45
    03D59 D976      RCALL	_DwinWriteLongWords
(0883)         delay_ms(10);
    03D5A E00A      LDI	R16,0xA
    03D5B E010      LDI	R17,0
    03D5C 940E 06B7 CALL	_delay_ms
(0884) 				break;
    03D5E C011      RJMP	0x3D70
(0885) 
(0886)         case ADDR_HANDPARAMETER_READ: //后台参数读取
(0887)         RfPer=SettingDdata.SET_WORKPOWER;
    03D5F 9020 089A LDS	R2,SettingDdata+70
    03D61 9220 07D0 STS	RfPer,R2
(0888)         buff[0]=RfPer;
    03D63 822A      STD	Y+2,R2
(0889)         DwinWriteLongWords(ADDR_HANDPARAMETER_READ, buff, 1); //反馈给安卓端
    03D64 E081      LDI	R24,1
    03D65 8388      ST	Y,R24
    03D66 019E      MOVW	R18,R28
    03D67 5F2E      SUBI	R18,0xFE
    03D68 4F3F      SBCI	R19,0xFF
    03D69 E001      LDI	R16,1
    03D6A E415      LDI	R17,0x45
    03D6B D964      RCALL	_DwinWriteLongWords
(0890)         delay_ms(10);
    03D6C E00A      LDI	R16,0xA
    03D6D E010      LDI	R17,0
    03D6E 940E 06B7 CALL	_delay_ms
(0891) 				break;
(0892) 
(0893) 
(0894) 
(0895) 
(0896) 
(0897)         default:  break;  
(0898) 			}
(0899)       break;
(0900) 			default:  break;  
(0901) 		}
(0902) 		//处理完一条指令 移动指针 循环增加  直至与接收指针相同为止
(0903) 		//if (isLongPress == false)
(0904) 		//MoveFinishIndex();
(0905)     for(i=0;i<30;i++)
    03D70 2744      CLR	R20
    03D71 C010      RJMP	0x3D82
(0906)     {RX1Data[RX1Countertail][i]=0;}
    03D72 9110 0576 LDS	R17,RX1Countertail
    03D74 E10E      LDI	R16,0x1E
    03D75 0301      MULSU	R16,R17
    03D76 0110      MOVW	R2,R0
    03D77 E788      LDI	R24,0x78
    03D78 E095      LDI	R25,5
    03D79 0E28      ADD	R2,R24
    03D7A 1E39      ADC	R3,R25
    03D7B 2FE4      MOV	R30,R20
    03D7C 27FF      CLR	R31
    03D7D 0DE2      ADD	R30,R2
    03D7E 1DF3      ADC	R31,R3
    03D7F 2422      CLR	R2
    03D80 8220      ST	Z,R2
    03D81 9543      INC	R20
    03D82 314E      CPI	R20,0x1E
    03D83 F370      BCS	0x3D72
(0907)     RX1Countertail++;
    03D84 9180 0576 LDS	R24,RX1Countertail
    03D86 5F8F      SUBI	R24,0xFF
    03D87 9380 0576 STS	RX1Countertail,R24
(0908)     if(RX1Countertail>20){RX1Countertail=0;}
    03D89 E184      LDI	R24,0x14
    03D8A 9020 0576 LDS	R2,RX1Countertail
    03D8C 1582      CP	R24,R2
    03D8D F418      BCC	0x3D91
    03D8E 2422      CLR	R2
    03D8F 9220 0576 STS	RX1Countertail,R2
(0909)   }
    03D91 9662      ADIW	R28,0x12
    03D92 940C 451E JMP	pop_xgsetF000
(0910) }
(0911) 
(0912) 
(0913) /**
(0914)  * @brief  治疗仪参数处理函数
(0915)  * @note   //之前定义 Intensity[0] LED等级  Intensity[2] RF等级  Intensity[3] 电机转速等级  Intensity[8] 手柄ID
(0916)  * @note   //之前定义 Intensity[4] 负压等级  Intensity[5] 吸气时间  Intensity[6] 放气时间  Intensity[7] 电机转向
(0917)  * @retval None
(0918)  */
(0919) void TASK_PROCESSING(void)
(0920) {
(0921)  
(0922)   if (DIWEN_RECEICEDATA_STATE==1)
_TASK_PROCESSING:
    03D94 9180 03D4 LDS	R24,DIWEN_RECEICEDATA_STATE
    03D96 3081      CPI	R24,1
    03D97 F009      BEQ	0x3D99
    03D98 C080      RJMP	0x3E19
(0923)   {
(0924)     DIWEN_RECEICEDATA_STATE=0;
    03D99 2422      CLR	R2
    03D9A 9220 03D4 STS	DIWEN_RECEICEDATA_STATE,R2
(0925)     if(MACHINE_STATE.HANDLE_ID==1)//1号手柄处理
    03D9C 9180 089B LDS	R24,MACHINE_STATE
    03D9E 3081      CPI	R24,1
    03D9F F521      BNE	0x3DC4
(0926)     {
(0927)       Intensity[0]=HNDLE_INFORMATION.SAVE_LED;//LED等级
    03DA0 9020 08A4 LDS	R2,HNDLE_INFORMATION+4
    03DA2 9220 03B3 STS	Intensity,R2
(0928)       Intensity[1]=HNDLE_INFORMATION.SAVE_INFRARED;//红外等级
    03DA4 9020 08A5 LDS	R2,HNDLE_INFORMATION+5
    03DA6 9220 03B4 STS	Intensity+1,R2
(0929)       Intensity[2]=HNDLE_INFORMATION.SAVE_RF;//射频等级
    03DA8 9020 08A1 LDS	R2,HNDLE_INFORMATION+1
    03DAA 9220 03B5 STS	Intensity+2,R2
(0930)       Intensity[3]=HNDLE_INFORMATION.SAVE_MOTO_SPEED;//电机转速等级
    03DAC 9020 08A6 LDS	R2,HNDLE_INFORMATION+6
    03DAE 9220 03B6 STS	Intensity+3,R2
(0931)       Intensity[4]=HNDLE_INFORMATION.SAVE_PRESS;//负压等级
    03DB0 9020 08A0 LDS	R2,HNDLE_INFORMATION
    03DB2 9220 03B7 STS	Intensity+4,R2
(0932)       Intensity[5]=HNDLE_INFORMATION.SAVE_PRESS_IN;//吸气时间
    03DB4 9020 08A2 LDS	R2,HNDLE_INFORMATION+2
    03DB6 9220 03B8 STS	Intensity+5,R2
(0933)       Intensity[6]=HNDLE_INFORMATION.SAVE_PRESS_OUT;//放气时间
    03DB8 9020 08A3 LDS	R2,HNDLE_INFORMATION+3
    03DBA 9220 03B9 STS	Intensity+6,R2
(0934)       Intensity[7]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;//电机转向
    03DBC 9020 08A7 LDS	R2,HNDLE_INFORMATION+7
    03DBE 9220 03BA STS	Intensity+7,R2
(0935)       Intensity[8]=MACHINE_STATE.HANDLE_ID-1;//手柄ID
    03DC0 5081      SUBI	R24,1
    03DC1 9380 03BB STS	Intensity+8,R24
(0936)       Send_Data8();//1号手柄参数同步
    03DC3 D56F      RCALL	_Send_Data8
(0937)     }
(0938) 
(0939)     if(MACHINE_STATE.HANDLE_ID==2)//2号手柄处理
    03DC4 9180 089B LDS	R24,MACHINE_STATE
    03DC6 3082      CPI	R24,2
    03DC7 F4F9      BNE	0x3DE7
(0940)     {
(0941)       Intensity[0]=HNDLE_INFORMATION.SAVE_LED;//LED等级
    03DC8 9020 08A4 LDS	R2,HNDLE_INFORMATION+4
    03DCA 9220 03B3 STS	Intensity,R2
(0942)       Intensity[2]=HNDLE_INFORMATION.SAVE_RF;//射频等级
    03DCC 9020 08A1 LDS	R2,HNDLE_INFORMATION+1
    03DCE 9220 03B5 STS	Intensity+2,R2
(0943)       Intensity[3]=HNDLE_INFORMATION.SAVE_MOTO_SPEED;//电机转速等级
    03DD0 9020 08A6 LDS	R2,HNDLE_INFORMATION+6
    03DD2 9220 03B6 STS	Intensity+3,R2
(0944)       Intensity[4]=HNDLE_INFORMATION.SAVE_PRESS;//负压等级
    03DD4 9020 08A0 LDS	R2,HNDLE_INFORMATION
    03DD6 9220 03B7 STS	Intensity+4,R2
(0945)       Intensity[5]=HNDLE_INFORMATION.SAVE_PRESS_IN;//吸气时间
    03DD8 9020 08A2 LDS	R2,HNDLE_INFORMATION+2
    03DDA 9220 03B8 STS	Intensity+5,R2
(0946)       Intensity[6]=HNDLE_INFORMATION.SAVE_PRESS_OUT;//放气时间
    03DDC 9020 08A3 LDS	R2,HNDLE_INFORMATION+3
    03DDE 9220 03B9 STS	Intensity+6,R2
(0947)       Intensity[7]=HNDLE_INFORMATION.SAVE_MOTO_TOWARD;//电机转向
    03DE0 9020 08A7 LDS	R2,HNDLE_INFORMATION+7
    03DE2 9220 03BA STS	Intensity+7,R2
(0948)       Intensity[8]=MACHINE_STATE.HANDLE_ID-1;//手柄ID
    03DE4 5081      SUBI	R24,1
    03DE5 9380 03BB STS	Intensity+8,R24
(0949)     }
(0950) 
(0951)     if(MACHINE_STATE.HANDLE_ID==3)//3号手柄处理
    03DE7 9180 089B LDS	R24,MACHINE_STATE
    03DE9 3083      CPI	R24,3
    03DEA F4B9      BNE	0x3E02
(0952)     {
(0953)       Intensity[0]=HNDLE_INFORMATION.SAVE_LED;//LED等级
    03DEB 9020 08A4 LDS	R2,HNDLE_INFORMATION+4
    03DED 9220 03B3 STS	Intensity,R2
(0954)       Intensity[2]=HNDLE_INFORMATION.SAVE_RF;//射频等级
    03DEF 9020 08A1 LDS	R2,HNDLE_INFORMATION+1
    03DF1 9220 03B5 STS	Intensity+2,R2
(0955)       Intensity[4]=HNDLE_INFORMATION.SAVE_PRESS;//负压等级
    03DF3 9020 08A0 LDS	R2,HNDLE_INFORMATION
    03DF5 9220 03B7 STS	Intensity+4,R2
(0956)       Intensity[5]=HNDLE_INFORMATION.SAVE_PRESS_IN;//吸气时间
    03DF7 9020 08A2 LDS	R2,HNDLE_INFORMATION+2
    03DF9 9220 03B8 STS	Intensity+5,R2
(0957)       Intensity[6]=HNDLE_INFORMATION.SAVE_PRESS_OUT;//放气时间
    03DFB 9020 08A3 LDS	R2,HNDLE_INFORMATION+3
    03DFD 9220 03B9 STS	Intensity+6,R2
(0958)       Intensity[8]=MACHINE_STATE.HANDLE_ID-1;//手柄ID
    03DFF 5081      SUBI	R24,1
    03E00 9380 03BB STS	Intensity+8,R24
(0959)     }
(0960) 
(0961) 
(0962)     if(MACHINE_STATE.HANDLE_ID==4)//4号手柄处理
    03E02 9180 089B LDS	R24,MACHINE_STATE
    03E04 3084      CPI	R24,4
    03E05 F499      BNE	0x3E19
(0963)     {
(0964)       Intensity[2]=HNDLE_INFORMATION.SAVE_RF;//射频等级
    03E06 9020 08A1 LDS	R2,HNDLE_INFORMATION+1
    03E08 9220 03B5 STS	Intensity+2,R2
(0965)       Intensity[4]=HNDLE_INFORMATION.SAVE_PRESS;//负压等级
    03E0A 9020 08A0 LDS	R2,HNDLE_INFORMATION
    03E0C 9220 03B7 STS	Intensity+4,R2
(0966)       Intensity[5]=HNDLE_INFORMATION.SAVE_PRESS_IN;//吸气时间
    03E0E 9020 08A2 LDS	R2,HNDLE_INFORMATION+2
    03E10 9220 03B8 STS	Intensity+5,R2
(0967)       Intensity[6]=HNDLE_INFORMATION.SAVE_PRESS_OUT;//放气时间
    03E12 9020 08A3 LDS	R2,HNDLE_INFORMATION+3
    03E14 9220 03B9 STS	Intensity+6,R2
(0968)       Intensity[8]=MACHINE_STATE.HANDLE_ID-1;//手柄ID
    03E16 5081      SUBI	R24,1
    03E17 9380 03BB STS	Intensity+8,R24
(0969)     }
(0970) 
(0971)   }
    03E19 9508      RET
(0972)   
(0973) }
(0974) 
(0975) 
(0976) /*HAO****************************************************/
(0977) 
(0978) unsigned char  GetChecking(void)
(0979) {
(0980)   unsigned int Or=0;
_GetChecking:
  Len                  --> R18
  Or                   --> R16
    03E1A 2700      CLR	R16
    03E1B 2711      CLR	R17
(0981)   unsigned int Len;
(0982)   Len=R_count-6;
    03E1C 9120 038B LDS	R18,R_count
    03E1E 2733      CLR	R19
    03E1F 5026      SUBI	R18,6
    03E20 4030      SBCI	R19,0
(0983)   R_count=1;
    03E21 E081      LDI	R24,1
    03E22 9380 038B STS	R_count,R24
    03E24 C011      RJMP	0x3E36
(0984)   while(R_count<Len) Or+=R_buf[R_count++];
    03E25 9020 038B LDS	R2,R_count
    03E27 2433      CLR	R3
    03E28 2D82      MOV	R24,R2
    03E29 5F8F      SUBI	R24,0xFF
    03E2A 9380 038B STS	R_count,R24
    03E2C E383      LDI	R24,0x33
    03E2D E091      LDI	R25,1
    03E2E 2DE2      MOV	R30,R2
    03E2F 27FF      CLR	R31
    03E30 0FE8      ADD	R30,R24
    03E31 1FF9      ADC	R31,R25
    03E32 8020      LD	R2,Z
    03E33 2433      CLR	R3
    03E34 0D02      ADD	R16,R2
    03E35 1D13      ADC	R17,R3
    03E36 9020 038B LDS	R2,R_count
    03E38 2433      CLR	R3
    03E39 1622      CP	R2,R18
    03E3A 0633      CPC	R3,R19
    03E3B F348      BCS	0x3E25
(0985)   if((R_buf[R_count]==(Or>>8))&&(R_buf[R_count+1]==(Or&0x00ff))) return 1;
    03E3C 2C62      MOV	R6,R2
    03E3D E383      LDI	R24,0x33
    03E3E E091      LDI	R25,1
    03E3F 2DE2      MOV	R30,R2
    03E40 27FF      CLR	R31
    03E41 0FE8      ADD	R30,R24
    03E42 1FF9      ADC	R31,R25
    03E43 8020      LD	R2,Z
    03E44 2433      CLR	R3
    03E45 0128      MOVW	R4,R16
    03E46 2C45      MOV	R4,R5
    03E47 2455      CLR	R5
    03E48 1424      CP	R2,R4
    03E49 0435      CPC	R3,R5
    03E4A F479      BNE	0x3E5A
    03E4B E384      LDI	R24,0x34
    03E4C E091      LDI	R25,1
    03E4D 2DE6      MOV	R30,R6
    03E4E 27FF      CLR	R31
    03E4F 0FE8      ADD	R30,R24
    03E50 1FF9      ADC	R31,R25
    03E51 8020      LD	R2,Z
    03E52 2433      CLR	R3
    03E53 01C8      MOVW	R24,R16
    03E54 7090      ANDI	R25,0
    03E55 1628      CP	R2,R24
    03E56 0639      CPC	R3,R25
    03E57 F411      BNE	0x3E5A
    03E58 E001      LDI	R16,1
    03E59 C001      RJMP	0x3E5B
(0986)   else return 0;
    03E5A 2700      CLR	R16
    03E5B 9508      RET
(0987) }
(0988) void GetCheckingOr(void)
(0989) {
(0990)   unsigned int Or=0;
_GetCheckingOr:
  Len                  --> R18
  Or                   --> R16
    03E5C 2700      CLR	R16
    03E5D 2711      CLR	R17
(0991)   unsigned int Len;
(0992)   Len=T_count-4;
    03E5E 9120 0391 LDS	R18,T_count
    03E60 2733      CLR	R19
    03E61 5024      SUBI	R18,4
    03E62 4030      SBCI	R19,0
(0993)   T_count=1;
    03E63 E081      LDI	R24,1
    03E64 9380 0391 STS	T_count,R24
    03E66 C011      RJMP	0x3E78
(0994)   while(T_count<Len) Or+=T_buf[T_count++];
    03E67 9020 0391 LDS	R2,T_count
    03E69 2433      CLR	R3
    03E6A 2D82      MOV	R24,R2
    03E6B 5F8F      SUBI	R24,0xFF
    03E6C 9380 0391 STS	T_count,R24
    03E6E E981      LDI	R24,0x91
    03E6F E092      LDI	R25,2
    03E70 2DE2      MOV	R30,R2
    03E71 27FF      CLR	R31
    03E72 0FE8      ADD	R30,R24
    03E73 1FF9      ADC	R31,R25
    03E74 8020      LD	R2,Z
    03E75 2433      CLR	R3
    03E76 0D02      ADD	R16,R2
    03E77 1D13      ADC	R17,R3
    03E78 9020 0391 LDS	R2,T_count
    03E7A 2433      CLR	R3
    03E7B 1622      CP	R2,R18
    03E7C 0633      CPC	R3,R19
    03E7D F348      BCS	0x3E67
(0995)   T_buf[T_count++]=Or>>8;
    03E7E 2433      CLR	R3
    03E7F 2D82      MOV	R24,R2
    03E80 5F8F      SUBI	R24,0xFF
    03E81 9380 0391 STS	T_count,R24
    03E83 E981      LDI	R24,0x91
    03E84 E092      LDI	R25,2
    03E85 2DE2      MOV	R30,R2
    03E86 27FF      CLR	R31
    03E87 0FE8      ADD	R30,R24
    03E88 1FF9      ADC	R31,R25
    03E89 0118      MOVW	R2,R16
    03E8A 2C23      MOV	R2,R3
    03E8B 2433      CLR	R3
    03E8C 8220      ST	Z,R2
(0996)   T_buf[T_count++]=Or;
    03E8D 9120 0391 LDS	R18,T_count
    03E8F 2733      CLR	R19
    03E90 2F82      MOV	R24,R18
    03E91 5F8F      SUBI	R24,0xFF
    03E92 9380 0391 STS	T_count,R24
    03E94 E981      LDI	R24,0x91
    03E95 E092      LDI	R25,2
    03E96 2FE2      MOV	R30,R18
    03E97 27FF      CLR	R31
    03E98 0FE8      ADD	R30,R24
    03E99 1FF9      ADC	R31,R25
    03E9A 8300      ST	Z,R16
(0997)   T_buf[T_count++]=0xcc;
    03E9B 9100 0391 LDS	R16,T_count
    03E9D 2711      CLR	R17
    03E9E 2F80      MOV	R24,R16
    03E9F 5F8F      SUBI	R24,0xFF
    03EA0 9380 0391 STS	T_count,R24
    03EA2 E981      LDI	R24,0x91
    03EA3 E092      LDI	R25,2
    03EA4 2FE0      MOV	R30,R16
    03EA5 27FF      CLR	R31
    03EA6 0FE8      ADD	R30,R24
    03EA7 1FF9      ADC	R31,R25
    03EA8 EC8C      LDI	R24,0xCC
    03EA9 8380      ST	Z,R24
(0998)   T_buf[T_count++]=0x33;
    03EAA 9100 0391 LDS	R16,T_count
    03EAC 2711      CLR	R17
    03EAD 2F80      MOV	R24,R16
    03EAE 5F8F      SUBI	R24,0xFF
    03EAF 9380 0391 STS	T_count,R24
    03EB1 E981      LDI	R24,0x91
    03EB2 E092      LDI	R25,2
    03EB3 2FE0      MOV	R30,R16
    03EB4 27FF      CLR	R31
    03EB5 0FE8      ADD	R30,R24
    03EB6 1FF9      ADC	R31,R25
    03EB7 E383      LDI	R24,0x33
    03EB8 8380      ST	Z,R24
(0999)   T_buf[T_count++]=0xc3;
    03EB9 9100 0391 LDS	R16,T_count
    03EBB 2711      CLR	R17
    03EBC 2F80      MOV	R24,R16
    03EBD 5F8F      SUBI	R24,0xFF
    03EBE 9380 0391 STS	T_count,R24
    03EC0 E981      LDI	R24,0x91
    03EC1 E092      LDI	R25,2
    03EC2 2FE0      MOV	R30,R16
    03EC3 27FF      CLR	R31
    03EC4 0FE8      ADD	R30,R24
    03EC5 1FF9      ADC	R31,R25
    03EC6 EC83      LDI	R24,0xC3
    03EC7 8380      ST	Z,R24
(1000)   T_buf[T_count++]=0x3c;
    03EC8 9100 0391 LDS	R16,T_count
    03ECA 2711      CLR	R17
    03ECB 2F80      MOV	R24,R16
    03ECC 5F8F      SUBI	R24,0xFF
    03ECD 9380 0391 STS	T_count,R24
    03ECF E981      LDI	R24,0x91
    03ED0 E092      LDI	R25,2
    03ED1 2FE0      MOV	R30,R16
    03ED2 27FF      CLR	R31
    03ED3 0FE8      ADD	R30,R24
    03ED4 1FF9      ADC	R31,R25
    03ED5 E38C      LDI	R24,0x3C
    03ED6 8380      ST	Z,R24
    03ED7 9508      RET
(1001) }
(1002) void ShakeHands(void)
(1003) {
(1004)  while(T_count>0);
_ShakeHands:
    03ED8 E080      LDI	R24,0
    03ED9 9020 0391 LDS	R2,T_count
    03EDB 1582      CP	R24,R2
    03EDC F3D8      BCS	0x3ED8
(1005)  T_buf[0]=0x5a;
    03EDD E58A      LDI	R24,0x5A
    03EDE 9380 0291 STS	T_buf,R24
(1006)  T_buf[1]=0xa5;
    03EE0 EA85      LDI	R24,0xA5
    03EE1 9380 0292 STS	T_buf+1,R24
(1007)  T_buf[2]=0x05;
    03EE3 E085      LDI	R24,5
    03EE4 9380 0293 STS	T_buf+2,R24
(1008)  T_buf[3]=0x82;
    03EE6 E882      LDI	R24,0x82
    03EE7 9380 0294 STS	T_buf+3,R24
(1009)  T_buf[4]=0x10;
    03EE9 E180      LDI	R24,0x10
    03EEA 9380 0295 STS	T_buf+4,R24
(1010)  T_buf[5]=0x00;
    03EEC 2422      CLR	R2
    03EED 9220 0296 STS	T_buf+5,R2
(1011)  T_buf[6]=0x00;
    03EEF 9220 0297 STS	T_buf+6,R2
(1012)  T_buf[7]=0x03;
    03EF1 E083      LDI	R24,3
    03EF2 9380 0298 STS	T_buf+7,R24
(1013)  T_count=8;
    03EF4 E088      LDI	R24,0x8
    03EF5 9380 0391 STS	T_count,R24
(1014)  if(R_Check==1) GetCheckingOr();
    03EF7 9180 038D LDS	R24,R_Check
    03EF9 3081      CPI	R24,1
    03EFA F409      BNE	0x3EFC
    03EFB DF60      RCALL	_GetCheckingOr
(1015)  T_ptr=1;
    03EFC E081      LDI	R24,1
    03EFD 9380 0390 STS	T_ptr,R24
(1016)  UDR0=T_buf[0];
    03EFF 9020 0291 LDS	R2,T_buf
    03F01 B82C      OUT	0x0C,R2
    03F02 9508      RET
(1017) }
(1018) void set_color(unsigned int ForegColor,unsigned int BackColor)
(1019) {
_set_color:
  BackColor            --> Y,+2
  ForegColor           --> Y,+0
    03F03 9508      RET
(1020)   /*
(1021)  while(T_count>0);
(1022)  T_buf[0]=0xaa;
(1023)  T_buf[1]=0x40;
(1024)  T_buf[2]=ForegColor>>8;
(1025)  T_buf[3]=ForegColor;
(1026)  T_buf[4]=BackColor>>8;
(1027)  T_buf[5]=BackColor;
(1028)  T_buf[6]=0xcc;
(1029)  T_buf[7]=0x33;
(1030)  T_buf[8]=0xc3;
(1031)  T_buf[9]=0x3c;
(1032)  T_count=10;
(1033)  if(R_Check==1) GetCheckingOr();
(1034)  T_ptr=1;
(1035)  //while((PIND&0x10)==0);
(1036)  UDR0=T_buf[0];
(1037)  */
(1038) }
(1039) void set_text_xy(unsigned char dx,unsigned char dy)
(1040) {
_set_text_xy:
  dy                   --> Y,+2
  dx                   --> Y,+0
    03F04 9508      RET
(1041)   /*
(1042)  while(T_count>0);
(1043)  T_buf[0]=0xaa;
(1044)  T_buf[1]=0x41;
(1045)  T_buf[2]=dx;
(1046)  T_buf[3]=dy;
(1047)  T_buf[4]=0xcc;
(1048)  T_buf[5]=0x33;
(1049)  T_buf[6]=0xc3;
(1050)  T_buf[7]=0x3c;
(1051)  T_count=8;
(1052)  if(R_Check==1) GetCheckingOr();
(1053)  T_ptr=1;
(1054)  //while((PIND&0x10)==0);
(1055)  UDR0=T_buf[0];
(1056)  */
(1057) }
(1058) void get_color(unsigned char FB,unsigned int x,unsigned int y)
(1059) {
_get_color:
  y                    --> Y,+4
  x                    --> Y,+2
  FB                   --> Y,+0
    03F05 9508      RET
(1060)   /*
(1061)  while(T_count>0);
(1062)  T_buf[0]=0xaa;
(1063)  T_buf[1]=0x42+FB;
(1064)  T_buf[2]=x>>8;
(1065)  T_buf[3]=x;
(1066)  T_buf[4]=y>>8;
(1067)  T_buf[5]=y;
(1068)  T_buf[6]=0xcc;
(1069)  T_buf[7]=0x33;
(1070)  T_buf[8]=0xc3;
(1071)  T_buf[9]=0x3c;
(1072)  T_count=10;
(1073)  if(R_Check==1) GetCheckingOr();
(1074)  T_ptr=1;
(1075)  //while((PIND&0x10)==0);
(1076)  UDR0=T_buf[0];
(1077)  */
(1078) }
(1079) 
(1080) void cursor(unsigned char EN,unsigned int x,unsigned int y,unsigned char w,unsigned char h)
(1081) {
_cursor:
  h                    --> Y,+8
  w                    --> Y,+6
  y                    --> Y,+4
  x                    --> Y,+2
  EN                   --> Y,+0
    03F06 9508      RET
(1082)   /*
(1083)  while(T_count>0);
(1084)  T_buf[0]=0xaa;
(1085)  T_buf[1]=0x44;
(1086)  T_buf[2]=EN;
(1087)  T_buf[3]=x>>8;
(1088)  T_buf[4]=x;
(1089)  T_buf[5]=y>>8;
(1090)  T_buf[6]=y;
(1091)  T_buf[7]=w;
(1092)  T_buf[8]=h;
(1093)  T_buf[9]=0xcc;
(1094)  T_buf[10]=0x33;
(1095)  T_buf[11]=0xc3;
(1096)  T_buf[12]=0x3c;
(1097)  T_count=13;
(1098)  if(R_Check==1) GetCheckingOr();
(1099)  T_ptr=1;
(1100)  //while((PIND&0x10)==0);
(1101)  UDR0=T_buf[0];
(1102)  */
(1103) }
(1104) void print_text(unsigned char lib,unsigned int x,unsigned int y,unsigned char *text)
(1105) {
_print_text:
  text                 --> Y,+6
  y                    --> Y,+4
  x                    --> Y,+2
  lib                  --> Y,+0
    03F07 9508      RET
(1106)   /*
(1107)  unsigned char len=6;
(1108)  while(T_count>0);
(1109)  T_buf[0]=0xaa;
(1110)  T_buf[1]=0x53+lib;//lib=0-2
(1111)  T_buf[2]=x>>8;
(1112)  T_buf[3]=x;
(1113)  T_buf[4]=y>>8;
(1114)  T_buf[5]=y;
(1115)  while (*text !='\0')
(1116)  {
(1117)   T_buf[len]=*text;
(1118)   text++;
(1119)   len++;
(1120)  }
(1121)  T_buf[len++]=0xcc;
(1122)  T_buf[len++]=0x33;
(1123)  T_buf[len++]=0xc3;
(1124)  T_buf[len++]=0x3c;
(1125)  T_count=len;
(1126)  if(R_Check==1) GetCheckingOr();
(1127)  T_ptr=1;
(1128)  //while((PIND&0x10)==0);
(1129)  UDR0=T_buf[0];
(1130)  */
(1131) }
(1132) void print_texts(unsigned int x,unsigned int y,unsigned char lib,unsigned char mode,unsigned char dots,unsigned int Fcolor,unsigned int Bcolor,unsigned char *text)
(1133) {
_print_texts:
  text                 --> Y,+14
  Bcolor               --> Y,+12
  Fcolor               --> Y,+10
  dots                 --> Y,+8
  mode                 --> Y,+6
  lib                  --> Y,+4
  y                    --> Y,+2
  x                    --> Y,+0
    03F08 9508      RET
(1134)   /*
(1135)  unsigned char len=13;
(1136)  while(T_count>0);
(1137)  T_buf[0]=0xaa;
(1138)  T_buf[1]=0x98;  
(1139)  T_buf[2]=x>>8;
(1140)  T_buf[3]=x;
(1141)  T_buf[4]=y>>8;
(1142)  T_buf[5]=y;
(1143)  T_buf[6]=lib;  //0x00-0x3b
(1144)  T_buf[7]=mode; //.7前景,.6背景,.5纵显,.4自动间距，.3-.1=1-4
(1145)  T_buf[8]=dots; //0x00-0x1E
(1146)  T_buf[9]=Fcolor>>8;
(1147)  T_buf[10]=Fcolor;
(1148)  T_buf[11]=Bcolor>>8;
(1149)  T_buf[12]=Bcolor;
(1150)  while (*text !='\0')
(1151)  {
(1152)   T_buf[len]=*text;
(1153)   text++;
(1154)   len++;
(1155)  }
(1156)  T_buf[len++]=0xcc;
(1157)  T_buf[len++]=0x33;
(1158)  T_buf[len++]=0xc3;
(1159)  T_buf[len++]=0x3c;
(1160)  T_count=len;
(1161)  if(R_Check==1) GetCheckingOr();
(1162)  T_ptr=1;
(1163)  //while((PIND&0x10)==0);
(1164)  UDR0=T_buf[0];
(1165)  */
(1166) }
(1167) void print_consttexts(unsigned int x,unsigned int y,unsigned char lib,unsigned char mode,unsigned char dots,unsigned int Fcolor,unsigned int Bcolor,const unsigned char *text)
(1168) {
_print_consttexts:
  text                 --> Y,+14
  Bcolor               --> Y,+12
  Fcolor               --> Y,+10
  dots                 --> Y,+8
  mode                 --> Y,+6
  lib                  --> Y,+4
  y                    --> Y,+2
  x                    --> Y,+0
    03F09 9508      RET
(1169)   /*
(1170)  unsigned char len=13;
(1171)  while(T_count>0);
(1172)  T_buf[0]=0xaa;
(1173)  T_buf[1]=0x98;  
(1174)  T_buf[2]=x>>8;
(1175)  T_buf[3]=x;
(1176)  T_buf[4]=y>>8;
(1177)  T_buf[5]=y;
(1178)  T_buf[6]=lib;  //0x00-0x3b
(1179)  T_buf[7]=mode; //.7前景,.6背景,.5纵显,.4自动间距，.3-.1=1-4
(1180)  T_buf[8]=dots; //0x00-0x1E
(1181)  T_buf[9]=Fcolor>>8;
(1182)  T_buf[10]=Fcolor;
(1183)  T_buf[11]=Bcolor>>8;
(1184)  T_buf[12]=Bcolor;
(1185)  while (*text !='\0')
(1186)  {
(1187)   T_buf[len]=*text;
(1188)   text++;
(1189)   len++;
(1190)  }
(1191)  T_buf[len++]=0xcc;
(1192)  T_buf[len++]=0x33;
(1193)  T_buf[len++]=0xc3;
(1194)  T_buf[len++]=0x3c;
(1195)  T_count=len;
(1196)  if(R_Check==1) GetCheckingOr();
(1197)  T_ptr=1;
(1198)  //while((PIND&0x10)==0);
(1199)  UDR0=T_buf[0];
(1200)  */
(1201) }
(1202) void textsize_enable(unsigned int Xs,unsigned int Ys,unsigned int Xe,unsigned int Ye)
(1203) {
_textsize_enable:
  Ye                   --> Y,+6
  Xe                   --> Y,+4
  Ys                   --> Y,+2
  Xs                   --> Y,+0
    03F0A 9508      RET
(1204)   /*
(1205)  while(T_count>0);
(1206)  T_buf[0]=0xaa;
(1207)  T_buf[1]=0x45;
(1208)  T_buf[2]=Xs>>8;
(1209)  T_buf[3]=Xs;
(1210)  T_buf[4]=Ys>>8;
(1211)  T_buf[5]=Ys;
(1212)  T_buf[6]=Xe>>8;
(1213)  T_buf[7]=Xe;
(1214)  T_buf[8]=Ye>>8;
(1215)  T_buf[9]=Ye;
(1216)  T_buf[10]=0xcc;
(1217)  T_buf[11]=0x33;
(1218)  T_buf[12]=0xc3;
(1219)  T_buf[13]=0x3c;
(1220)  T_count=14;
(1221)  if(R_Check==1) GetCheckingOr();
(1222)  T_ptr=1;
(1223)  //while((PIND&0x10)==0);
(1224)  UDR0=T_buf[0];
(1225)  */
(1226) }
(1227) void textsize_disable(void)
(1228) {
_textsize_disable:
    03F0B 9508      RET
(1229)   /*
(1230)  while(T_count>0);
(1231)  T_buf[0]=0xaa;
(1232)  T_buf[1]=0x45;
(1233)  T_buf[2]=0;
(1234)  T_buf[3]=0xcc;
(1235)  T_buf[4]=0x33;
(1236)  T_buf[5]=0xc3;
(1237)  T_buf[6]=0x3c;
(1238)  T_count=7;
(1239)  if(R_Check==1) GetCheckingOr();
(1240)  T_ptr=1;
(1241)  //while((PIND&0x10)==0);
(1242)  UDR0=T_buf[0];
(1243)  */
(1244) }
(1245) void Painting_dot(unsigned char CMD,unsigned int x,unsigned int y)
(1246) {
_Painting_dot:
  y                    --> Y,+4
  x                    --> Y,+2
  CMD                  --> Y,+0
    03F0C 9508      RET
(1247)   /*
(1248)  while(T_count>0);
(1249)  T_buf[0]=0xaa;
(1250)  T_buf[1]=0x50+CMD;
(1251)  T_buf[2]=x>>8;
(1252)  T_buf[3]=x;
(1253)  T_buf[4]=y>>8;
(1254)  T_buf[5]=y;
(1255)  T_buf[6]=0xcc;
(1256)  T_buf[7]=0x33;
(1257)  T_buf[8]=0xc3;
(1258)  T_buf[9]=0x3c;
(1259)  T_count=10;
(1260)  if(R_Check==1) GetCheckingOr();
(1261)  T_ptr=1;
(1262)  //while((PIND&0x10)==0);
(1263)  UDR0=T_buf[0];
(1264)  */
(1265) }
(1266) void Painting_dots(unsigned char CMD,unsigned char argc,unsigned int *argv,unsigned int x,unsigned int y)
(1267) {
_Painting_dots:
  y                    --> Y,+8
  x                    --> Y,+6
  argv                 --> Y,+4
  argc                 --> Y,+2
  CMD                  --> Y,+0
    03F0D 9508      RET
(1268)   /*
(1269)  unsigned char i,j=2;
(1270)  while(T_count>0);
(1271)  T_buf[0]=0xaa;
(1272)  T_buf[1]=0x50+CMD;
(1273)  for(i=0;i<argc;i++)
(1274)  {
(1275)   T_buf[j++]=*argv>>8;
(1276)   T_buf[j++]=*argv;
(1277)   argv++;
(1278)   T_buf[j++]=*argv>>8;
(1279)   T_buf[j++]=*argv;
(1280)   argv++;
(1281)  }
(1282)  T_buf[j++]=x>>8;
(1283)  T_buf[j++]=x;
(1284)  T_buf[j++]=y>>8;
(1285)  T_buf[j++]=y;
(1286)  T_buf[j++]=0xcc;
(1287)  T_buf[j++]=0x33;
(1288)  T_buf[j++]=0xc3;
(1289)  T_buf[j++]=0x3c;
(1290)  T_count=j;
(1291)  if(R_Check==1) GetCheckingOr();
(1292)  T_ptr=1;
(1293)  //while((PIND&0x10)==0);
(1294)  UDR0=T_buf[0];
(1295)  */
(1296) }
(1297) void Painting_line(unsigned char CMD,unsigned int Xs,unsigned int Ys,unsigned int Xe,unsigned int Ye)
(1298) {
_Painting_line:
  Ye                   --> Y,+8
  Xe                   --> Y,+6
  Ys                   --> Y,+4
  Xs                   --> Y,+2
  CMD                  --> Y,+0
    03F0E 9508      RET
(1299)   /*
(1300)  while(T_count>0);
(1301)  T_buf[0]=0xaa;
(1302)  T_buf[1]=0x5D-CMD*7;
(1303)  T_buf[2]=Xs>>8;
(1304)  T_buf[3]=Xs;
(1305)  T_buf[4]=Ys>>8;
(1306)  T_buf[5]=Ys;
(1307)  T_buf[6]=Xe>>8;
(1308)  T_buf[7]=Xe;
(1309)  T_buf[8]=Ye>>8;
(1310)  T_buf[9]=Ye;
(1311)  T_buf[10]=0xcc;
(1312)  T_buf[11]=0x33;
(1313)  T_buf[12]=0xc3;
(1314)  T_buf[13]=0x3c;
(1315)  T_count=14;
(1316)  if(R_Check==1) GetCheckingOr();
(1317)  T_ptr=1;
(1318)  //while((PIND&0x10)==0);
(1319)  UDR0=T_buf[0];
(1320)  */
(1321) }
(1322) void Set_screen(void)
(1323) {
_Set_screen:
    03F0F 9508      RET
(1324)   /*
(1325)  while(T_count>0);
(1326)  T_buf[0]=0xaa;
(1327)  T_buf[1]=0xe3;
(1328)  T_buf[2]=0x55;
(1329)  T_buf[3]=0xaa;
(1330)  T_buf[4]=0x5a;
(1331)  T_buf[5]=0xa5;
(1332)  T_buf[6]=0x03;
(1333)  T_buf[7]=0x05;
(1334)  T_buf[8]=0x08;
(1335)  T_buf[9]=0xff;
(1336)  T_buf[10]=0xcc;
(1337)  T_buf[11]=0x33;
(1338)  T_buf[12]=0xc3;
(1339)  T_buf[13]=0x3c;
(1340)  T_count=14;
(1341)  if(R_Check==1) GetCheckingOr();
(1342)  T_ptr=1;
(1343)  //while((PIND&0x10)==0);
(1344)  UDR0=T_buf[0];
(1345)  */
(1346) }
(1347) void clear_screen(void)
(1348) {
_clear_screen:
    03F10 9508      RET
(1349)   /*
(1350)  while(T_count>0);
(1351)  T_buf[0]=0xaa;
(1352)  T_buf[1]=0x52;
(1353)  T_buf[2]=0xcc;
(1354)  T_buf[3]=0x33;
(1355)  T_buf[4]=0xc3;
(1356)  T_buf[5]=0x3c;
(1357)  T_count=6;
(1358)  if(R_Check==1) GetCheckingOr();
(1359)  T_ptr=1;
(1360)  //while((PIND&0x10)==0);
(1361)  UDR0=T_buf[0];
(1362)  */
(1363) }
(1364) void Chack_screen(void)
(1365) {
_Chack_screen:
    03F11 9508      RET
(1366)   /*
(1367)  while(T_count>0);
(1368)  T_buf[0]=0xaa;
(1369)  T_buf[1]=0xe4;
(1370)  T_buf[2]=0x55;
(1371)  T_buf[3]=0xaa;
(1372)  T_buf[4]=0x5a;
(1373)  T_buf[5]=0xa5;
(1374)  T_buf[6]=0xcc;
(1375)  T_buf[7]=0x33;
(1376)  T_buf[8]=0xc3;
(1377)  T_buf[9]=0x3c;
(1378)  T_count=10;
(1379)  if(R_Check==1) GetCheckingOr();
(1380)  T_ptr=1;
(1381)  //while((PIND&0x10)==0);
(1382)  UDR0=T_buf[0];
(1383)  */
(1384) }
(1385) void PicRam(unsigned char CMD,unsigned char RAM_POS)
(1386) {
_PicRam:
  RAM_POS              --> Y,+2
  CMD                  --> Y,+0
    03F12 9508      RET
(1387)   /*
(1388)  while(T_count>0);
(1389)  T_buf[0]=0xaa;
(1390)  T_buf[1]=0x73+CMD*0x75; //CMD=0 read ram,1 write ram
(1391)  T_buf[2]=RAM_POS; //0-1
(1392)  T_buf[3]=0xcc;
(1393)  T_buf[4]=0x33;
(1394)  T_buf[5]=0xc3;
(1395)  T_buf[6]=0x3c;
(1396)  T_count=7;
(1397)  if(R_Check==1) GetCheckingOr();
(1398)  T_ptr=1;
(1399)  //while((PIND&0x10)==0);
(1400)  UDR0=T_buf[0];
(1401)  */
(1402) }
(1403) void dis_pic(unsigned char pic_ID)
(1404) {
_dis_pic:
  pic_ID               --> Y,+0
    03F13 9508      RET
(1405)   /*
(1406)  while(T_count>0);
(1407)  T_buf[0]=0xaa;
(1408)  T_buf[1]=0x70;
(1409)  T_buf[2]=pic_ID;
(1410)  T_buf[3]=0xcc;
(1411)  T_buf[4]=0x33;
(1412)  T_buf[5]=0xc3;
(1413)  T_buf[6]=0x3c;
(1414)  T_count=7;
(1415)  if(R_Check==1) GetCheckingOr();
(1416)  T_ptr=1;
(1417)  //while(0==(PIND&0x10));
(1418)  UDR0=T_buf[0];
(1419)  */
(1420) }
(1421) void cut_pic(unsigned char CMD,unsigned char pic_ID,unsigned int Xs,unsigned int Ys,unsigned int Xe,unsigned int Ye,unsigned int X,unsigned int Y)
(1422) {
_cut_pic:
  Y                    --> Y,+14
  X                    --> Y,+12
  Ye                   --> Y,+10
  Xe                   --> Y,+8
  Ys                   --> Y,+6
  Xs                   --> Y,+4
  pic_ID               --> Y,+2
  CMD                  --> Y,+0
    03F14 9508      RET
_buzzer:
  time                 --> R10
    03F15 92AA      ST	-Y,R10
    03F16 2EA0      MOV	R10,R16
(1423)   /*
(1424)  while(T_count>0);
(1425)  T_buf[0]=0xaa;
(1426)  T_buf[1]=0x71+CMD*0x2b;
(1427)  T_buf[2]=pic_ID;
(1428)  T_buf[3]=Xs>>8;
(1429)  T_buf[4]=Xs;
(1430)  T_buf[5]=Ys>>8;
(1431)  T_buf[6]=Ys;
(1432)  T_buf[7]=Xe>>8;
(1433)  T_buf[8]=Xe;
(1434)  T_buf[9]=Ye>>8;
(1435)  T_buf[10]=Ye;
(1436)  T_buf[11]=X>>8;
(1437)  T_buf[12]=X;
(1438)  T_buf[13]=Y>>8;
(1439)  T_buf[14]=Y;
(1440)  T_buf[15]=0xcc;
(1441)  T_buf[16]=0x33;
(1442)  T_buf[17]=0xc3;
(1443)  T_buf[18]=0x3c;
(1444)  T_count=19;
(1445)  if(R_Check==1) GetCheckingOr();
(1446)  T_ptr=1;
(1447) //while((PIND&0x10)==0);
(1448)  UDR0=T_buf[0];
(1449)  */
(1450) }
(1451) void buzzer(unsigned char time)
(1452) {
(1453)  while(T_count>0);
    03F17 E080      LDI	R24,0
    03F18 9020 0391 LDS	R2,T_count
    03F1A 1582      CP	R24,R2
    03F1B F3D8      BCS	0x3F17
(1454)  T_buf[0]=0xaa;
    03F1C EA8A      LDI	R24,0xAA
    03F1D 9380 0291 STS	T_buf,R24
(1455)  T_buf[1]=0x79;
    03F1F E789      LDI	R24,0x79
    03F20 9380 0292 STS	T_buf+1,R24
(1456)  T_buf[2]=time;
    03F22 92A0 0293 STS	T_buf+2,R10
(1457)  T_buf[3]=0xcc;
    03F24 EC8C      LDI	R24,0xCC
    03F25 9380 0294 STS	T_buf+3,R24
(1458)  T_buf[4]=0x33;
    03F27 E383      LDI	R24,0x33
    03F28 9380 0295 STS	T_buf+4,R24
(1459)  T_buf[5]=0xc3;
    03F2A EC83      LDI	R24,0xC3
    03F2B 9380 0296 STS	T_buf+5,R24
(1460)  T_buf[6]=0x3c;
    03F2D E38C      LDI	R24,0x3C
    03F2E 9380 0297 STS	T_buf+6,R24
(1461)  T_count=7;
    03F30 E087      LDI	R24,7
    03F31 9380 0391 STS	T_count,R24
(1462)  if(R_Check==1) GetCheckingOr();
    03F33 9180 038D LDS	R24,R_Check
    03F35 3081      CPI	R24,1
    03F36 F409      BNE	0x3F38
    03F37 DF24      RCALL	_GetCheckingOr
(1463)  T_ptr=1;
    03F38 E081      LDI	R24,1
    03F39 9380 0390 STS	T_ptr,R24
(1464)  //while((PIND&0x10)==0);
(1465)  UDR0=T_buf[0];
    03F3B 9020 0291 LDS	R2,T_buf
    03F3D B82C      OUT	0x0C,R2
    03F3E 90A9      LD	R10,Y+
    03F3F 9508      RET
(1466) }
(1467) void clock_off(void)
(1468) {
_clock_off:
    03F40 9508      RET
(1469)   /*
(1470)  while(T_count>0);
(1471)  T_buf[0]=0xaa;
(1472)  T_buf[1]=0x9b;
(1473)  T_buf[2]=0x00;
(1474)  T_buf[3]=0xcc;
(1475)  T_buf[4]=0x33;
(1476)  T_buf[5]=0xc3;
(1477)  T_buf[6]=0x3c;
(1478)  T_count=7;
(1479)  if(R_Check==1) GetCheckingOr();
(1480)  T_ptr=1;
(1481)  //while((PIND&0x10)==0);
(1482)  UDR0=T_buf[0];
(1483)  */
(1484) }
(1485) void get_time(void)
(1486) {
_get_time:
    03F41 9508      RET
(1487)   /*
(1488)  while(T_count>0);
(1489)  T_buf[0]=0xaa;
(1490)  T_buf[1]=0x9b;
(1491)  T_buf[2]=0x5a;
(1492)  T_buf[3]=0xcc;
(1493)  T_buf[4]=0x33;
(1494)  T_buf[5]=0xc3;
(1495)  T_buf[6]=0x3c;
(1496)  T_count=7;
(1497)  if(R_Check==1) GetCheckingOr();
(1498)  T_ptr=1;
(1499)  //while((PIND&0x10)==0);
(1500)  UDR0=T_buf[0];
(1501)  */
(1502) }
(1503) void clock_on(unsigned char RTC_mode,unsigned char Text_mode,unsigned int Color,unsigned int X,unsigned int Y)
(1504) {
_clock_on:
  Y                    --> Y,+8
  X                    --> Y,+6
  Color                --> Y,+4
  Text_mode            --> Y,+2
  RTC_mode             --> Y,+0
    03F42 9508      RET
(1505)   /*
(1506)  while(T_count>0);
(1507)  if(RTC_mode==0) return;
(1508)  T_buf[0]=0xaa;
(1509)  T_buf[1]=0x9b;
(1510)  T_buf[2]=0xff;
(1511)  T_buf[3]=RTC_mode-1;  //0-1
(1512)  T_buf[4]=Text_mode; //0-7
(1513)  T_buf[5]=Color>>8;
(1514)  T_buf[6]=Color;
(1515)  T_buf[7]=X>>8;
(1516)  T_buf[8]=X;
(1517)  T_buf[9]=Y>>8;
(1518)  T_buf[10]=Y;
(1519)  T_buf[11]=0xcc;
(1520)  T_buf[12]=0x33;
(1521)  T_buf[13]=0xc3;
(1522)  T_buf[14]=0x3c;
(1523)  T_count=15;
(1524)  if(R_Check==1) GetCheckingOr();
(1525)  T_ptr=1;
(1526)  //while((PIND&0x10)==0);
(1527)  UDR0=T_buf[0];
(1528)  */
(1529) }
(1530) void clock_set(unsigned char YY,unsigned char MO,unsigned char DD,unsigned char HH,unsigned char MM,unsigned char SS)
(1531) {
_clock_set:
  SS                   --> Y,+10
  MM                   --> Y,+8
  HH                   --> Y,+6
  DD                   --> Y,+4
  MO                   --> Y,+2
  YY                   --> Y,+0
    03F43 9508      RET
(1532)   /*
(1533)  while(T_count>0);
(1534)  T_buf[0]=0xaa;
(1535)  T_buf[1]=0xE7;
(1536)  T_buf[2]=0x55;
(1537)  T_buf[3]=0xAA;
(1538)  T_buf[4]=0x5A;
(1539)  T_buf[5]=0xA5;
(1540)  T_buf[6]=YY;
(1541)  T_buf[7]=MO;
(1542)  T_buf[8]=DD;
(1543)  T_buf[9]=HH;
(1544)  T_buf[10]=MM;
(1545)  T_buf[11]=SS;
(1546)  T_buf[12]=0xcc;
(1547)  T_buf[13]=0x33;
(1548)  T_buf[14]=0xc3;
(1549)  T_buf[15]=0x3c;
(1550)  T_count=16;
(1551)  if(R_Check==1) GetCheckingOr();
(1552)  T_ptr=1;
(1553)  //while((PIND&0x10)==0);
(1554)  UDR0=T_buf[0];
(1555)  */
(1556) }
(1557) void send_pic(unsigned long add,unsigned char len)
(1558) {
_send_pic:
  len                  --> Y,+4
  add                  --> Y,+0
    03F44 9508      RET
(1559)   /*
(1560)  unsigned long i;
(1561)  while(T_count>0);
(1562)  T_buf[0]=0xaa;
(1563)  T_buf[1]=0x72;
(1564)  T_buf[2]=(char)(add/65536);
(1565)  T_buf[3]=(char)(add%65536/256);
(1566)  T_buf[4]=(char)(add%256);
(1567)  for(i=0;i<len/3;i++)
(1568)  {
(1569)   T_buf[i*3+5]=R_buf[i*3+5]; 
(1570)   T_buf[i*3+6]=R_buf[i*3+4]; 
(1571)   T_buf[i*3+7]=R_buf[i*3+3]; 
(1572)  }
(1573)  T_buf[len+5]=0xcc;
(1574)  T_buf[len+6]=0x33;
(1575)  T_buf[len+7]=0xc3;
(1576)  T_buf[len+8]=0x3c;
(1577)  T_count=len+9;
(1578)  if(R_Check==1) GetCheckingOr();
(1579)  T_ptr=1;
(1580)  UDR0=T_buf[0];
(1581)  */
(1582) }
(1583) void save_pic(unsigned char page)
(1584) {
_save_pic:
  page                 --> Y,+0
    03F45 9508      RET
(1585)   /*
(1586)  unsigned long i;
(1587)  while(T_count>0);
(1588)  T_buf[0]=0xaa;
(1589)  T_buf[1]=0xE2;
(1590)  T_buf[2]=page;
(1591)  T_buf[3]=0xcc;
(1592)  T_buf[4]=0x33;
(1593)  T_buf[5]=0xc3;
(1594)  T_buf[6]=0x3c;
(1595)  T_count=7;
(1596)  if(R_Check==1) GetCheckingOr();
(1597)  T_ptr=1;
(1598)  UDR0=T_buf[0];
(1599)  */
(1600) }
(1601) 
(1602) void USB_info(void)
(1603) {
_USB_info:
    03F46 9508      RET
_CMD_GetVer:
  i                    --> Y,+0
    03F47 9724      SBIW	R28,4
(1604)   /*
(1605)   if(R_buf[0]==0x82) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_DISK_DISCON);
(1606)   else if(R_buf[0]==0x00) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_SUCCESS);
(1607)   else if(R_buf[0]==0x83) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_STATUS_ERR);
(1608)   else if(R_buf[0]==0xA3) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_FAT_ERROR);
(1609)   else if(R_buf[0]==0xB1) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_DISK_FULL);
(1610)   else if(R_buf[0]==0xB3) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_MISS_DIR);
(1611)   else if(R_buf[0]==0xB4) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_FILE_CLOSE);
(1612)   else if(R_buf[0]==0x41) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_OPEN_DIR);
(1613)   else if(R_buf[0]==0x42) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_MISS_FILE);
(1614)   else if(R_buf[0]==0x1F) print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_USB_DISK_ERR);
(1615)   else print_consttexts(0,0,0,0xc1,2,0xf800,0xffff,ERR_USB_DISK_ERR);
(1616)   */
(1617) }
(1618) //COM1函数
(1619) void CMD_GetVer(void)//获取版本号
(1620) {
(1621)  unsigned long i;
(1622)  while(T_count>0);
    03F48 E080      LDI	R24,0
    03F49 9020 0391 LDS	R2,T_count
    03F4B 1582      CP	R24,R2
    03F4C F3D8      BCS	0x3F48
(1623)  T_buf[0]=0x3a;
    03F4D E38A      LDI	R24,0x3A
    03F4E 9380 0291 STS	T_buf,R24
(1624)  T_buf[1]=0x0a;
    03F50 E08A      LDI	R24,0xA
    03F51 9380 0292 STS	T_buf+1,R24
(1625)  T_buf[2]=0;
    03F53 2422      CLR	R2
    03F54 9220 0293 STS	T_buf+2,R2
(1626)  T_count=3;
    03F56 E083      LDI	R24,3
    03F57 9380 0391 STS	T_count,R24
(1627)  T_ptr=1;
    03F59 E081      LDI	R24,1
    03F5A 9380 0390 STS	T_ptr,R24
(1628)  UDR1=T_buf[0];
    03F5C 9020 0291 LDS	R2,T_buf
    03F5E 9220 009C STS	0x9C,R2
    03F60 9624      ADIW	R28,4
    03F61 9508      RET
_CMD_DiskReady:
  i                    --> Y,+0
    03F62 9724      SBIW	R28,4
(1629) }
(1630) void CMD_DiskReady(void)//查询硬件
(1631) {
(1632)  unsigned long i;
(1633)  while(T_count>0);
    03F63 E080      LDI	R24,0
    03F64 9020 0391 LDS	R2,T_count
    03F66 1582      CP	R24,R2
    03F67 F3D8      BCS	0x3F63
(1634)  T_buf[0]=0x3a;
    03F68 E38A      LDI	R24,0x3A
    03F69 9380 0291 STS	T_buf,R24
(1635)  T_buf[1]=0x71;
    03F6B E781      LDI	R24,0x71
    03F6C 9380 0292 STS	T_buf+1,R24
(1636)  T_buf[2]=0;
    03F6E 2422      CLR	R2
    03F6F 9220 0293 STS	T_buf+2,R2
(1637)  T_count=3;
    03F71 E083      LDI	R24,3
    03F72 9380 0391 STS	T_count,R24
(1638)  T_ptr=1;
    03F74 E081      LDI	R24,1
    03F75 9380 0390 STS	T_ptr,R24
(1639)  UDR1=T_buf[0];
    03F77 9020 0291 LDS	R2,T_buf
    03F79 9220 009C STS	0x9C,R2
    03F7B 9624      ADIW	R28,4
    03F7C 9508      RET
_CMD_File:
  i                    --> Y,+0
  FileName             --> R18
  cmd                  --> R16
    03F7D 9724      SBIW	R28,4
(1640) }
(1641) void CMD_File(unsigned char cmd,const unsigned char *FileName)//cmd=0打开文件，cmd=1创建文件，cmd=2删除文件，cmd=3关闭文件,文件名："filemame.bmp\0"
(1642) {
(1643)  unsigned long i=0;
    03F7E E080      LDI	R24,0
    03F7F 8388      ST	Y,R24
    03F80 8389      STD	Y+1,R24
    03F81 838A      STD	Y+2,R24
    03F82 838B      STD	Y+3,R24
(1644)  while(T_count>0);
    03F83 E080      LDI	R24,0
    03F84 9020 0391 LDS	R2,T_count
    03F86 1582      CP	R24,R2
    03F87 F3D8      BCS	0x3F83
(1645)  T_buf[0]=0x3a;
    03F88 E38A      LDI	R24,0x3A
    03F89 9380 0291 STS	T_buf,R24
(1646)  T_buf[1]=0x64+cmd;
    03F8B 2F80      MOV	R24,R16
    03F8C 598C      SUBI	R24,0x9C
    03F8D 9380 0292 STS	T_buf+1,R24
(1647)  T_buf[3]='/';  //92
    03F8F E28F      LDI	R24,0x2F
    03F90 9380 0294 STS	T_buf+3,R24
    03F92 C02B      RJMP	0x3FBE
(1648)  while(*FileName !='\0')
(1649)  {
(1650)   T_buf[i+4]=*FileName; 
    03F93 E084      LDI	R24,4
    03F94 E090      LDI	R25,0
    03F95 E0A0      LDI	R26,0
    03F96 E0B0      LDI	R27,0
    03F97 8028      LD	R2,Y
    03F98 8039      LDD	R3,Y+1
    03F99 804A      LDD	R4,Y+2
    03F9A 805B      LDD	R5,Y+3
    03F9B 0E28      ADD	R2,R24
    03F9C 1E39      ADC	R3,R25
    03F9D 1E4A      ADC	R4,R26
    03F9E 1E5B      ADC	R5,R27
    03F9F 01F1      MOVW	R30,R2
    03FA0 E981      LDI	R24,0x91
    03FA1 E092      LDI	R25,2
    03FA2 0FE8      ADD	R30,R24
    03FA3 1FF9      ADC	R31,R25
    03FA4 01D9      MOVW	R26,R18
    03FA5 93FA      ST	-Y,R31
    03FA6 93EA      ST	-Y,R30
    03FA7 01FD      MOVW	R30,R26
    03FA8 9026      ELPM	R2,Z
    03FA9 91E9      LD	R30,Y+
    03FAA 91F9      LD	R31,Y+
    03FAB 8220      ST	Z,R2
(1651)   FileName++;
    03FAC 5F2F      SUBI	R18,0xFF
    03FAD 4F3F      SBCI	R19,0xFF
(1652)   i++;
    03FAE E081      LDI	R24,1
    03FAF E090      LDI	R25,0
    03FB0 E0A0      LDI	R26,0
    03FB1 E0B0      LDI	R27,0
    03FB2 8028      LD	R2,Y
    03FB3 8039      LDD	R3,Y+1
    03FB4 804A      LDD	R4,Y+2
    03FB5 805B      LDD	R5,Y+3
    03FB6 0E28      ADD	R2,R24
    03FB7 1E39      ADC	R3,R25
    03FB8 1E4A      ADC	R4,R26
    03FB9 1E5B      ADC	R5,R27
    03FBA 8228      ST	Y,R2
    03FBB 8239      STD	Y+1,R3
    03FBC 824A      STD	Y+2,R4
    03FBD 825B      STD	Y+3,R5
    03FBE 01F9      MOVW	R30,R18
    03FBF 9026      ELPM	R2,Z
    03FC0 2022      TST	R2
    03FC1 F689      BNE	0x3F93
(1653)  }
(1654)  T_buf[2]=i+1;
    03FC2 E081      LDI	R24,1
    03FC3 E090      LDI	R25,0
    03FC4 E0A0      LDI	R26,0
    03FC5 E0B0      LDI	R27,0
    03FC6 8028      LD	R2,Y
    03FC7 8039      LDD	R3,Y+1
    03FC8 804A      LDD	R4,Y+2
    03FC9 805B      LDD	R5,Y+3
    03FCA 0E28      ADD	R2,R24
    03FCB 1E39      ADC	R3,R25
    03FCC 1E4A      ADC	R4,R26
    03FCD 1E5B      ADC	R5,R27
    03FCE 9220 0293 STS	T_buf+2,R2
(1655)  T_count=i+4;
    03FD0 E084      LDI	R24,4
    03FD1 E090      LDI	R25,0
    03FD2 E0A0      LDI	R26,0
    03FD3 E0B0      LDI	R27,0
    03FD4 8028      LD	R2,Y
    03FD5 8039      LDD	R3,Y+1
    03FD6 804A      LDD	R4,Y+2
    03FD7 805B      LDD	R5,Y+3
    03FD8 0E28      ADD	R2,R24
    03FD9 1E39      ADC	R3,R25
    03FDA 1E4A      ADC	R4,R26
    03FDB 1E5B      ADC	R5,R27
    03FDC 9220 0391 STS	T_count,R2
(1656)  T_ptr=1; 
    03FDE E081      LDI	R24,1
    03FDF 9380 0390 STS	T_ptr,R24
(1657)  UDR1=T_buf[0];
    03FE1 9020 0291 LDS	R2,T_buf
    03FE3 9220 009C STS	0x9C,R2
    03FE5 9624      ADIW	R28,4
    03FE6 9508      RET
_CMD_ByteLocate:
  i                    --> Y,+0
  Locate               --> Y,+4
    03FE7 940E 43E4 CALL	push_arg4
    03FE9 9724      SBIW	R28,4
(1658) }
(1659) void CMD_ByteLocate(unsigned long Locate)//字节偏移
(1660) {
(1661)  unsigned long i;
(1662)  while(T_count>0);
    03FEA E080      LDI	R24,0
    03FEB 9020 0391 LDS	R2,T_count
    03FED 1582      CP	R24,R2
    03FEE F3D8      BCS	0x3FEA
(1663)  T_buf[0]=0x3a;
    03FEF E38A      LDI	R24,0x3A
    03FF0 9380 0291 STS	T_buf,R24
(1664)  T_buf[1]=0x7A;
    03FF2 E78A      LDI	R24,0x7A
    03FF3 9380 0292 STS	T_buf+1,R24
(1665)  T_buf[2]=4;
    03FF5 E084      LDI	R24,4
    03FF6 9380 0293 STS	T_buf+2,R24
(1666)  T_buf[3]=(char)(Locate/0x1000000);
    03FF8 E188      LDI	R24,0x18
    03FF9 E090      LDI	R25,0
    03FFA 810C      LDD	R16,Y+4
    03FFB 811D      LDD	R17,Y+5
    03FFC 812E      LDD	R18,Y+6
    03FFD 813F      LDD	R19,Y+7
    03FFE 938A      ST	-Y,R24
    03FFF 940E 458E CALL	lsr32
    04001 9300 0294 STS	T_buf+3,R16
(1667)  T_buf[4]=(char)(Locate%0x1000000/0x10000);
    04003 EF8F      LDI	R24,0xFF
    04004 EF9F      LDI	R25,0xFF
    04005 EFAF      LDI	R26,0xFF
    04006 E0B0      LDI	R27,0
    04007 802C      LDD	R2,Y+4
    04008 803D      LDD	R3,Y+5
    04009 804E      LDD	R4,Y+6
    0400A 805F      LDD	R5,Y+7
    0400B 2228      AND	R2,R24
    0400C 2239      AND	R3,R25
    0400D 224A      AND	R4,R26
    0400E 225B      AND	R5,R27
    0400F 0112      MOVW	R2,R4
    04010 2444      CLR	R4
    04011 2455      CLR	R5
    04012 9220 0295 STS	T_buf+4,R2
(1668)  T_buf[5]=(char)(Locate%0x10000/0x100);
    04014 EF8F      LDI	R24,0xFF
    04015 EF9F      LDI	R25,0xFF
    04016 E0A0      LDI	R26,0
    04017 E0B0      LDI	R27,0
    04018 810C      LDD	R16,Y+4
    04019 811D      LDD	R17,Y+5
    0401A 812E      LDD	R18,Y+6
    0401B 813F      LDD	R19,Y+7
    0401C 2308      AND	R16,R24
    0401D 2319      AND	R17,R25
    0401E 232A      AND	R18,R26
    0401F 233B      AND	R19,R27
    04020 E088      LDI	R24,0x8
    04021 E090      LDI	R25,0
    04022 938A      ST	-Y,R24
    04023 940E 458E CALL	lsr32
    04025 9300 0296 STS	T_buf+5,R16
(1669)  T_buf[6]=(char)(Locate%0x100);
    04027 EF8F      LDI	R24,0xFF
    04028 E090      LDI	R25,0
    04029 E0A0      LDI	R26,0
    0402A E0B0      LDI	R27,0
    0402B 802C      LDD	R2,Y+4
    0402C 803D      LDD	R3,Y+5
    0402D 804E      LDD	R4,Y+6
    0402E 805F      LDD	R5,Y+7
    0402F 2228      AND	R2,R24
    04030 2239      AND	R3,R25
    04031 224A      AND	R4,R26
    04032 225B      AND	R5,R27
    04033 9220 0297 STS	T_buf+6,R2
(1670)  T_count=7;
    04035 E087      LDI	R24,7
    04036 9380 0391 STS	T_count,R24
(1671)  T_ptr=1;
    04038 E081      LDI	R24,1
    04039 9380 0390 STS	T_ptr,R24
(1672)  UDR1=T_buf[0];
    0403B 9020 0291 LDS	R2,T_buf
    0403D 9220 009C STS	0x9C,R2
    0403F 9628      ADIW	R28,0x8
    04040 9508      RET
_CMD_ByteRead:
  i                    --> Y,+0
  Len                  --> R16
    04041 9724      SBIW	R28,4
(1673) }
(1674) void CMD_ByteRead(unsigned char Len)//读取若干字节
(1675) {
(1676)  unsigned long i;
(1677)  while(T_count>0);
    04042 E080      LDI	R24,0
    04043 9020 0391 LDS	R2,T_count
    04045 1582      CP	R24,R2
    04046 F3D8      BCS	0x4042
(1678)  T_buf[0]=0x3a;
    04047 E38A      LDI	R24,0x3A
    04048 9380 0291 STS	T_buf,R24
(1679)  T_buf[1]=0x7b;
    0404A E78B      LDI	R24,0x7B
    0404B 9380 0292 STS	T_buf+1,R24
(1680)  T_buf[2]=1;
    0404D E081      LDI	R24,1
    0404E 9380 0293 STS	T_buf+2,R24
(1681)  T_buf[3]=Len;
    04050 9300 0294 STS	T_buf+3,R16
(1682)  T_count=4;
    04052 E084      LDI	R24,4
    04053 9380 0391 STS	T_count,R24
(1683)  T_ptr=1;
    04055 E081      LDI	R24,1
    04056 9380 0390 STS	T_ptr,R24
(1684)  UDR1=T_buf[0];
    04058 9020 0291 LDS	R2,T_buf
    0405A 9220 009C STS	0x9C,R2
    0405C 9624      ADIW	R28,4
    0405D 9508      RET
_CMD_ByteWrite:
  i                    --> Y,+0
  Text                 --> R16
    0405E 9724      SBIW	R28,4
(1685) }
(1686) void CMD_ByteWrite(const unsigned char *Text)//写入若干字节
(1687) {
(1688)  unsigned long i=0;
    0405F E080      LDI	R24,0
    04060 8388      ST	Y,R24
    04061 8389      STD	Y+1,R24
    04062 838A      STD	Y+2,R24
    04063 838B      STD	Y+3,R24
(1689)  while(T_count>0);
    04064 E080      LDI	R24,0
    04065 9020 0391 LDS	R2,T_count
    04067 1582      CP	R24,R2
    04068 F3D8      BCS	0x4064
(1690)  T_buf[0]=0x3a;
    04069 E38A      LDI	R24,0x3A
    0406A 9380 0291 STS	T_buf,R24
(1691)  T_buf[1]=0x7c;
    0406C E78C      LDI	R24,0x7C
    0406D 9380 0292 STS	T_buf+1,R24
    0406F C02B      RJMP	0x409B
(1692)  while(*Text !='\0')
(1693)  {
(1694)   T_buf[i+3]=*Text; 
    04070 E083      LDI	R24,3
    04071 E090      LDI	R25,0
    04072 E0A0      LDI	R26,0
    04073 E0B0      LDI	R27,0
    04074 8028      LD	R2,Y
    04075 8039      LDD	R3,Y+1
    04076 804A      LDD	R4,Y+2
    04077 805B      LDD	R5,Y+3
    04078 0E28      ADD	R2,R24
    04079 1E39      ADC	R3,R25
    0407A 1E4A      ADC	R4,R26
    0407B 1E5B      ADC	R5,R27
    0407C 01F1      MOVW	R30,R2
    0407D E981      LDI	R24,0x91
    0407E E092      LDI	R25,2
    0407F 0FE8      ADD	R30,R24
    04080 1FF9      ADC	R31,R25
    04081 01D8      MOVW	R26,R16
    04082 93FA      ST	-Y,R31
    04083 93EA      ST	-Y,R30
    04084 01FD      MOVW	R30,R26
    04085 9026      ELPM	R2,Z
    04086 91E9      LD	R30,Y+
    04087 91F9      LD	R31,Y+
    04088 8220      ST	Z,R2
(1695)   Text++;
    04089 5F0F      SUBI	R16,0xFF
    0408A 4F1F      SBCI	R17,0xFF
(1696)   i++;
    0408B E081      LDI	R24,1
    0408C E090      LDI	R25,0
    0408D E0A0      LDI	R26,0
    0408E E0B0      LDI	R27,0
    0408F 8028      LD	R2,Y
    04090 8039      LDD	R3,Y+1
    04091 804A      LDD	R4,Y+2
    04092 805B      LDD	R5,Y+3
    04093 0E28      ADD	R2,R24
    04094 1E39      ADC	R3,R25
    04095 1E4A      ADC	R4,R26
    04096 1E5B      ADC	R5,R27
    04097 8228      ST	Y,R2
    04098 8239      STD	Y+1,R3
    04099 824A      STD	Y+2,R4
    0409A 825B      STD	Y+3,R5
    0409B 01F8      MOVW	R30,R16
    0409C 9026      ELPM	R2,Z
    0409D 2022      TST	R2
    0409E F689      BNE	0x4070
(1697)  }
(1698)  T_buf[2]=i;
    0409F 8028      LD	R2,Y
    040A0 8039      LDD	R3,Y+1
    040A1 804A      LDD	R4,Y+2
    040A2 805B      LDD	R5,Y+3
    040A3 9220 0293 STS	T_buf+2,R2
(1699)  T_count=i+3;
    040A5 E083      LDI	R24,3
    040A6 E090      LDI	R25,0
    040A7 E0A0      LDI	R26,0
    040A8 E0B0      LDI	R27,0
    040A9 0E28      ADD	R2,R24
    040AA 1E39      ADC	R3,R25
    040AB 1E4A      ADC	R4,R26
    040AC 1E5B      ADC	R5,R27
    040AD 9220 0391 STS	T_count,R2
(1700)  T_ptr=1;
    040AF E081      LDI	R24,1
    040B0 9380 0390 STS	T_ptr,R24
(1701)  UDR1=T_buf[0];
    040B2 9020 0291 LDS	R2,T_buf
    040B4 9220 009C STS	0x9C,R2
    040B6 9624      ADIW	R28,4
    040B7 9508      RET
_CMD_RESET:
  i                    --> Y,+0
    040B8 9724      SBIW	R28,4
(1702) }
(1703) void CMD_RESET(void)//复位
(1704) {
(1705)  unsigned long i;
(1706)  while(T_count>0);
    040B9 E080      LDI	R24,0
    040BA 9020 0391 LDS	R2,T_count
    040BC 1582      CP	R24,R2
    040BD F3D8      BCS	0x40B9
(1707)  T_buf[0]=0x3a;
    040BE E38A      LDI	R24,0x3A
    040BF 9380 0291 STS	T_buf,R24
(1708)  T_buf[1]=0x7d;
    040C1 E78D      LDI	R24,0x7D
    040C2 9380 0292 STS	T_buf+1,R24
(1709)  T_buf[2]=0;
    040C4 2422      CLR	R2
    040C5 9220 0293 STS	T_buf+2,R2
(1710)  T_count=3;
    040C7 E083      LDI	R24,3
    040C8 9380 0391 STS	T_count,R24
(1711)  T_ptr=1;
    040CA E081      LDI	R24,1
    040CB 9380 0390 STS	T_ptr,R24
(1712)  UDR1=T_buf[0];
    040CD 9020 0291 LDS	R2,T_buf
    040CF 9220 009C STS	0x9C,R2
    040D1 9624      ADIW	R28,4
    040D2 9508      RET
(1713) }
(1714) void GetUSB(void)
(1715) {
(1716)   RTX=1;
_GetUSB:
    040D3 E081      LDI	R24,1
    040D4 9380 03CC STS	RTX,R24
(1717)   R_full=0;
    040D6 2422      CLR	R2
    040D7 9220 038E STS	R_full,R2
(1718)   R_buf[0]=255;
    040D9 EF8F      LDI	R24,0xFF
    040DA 9380 0133 STS	R_buf,R24
(1719)   CMD_DiskReady();//检查USB设备
    040DC DE85      RCALL	_CMD_DiskReady
(1720)   WaitRX(500);
    040DD EF04      LDI	R16,0xF4
    040DE E011      LDI	R17,1
    040DF E020      LDI	R18,0
    040E0 E030      LDI	R19,0
    040E1 940E 3570 CALL	_WaitRX
(1721)   if(R_buf[0]==0)
    040E3 9020 0133 LDS	R2,R_buf
    040E5 2022      TST	R2
    040E6 F401      BNE	0x40E7
(1722)   {
(1723)    
(1724)   }
(1725)   RTX=0;
    040E7 2422      CLR	R2
    040E8 9220 03CC STS	RTX,R2
    040EA 9508      RET
_Up_Pic:
  len                  --> Y,+9
  h                    --> Y,+5
  w                    --> Y,+1
    040EB 940E 4519 CALL	push_xgsetF000
    040ED 972D      SBIW	R28,0xD
(1726) }
(1727) void Up_Pic(void)
(1728) {
(1729)   unsigned long w,h,len;
(1730)   clock_off();
    040EE DE51      RCALL	_clock_off
(1731)   clear_screen();
    040EF DE20      RCALL	_clear_screen
(1732)   RTX=1;
    040F0 E081      LDI	R24,1
    040F1 9380 03CC STS	RTX,R24
(1733)   R_full=0;
    040F3 2422      CLR	R2
    040F4 9220 038E STS	R_full,R2
(1734)   CMD_GetVer();//获取版本号
    040F6 DE50      RCALL	_CMD_GetVer
(1735)   WaitRX(500);
    040F7 EF04      LDI	R16,0xF4
    040F8 E011      LDI	R17,1
    040F9 E020      LDI	R18,0
    040FA E030      LDI	R19,0
    040FB 940E 3570 CALL	_WaitRX
(1736)   Sound_Count=2;
    040FD E082      LDI	R24,2
    040FE 9380 0120 STS	Sound_Count,R24
(1737)   if(R_buf[0]!=0)
    04100 9020 0133 LDS	R2,R_buf
    04102 2022      TST	R2
    04103 F029      BEQ	0x4109
(1738)   {
(1739)     USB_info();
    04104 DE41      RCALL	_USB_info
(1740) 	RTX=0;
    04105 2422      CLR	R2
    04106 9220 03CC STS	RTX,R2
(1741) 	return;
    04108 C11E      RJMP	0x4227
(1742)   }
(1743)   Delay_MS(2);
    04109 E002      LDI	R16,2
    0410A E010      LDI	R17,0
    0410B 940E 2F84 CALL	_Delay_MS
(1744)   R_full=0;
    0410D 2422      CLR	R2
    0410E 9220 038E STS	R_full,R2
(1745)   CMD_DiskReady();//检查USB设备
    04110 DE51      RCALL	_CMD_DiskReady
(1746)   WaitRX(500);
    04111 EF04      LDI	R16,0xF4
    04112 E011      LDI	R17,1
    04113 E020      LDI	R18,0
    04114 E030      LDI	R19,0
    04115 940E 3570 CALL	_WaitRX
(1747)   if(R_buf[0]!=0)
    04117 9020 0133 LDS	R2,R_buf
    04119 2022      TST	R2
    0411A F029      BEQ	0x4120
(1748)   {
(1749)     USB_info();
    0411B DE2A      RCALL	_USB_info
(1750) 	RTX=0;
    0411C 2422      CLR	R2
    0411D 9220 03CC STS	RTX,R2
(1751) 	return;
    0411F C107      RJMP	0x4227
(1752)   }
(1753)   Delay_MS(2);
    04120 E002      LDI	R16,2
    04121 E010      LDI	R17,0
    04122 940E 2F84 CALL	_Delay_MS
(1754)   R_full=0;
    04124 2422      CLR	R2
    04125 9220 038E STS	R_full,R2
(1755)   CMD_File(0,filename);//打开文件
    04127 E325      LDI	R18,0x35
    04128 E036      LDI	R19,6
    04129 2700      CLR	R16
    0412A DE52      RCALL	_CMD_File
(1756)   WaitRX(500);
    0412B EF04      LDI	R16,0xF4
    0412C E011      LDI	R17,1
    0412D E020      LDI	R18,0
    0412E E030      LDI	R19,0
    0412F 940E 3570 CALL	_WaitRX
(1757)   Sound_Count=2;
    04131 E082      LDI	R24,2
    04132 9380 0120 STS	Sound_Count,R24
(1758)   if(R_buf[0]!=0)
    04134 9020 0133 LDS	R2,R_buf
    04136 2022      TST	R2
    04137 F029      BEQ	0x413D
(1759)   {
(1760)     USB_info();
    04138 DE0D      RCALL	_USB_info
(1761) 	RTX=0;
    04139 2422      CLR	R2
    0413A 9220 03CC STS	RTX,R2
(1762) 	return;
    0413C C0EA      RJMP	0x4227
(1763)   }
(1764)   R_full=0;
    0413D 2422      CLR	R2
    0413E 9220 038E STS	R_full,R2
(1765)   for(h=0;h<600;h++)
    04140 E080      LDI	R24,0
    04141 838D      STD	Y+5,R24
    04142 838E      STD	Y+6,R24
    04143 838F      STD	Y+7,R24
    04144 8788      STD	Y+8,R24
    04145 C0C7      RJMP	0x420D
(1766)   {
(1767)     for(w=0;w<10;w++)
    04146 E080      LDI	R24,0
    04147 8389      STD	Y+1,R24
    04148 838A      STD	Y+2,R24
    04149 838B      STD	Y+3,R24
    0414A 838C      STD	Y+4,R24
    0414B C0A3      RJMP	0x41EF
(1768) 	{
(1769) 	 Delay_MS(2);
    0414C E002      LDI	R16,2
    0414D E010      LDI	R17,0
    0414E 940E 2F84 CALL	_Delay_MS
(1770) 	 len=(479-h)*2400+w*240+54;
    04150 802D      LDD	R2,Y+5
    04151 803E      LDD	R3,Y+6
    04152 804F      LDD	R4,Y+7
    04153 8458      LDD	R5,Y+8
    04154 ED4F      LDI	R20,0xDF
    04155 E051      LDI	R21,1
    04156 E060      LDI	R22,0
    04157 E070      LDI	R23,0
    04158 013A      MOVW	R6,R20
    04159 014B      MOVW	R8,R22
    0415A 1862      SUB	R6,R2
    0415B 0873      SBC	R7,R3
    0415C 0884      SBC	R8,R4
    0415D 0895      SBC	R9,R5
    0415E E640      LDI	R20,0x60
    0415F E059      LDI	R21,0x9
    04160 E060      LDI	R22,0
    04161 E070      LDI	R23,0
    04162 929A      ST	-Y,R9
    04163 928A      ST	-Y,R8
    04164 927A      ST	-Y,R7
    04165 926A      ST	-Y,R6
    04166 018A      MOVW	R16,R20
    04167 019B      MOVW	R18,R22
    04168 940E 44B5 CALL	empy32s|empy32u
    0416A 0118      MOVW	R2,R16
    0416B 0129      MOVW	R4,R18
    0416C 8069      LDD	R6,Y+1
    0416D 807A      LDD	R7,Y+2
    0416E 808B      LDD	R8,Y+3
    0416F 809C      LDD	R9,Y+4
    04170 EF40      LDI	R20,0xF0
    04171 E050      LDI	R21,0
    04172 E060      LDI	R22,0
    04173 E070      LDI	R23,0
    04174 929A      ST	-Y,R9
    04175 928A      ST	-Y,R8
    04176 927A      ST	-Y,R7
    04177 926A      ST	-Y,R6
    04178 018A      MOVW	R16,R20
    04179 019B      MOVW	R18,R22
    0417A 940E 44B5 CALL	empy32s|empy32u
    0417C 0E20      ADD	R2,R16
    0417D 1E31      ADC	R3,R17
    0417E 1E42      ADC	R4,R18
    0417F 1E53      ADC	R5,R19
    04180 E346      LDI	R20,0x36
    04181 E050      LDI	R21,0
    04182 E060      LDI	R22,0
    04183 E070      LDI	R23,0
    04184 0E24      ADD	R2,R20
    04185 1E35      ADC	R3,R21
    04186 1E46      ADC	R4,R22
    04187 1E57      ADC	R5,R23
    04188 8629      STD	Y+9,R2
    04189 863A      STD	Y+10,R3
    0418A 864B      STD	Y+11,R4
    0418B 865C      STD	Y+12,R5
(1771)      CMD_ByteLocate(len);
    0418C 8509      LDD	R16,Y+9
    0418D 851A      LDD	R17,Y+10
    0418E 852B      LDD	R18,Y+11
    0418F 853C      LDD	R19,Y+12
    04190 DE56      RCALL	_CMD_ByteLocate
(1772) 	 WaitRX(500);
    04191 EF04      LDI	R16,0xF4
    04192 E011      LDI	R17,1
    04193 E020      LDI	R18,0
    04194 E030      LDI	R19,0
    04195 940E 3570 CALL	_WaitRX
(1773) 	 if(R_full==0) continue;  /* 继续等待模块完成操作 */
    04197 9020 038E LDS	R2,R_full
    04199 2022      TST	R2
    0419A F409      BNE	0x419C
    0419B C043      RJMP	0x41DF
(1774) 	 R_full=0;
    0419C 2422      CLR	R2
    0419D 9220 038E STS	R_full,R2
(1775) 	 Delay_MS(2);
    0419F E002      LDI	R16,2
    041A0 E010      LDI	R17,0
    041A1 940E 2F84 CALL	_Delay_MS
(1776)      CMD_ByteRead(240);
    041A3 EF00      LDI	R16,0xF0
    041A4 DE9C      RCALL	_CMD_ByteRead
(1777) 	 WaitRX(500);
    041A5 EF04      LDI	R16,0xF4
    041A6 E011      LDI	R17,1
    041A7 E020      LDI	R18,0
    041A8 E030      LDI	R19,0
    041A9 940E 3570 CALL	_WaitRX
(1778) 	 if(R_full==0) continue;  /* 继续等待模块完成操作 */
    041AB 9020 038E LDS	R2,R_full
    041AD 2022      TST	R2
    041AE F409      BNE	0x41B0
    041AF C02F      RJMP	0x41DF
(1779) 	 R_full=0;
    041B0 2422      CLR	R2
    041B1 9220 038E STS	R_full,R2
(1780) 	 
(1781)      send_pic(800*h+w*80,240);
    041B3 EF80      LDI	R24,0xF0
    041B4 8388      ST	Y,R24
    041B5 8029      LDD	R2,Y+1
    041B6 803A      LDD	R3,Y+2
    041B7 804B      LDD	R4,Y+3
    041B8 805C      LDD	R5,Y+4
    041B9 E540      LDI	R20,0x50
    041BA E050      LDI	R21,0
    041BB E060      LDI	R22,0
    041BC E070      LDI	R23,0
    041BD 925A      ST	-Y,R5
    041BE 924A      ST	-Y,R4
    041BF 923A      ST	-Y,R3
    041C0 922A      ST	-Y,R2
    041C1 018A      MOVW	R16,R20
    041C2 019B      MOVW	R18,R22
    041C3 940E 44B5 CALL	empy32s|empy32u
    041C5 0118      MOVW	R2,R16
    041C6 0129      MOVW	R4,R18
    041C7 806D      LDD	R6,Y+5
    041C8 807E      LDD	R7,Y+6
    041C9 808F      LDD	R8,Y+7
    041CA 8498      LDD	R9,Y+8
    041CB E240      LDI	R20,0x20
    041CC E053      LDI	R21,3
    041CD E060      LDI	R22,0
    041CE E070      LDI	R23,0
    041CF 929A      ST	-Y,R9
    041D0 928A      ST	-Y,R8
    041D1 927A      ST	-Y,R7
    041D2 926A      ST	-Y,R6
    041D3 018A      MOVW	R16,R20
    041D4 019B      MOVW	R18,R22
    041D5 940E 44B5 CALL	empy32s|empy32u
    041D7 0D02      ADD	R16,R2
    041D8 1D13      ADC	R17,R3
    041D9 1D24      ADC	R18,R4
    041DA 1D35      ADC	R19,R5
    041DB DD68      RCALL	_send_pic
(1782) 	 Sound_Count=2;
    041DC E082      LDI	R24,2
    041DD 9380 0120 STS	Sound_Count,R24
    041DF E041      LDI	R20,1
    041E0 E050      LDI	R21,0
    041E1 E060      LDI	R22,0
    041E2 E070      LDI	R23,0
    041E3 8029      LDD	R2,Y+1
    041E4 803A      LDD	R3,Y+2
    041E5 804B      LDD	R4,Y+3
    041E6 805C      LDD	R5,Y+4
    041E7 0E24      ADD	R2,R20
    041E8 1E35      ADC	R3,R21
    041E9 1E46      ADC	R4,R22
    041EA 1E57      ADC	R5,R23
    041EB 8229      STD	Y+1,R2
    041EC 823A      STD	Y+2,R3
    041ED 824B      STD	Y+3,R4
    041EE 825C      STD	Y+4,R5
    041EF E04A      LDI	R20,0xA
    041F0 E050      LDI	R21,0
    041F1 E060      LDI	R22,0
    041F2 E070      LDI	R23,0
    041F3 8029      LDD	R2,Y+1
    041F4 803A      LDD	R3,Y+2
    041F5 804B      LDD	R4,Y+3
    041F6 805C      LDD	R5,Y+4
    041F7 1624      CP	R2,R20
    041F8 0635      CPC	R3,R21
    041F9 0646      CPC	R4,R22
    041FA 0657      CPC	R5,R23
    041FB F408      BCC	0x41FD
    041FC CF4F      RJMP	0x414C
    041FD E041      LDI	R20,1
    041FE E050      LDI	R21,0
    041FF E060      LDI	R22,0
    04200 E070      LDI	R23,0
    04201 802D      LDD	R2,Y+5
    04202 803E      LDD	R3,Y+6
    04203 804F      LDD	R4,Y+7
    04204 8458      LDD	R5,Y+8
    04205 0E24      ADD	R2,R20
    04206 1E35      ADC	R3,R21
    04207 1E46      ADC	R4,R22
    04208 1E57      ADC	R5,R23
    04209 822D      STD	Y+5,R2
    0420A 823E      STD	Y+6,R3
    0420B 824F      STD	Y+7,R4
    0420C 8658      STD	Y+8,R5
    0420D E548      LDI	R20,0x58
    0420E E052      LDI	R21,2
    0420F E060      LDI	R22,0
    04210 E070      LDI	R23,0
    04211 802D      LDD	R2,Y+5
    04212 803E      LDD	R3,Y+6
    04213 804F      LDD	R4,Y+7
    04214 8458      LDD	R5,Y+8
    04215 1624      CP	R2,R20
    04216 0635      CPC	R3,R21
    04217 0646      CPC	R4,R22
    04218 0657      CPC	R5,R23
    04219 F408      BCC	0x421B
    0421A CF2B      RJMP	0x4146
(1783) 	}
(1784)   }
(1785)   save_pic(0);
    0421B 2700      CLR	R16
    0421C DD28      RCALL	_save_pic
(1786)   CMD_File(3,filename);
    0421D E325      LDI	R18,0x35
    0421E E036      LDI	R19,6
    0421F E003      LDI	R16,3
    04220 DD5C      RCALL	_CMD_File
(1787)   Sound_Count=20;
    04221 E184      LDI	R24,0x14
    04222 9380 0120 STS	Sound_Count,R24
(1788)   RTX=0;
    04224 2422      CLR	R2
    04225 9220 03CC STS	RTX,R2
    04227 962D      ADIW	R28,0xD
    04228 940C 451E JMP	pop_xgsetF000
_dispose_data:
  buff                 --> Y,+1
  i                    --> R20
    0422A 934A      ST	-Y,R20
    0422B 9761      SBIW	R28,0x11
(1789) }
(1790) 
(1791) void dispose_data(void)//负压1号手柄数据处理
(1792) {
(1793)   unsigned char i;
(1794)   unsigned char buff[16];
(1795)   if (RX2Countertail!=RX2Counterhead)
    0422C 9020 0449 LDS	R2,RX2Counterhead
    0422E 9030 0448 LDS	R3,RX2Countertail
    04230 1432      CP	R3,R2
    04231 F409      BNE	0x4233
    04232 C0D9      RJMP	0x430C
(1796)   {
(1797) 
(1798)   if(RX2Data[RX2Countertail][2]<7)//buf2对应能量种类 buf3对应能量等级
    04233 2D13      MOV	R17,R3
    04234 E10E      LDI	R16,0x1E
    04235 0301      MULSU	R16,R17
    04236 E48C      LDI	R24,0x4C
    04237 E094      LDI	R25,4
    04238 01F0      MOVW	R30,R0
    04239 0FE8      ADD	R30,R24
    0423A 1FF9      ADC	R31,R25
    0423B 8180      LD	R24,Z
    0423C 3087      CPI	R24,7
    0423D F4B8      BCC	0x4255
(1799)   {
(1800)     Intensity[RX2Data[RX2Countertail][2]]=RX2Data[RX2Countertail][3];
    0423E 0301      MULSU	R16,R17
    0423F E48C      LDI	R24,0x4C
    04240 E094      LDI	R25,4
    04241 01F0      MOVW	R30,R0
    04242 0FE8      ADD	R30,R24
    04243 1FF9      ADC	R31,R25
    04244 81E0      LD	R30,Z
    04245 27FF      CLR	R31
    04246 EB83      LDI	R24,0xB3
    04247 E093      LDI	R25,3
    04248 0FE8      ADD	R30,R24
    04249 1FF9      ADC	R31,R25
    0424A E48D      LDI	R24,0x4D
    0424B E094      LDI	R25,4
    0424C 01D0      MOVW	R26,R0
    0424D 0FA8      ADD	R26,R24
    0424E 1FB9      ADC	R27,R25
    0424F 902C      LD	R2,X
    04250 8220      ST	Z,R2
(1801) 	 // DisIntensity(R_buf1[2]);
(1802)    // IntensitySet();
(1803) 	 Sound_Count=10;
    04251 E08A      LDI	R24,0xA
    04252 9380 0120 STS	Sound_Count,R24
(1804)   /*
(1805)   if (RX2Data[RX2Countertail][2]==0)
(1806)   {
(1807)     HNDLE_INFORMATION.SAVE_LED=Intensity[0];//LED等级
(1808)     DwinWriteWord(ADDR_BOOTINGLEDDATA,HNDLE_INFORMATION.SAVE_LED);//迪文屏通信函数
(1809)     DwinWriteWord(ADDR_BOOTINGLEDLINE,HNDLE_INFORMATION.SAVE_LED); //对应地址 连续写两个字节 写进度条及变量显示
(1810)     DwinWriteWord(ADDR_BOOTINGLEDKEY,HNDLE_INFORMATION.SAVE_LED);//迪文屏通信函数
(1811)   }
(1812) 
(1813)     if (RX2Data[RX2Countertail][2]==2)
(1814)   {
(1815)     HNDLE_INFORMATION.SAVE_RF=Intensity[2];//射频等级
(1816)     DwinWriteWord(ADDR_BOOTINGRF,HNDLE_INFORMATION.SAVE_RF);//迪文屏通信函数
(1817)     DwinWriteWord(ADDR_BOOTINGRFLINE,HNDLE_INFORMATION.SAVE_RF); //对应地址 连续写两个字节 写进度条及变量显示
(1818)     DwinWriteWord(ADDR_BOOTINGRFKEY,HNDLE_INFORMATION.SAVE_RF);//迪文屏通信函数
(1819)   }
(1820)   
(1821) 
(1822)     if (R_buf1[2]==3)
(1823)   {
(1824)      HNDLE_INFORMATION.SAVE_MOTO_SPEED=Intensity[3];//电机转速等级
(1825)     DwinWriteWord(ADDR_BOOTINGMOTO_SPEEDDATA,HNDLE_INFORMATION.SAVE_MOTO_SPEED);//迪文屏通信函数
(1826)     DwinWriteWord(ADDR_BOOTINGMOTO_SPEEDLINE,HNDLE_INFORMATION.SAVE_MOTO_SPEED); //对应地址 连续写两个字节 写进度条及变量显示
(1827)     DwinWriteWord(ADDR_BOOTINGMOTO_SPEEDKEY,HNDLE_INFORMATION.SAVE_MOTO_SPEED);//迪文屏通信函数
(1828)   }
(1829)   
(1830) 
(1831)     if (R_buf1[2]==4)
(1832)   {
(1833)     HNDLE_INFORMATION.SAVE_PRESS=Intensity[4];//负压等级
(1834)     DwinWriteWord(ADDR_BOOTINGPRESSDATA,HNDLE_INFORMATION.SAVE_PRESS);//迪文屏通信函数
(1835)     DwinWriteWord(ADDR_BOOTINGPRESSLINE,HNDLE_INFORMATION.SAVE_PRESS); //对应地址 连续写两个字节 写进度条及变量显示
(1836)     DwinWriteWord(ADDR_BOOTINGPRESSKEY,HNDLE_INFORMATION.SAVE_PRESS);//迪文屏通信函数
(1837)   }
(1838)   
(1839) 
(1840)     if (R_buf1[2]==5)
(1841)   {
(1842)     HNDLE_INFORMATION.SAVE_PRESS_IN=Intensity[5];//吸气等级
(1843)     DwinWriteWord(ADDR_BOOTINGPRESS_INDATA,HNDLE_INFORMATION.SAVE_PRESS_IN);//迪文屏通信函数
(1844)     DwinWriteWord(ADDR_BOOTINGPRESS_INLINE,HNDLE_INFORMATION.SAVE_PRESS_IN); //对应地址 连续写两个字节 写进度条及变量显示
(1845)     DwinWriteWord(ADDR_BOOTINGPRESS_INKEY,HNDLE_INFORMATION.SAVE_PRESS_IN);//迪文屏通信函数
(1846)   }
(1847)   
(1848) 
(1849)     if (R_buf1[2]==6)
(1850)   {
(1851)     HNDLE_INFORMATION.SAVE_PRESS_OUT=Intensity[6];//放气等级
(1852)     DwinWriteWord(ADDR_BOOTINGPRESS_OUTDATA,HNDLE_INFORMATION.SAVE_PRESS_OUT);//迪文屏通信函数
(1853)     DwinWriteWord(ADDR_BOOTINGPRESS_OUTLINE,HNDLE_INFORMATION.SAVE_PRESS_OUT); //对应地址 连续写两个字节 写进度条及变量显示
(1854)     DwinWriteWord(ADDR_BOOTINGPRESS_OUTKEY,HNDLE_INFORMATION.SAVE_PRESS_OUT);//迪文屏通信函数
(1855)   }
(1856)   
(1857) 
(1858)     if (R_buf1[2]==7)
(1859)   {
(1860)     HNDLE_INFORMATION.SAVE_MOTO_TOWARD=Intensity[7];//电机转向
(1861)     DwinWriteWord(ADDR_BOOTINGMOTO_TOWARDDATA,HNDLE_INFORMATION.SAVE_MOTO_TOWARD);//迪文屏通信函数
(1862)     DwinWriteWord(ADDR_BOOTINGMOTO_TOWARDKEY,HNDLE_INFORMATION.SAVE_MOTO_TOWARD);//迪文屏通信函数
(1863)   }
(1864)   delay_ms(10);
(1865)   */
(1866)   }
    04254 C04D      RJMP	0x42A2
(1867)   else if(RX2Data[RX2Countertail][2]==7)//电机转向 
    04255 9110 0448 LDS	R17,RX2Countertail
    04257 E10E      LDI	R16,0x1E
    04258 0301      MULSU	R16,R17
    04259 E48C      LDI	R24,0x4C
    0425A E094      LDI	R25,4
    0425B 01F0      MOVW	R30,R0
    0425C 0FE8      ADD	R30,R24
    0425D 1FF9      ADC	R31,R25
    0425E 8180      LD	R24,Z
    0425F 3087      CPI	R24,7
    04260 F4B9      BNE	0x4278
(1868)   {
(1869)     Intensity[(RX2Data[RX2Countertail][2])]=RX2Data[RX2Countertail][3];
    04261 0301      MULSU	R16,R17
    04262 E48C      LDI	R24,0x4C
    04263 E094      LDI	R25,4
    04264 01F0      MOVW	R30,R0
    04265 0FE8      ADD	R30,R24
    04266 1FF9      ADC	R31,R25
    04267 81E0      LD	R30,Z
    04268 27FF      CLR	R31
    04269 EB83      LDI	R24,0xB3
    0426A E093      LDI	R25,3
    0426B 0FE8      ADD	R30,R24
    0426C 1FF9      ADC	R31,R25
    0426D E48D      LDI	R24,0x4D
    0426E E094      LDI	R25,4
    0426F 01D0      MOVW	R26,R0
    04270 0FA8      ADD	R26,R24
    04271 1FB9      ADC	R27,R25
    04272 902C      LD	R2,X
    04273 8220      ST	Z,R2
(1870) 	//ModeSet();
(1871) 	//cut_pic(0,28+Intensity[7],523,388,588,788,523,388);
(1872) 	Sound_Count=10;
    04274 E08A      LDI	R24,0xA
    04275 9380 0120 STS	Sound_Count,R24
(1873)   }
    04277 C02A      RJMP	0x42A2
(1874) 
(1875) 
(1876)   else if(RX2Data[RX2Countertail][2]==10)//整机工作
    04278 9110 0448 LDS	R17,RX2Countertail
    0427A E10E      LDI	R16,0x1E
    0427B 0301      MULSU	R16,R17
    0427C E48C      LDI	R24,0x4C
    0427D E094      LDI	R25,4
    0427E 01F0      MOVW	R30,R0
    0427F 0FE8      ADD	R30,R24
    04280 1FF9      ADC	R31,R25
    04281 8180      LD	R24,Z
    04282 308A      CPI	R24,0xA
    04283 F4F1      BNE	0x42A2
(1877)   {
(1878)     MACHINE_STATE.WORK_STATE=RX2Data[RX2Countertail][3];
    04284 0301      MULSU	R16,R17
    04285 E48D      LDI	R24,0x4D
    04286 E094      LDI	R25,4
    04287 01F0      MOVW	R30,R0
    04288 0FE8      ADD	R30,R24
    04289 1FF9      ADC	R31,R25
    0428A 8020      LD	R2,Z
    0428B 9220 089C STS	MACHINE_STATE+1,R2
(1879) 	  Sound_Count=10;
    0428D E08A      LDI	R24,0xA
    0428E 9380 0120 STS	Sound_Count,R24
(1880)     buff[0] = 0;//1号手柄
    04290 2422      CLR	R2
    04291 8229      STD	Y+1,R2
(1881)     buff[1] = MACHINE_STATE.WORK_STATE;
    04292 9020 089C LDS	R2,MACHINE_STATE+1
    04294 822A      STD	Y+2,R2
(1882)     DwinWriteLongWords(ADDR_HANDWORK_TO_ANDROID, buff, 2); //反馈给安卓端
    04295 E082      LDI	R24,2
    04296 8388      ST	Y,R24
    04297 019E      MOVW	R18,R28
    04298 5F2F      SUBI	R18,0xFF
    04299 4F3F      SBCI	R19,0xFF
    0429A E001      LDI	R16,1
    0429B E416      LDI	R17,0x46
    0429C 940E 36D0 CALL	_DwinWriteLongWords
(1883)     delay_ms(10);
    0429E E00A      LDI	R16,0xA
    0429F E010      LDI	R17,0
    042A0 940E 06B7 CALL	_delay_ms
(1884)   }
(1885) 
(1886)   HNDLE_INFORMATION.SAVE_LED=Intensity[0];//LED等级
    042A2 9020 03B3 LDS	R2,Intensity
    042A4 9220 08A4 STS	HNDLE_INFORMATION+4,R2
(1887)   HNDLE_INFORMATION.SAVE_INFRARED=Intensity[1];//红外等级
    042A6 9020 03B4 LDS	R2,Intensity+1
    042A8 9220 08A5 STS	HNDLE_INFORMATION+5,R2
(1888)   HNDLE_INFORMATION.SAVE_RF=Intensity[2];//射频等级
    042AA 9020 03B5 LDS	R2,Intensity+2
    042AC 9220 08A1 STS	HNDLE_INFORMATION+1,R2
(1889)   HNDLE_INFORMATION.SAVE_MOTO_SPEED=Intensity[3];//电机转速等级
    042AE 9020 03B6 LDS	R2,Intensity+3
    042B0 9220 08A6 STS	HNDLE_INFORMATION+6,R2
(1890)   HNDLE_INFORMATION.SAVE_PRESS=Intensity[4];//负压等级
    042B2 9020 03B7 LDS	R2,Intensity+4
    042B4 9220 08A0 STS	HNDLE_INFORMATION,R2
(1891)   HNDLE_INFORMATION.SAVE_PRESS_IN=Intensity[5];//吸气时间
    042B6 9020 03B8 LDS	R2,Intensity+5
    042B8 9220 08A2 STS	HNDLE_INFORMATION+2,R2
(1892)   HNDLE_INFORMATION.SAVE_PRESS_OUT=Intensity[6];//放气时间
    042BA 9020 03B9 LDS	R2,Intensity+6
    042BC 9220 08A3 STS	HNDLE_INFORMATION+3,R2
(1893)   HNDLE_INFORMATION.SAVE_MOTO_TOWARD=Intensity[7];//电机转向
    042BE 9020 03BA LDS	R2,Intensity+7
    042C0 9220 08A7 STS	HNDLE_INFORMATION+7,R2
(1894)   //MACHINE_STATE.HANDLE_ID=Intensity[8]+1;//手柄ID
(1895)   buff[0] = 0;//1号手柄
    042C2 2422      CLR	R2
    042C3 8229      STD	Y+1,R2
(1896)   buff[1] = Intensity[4];//负压等级
    042C4 9020 03B7 LDS	R2,Intensity+4
    042C6 822A      STD	Y+2,R2
(1897)   buff[2] = Intensity[5];//吸气等级
    042C7 9020 03B8 LDS	R2,Intensity+5
    042C9 822B      STD	Y+3,R2
(1898)   buff[3] = Intensity[6];//放气等级
    042CA 9020 03B9 LDS	R2,Intensity+6
    042CC 822C      STD	Y+4,R2
(1899)   buff[4] =  Intensity[2] ;//RF等级
    042CD 9020 03B5 LDS	R2,Intensity+2
    042CF 822D      STD	Y+5,R2
(1900)   buff[5] = Intensity[0];//LED等级
    042D0 9020 03B3 LDS	R2,Intensity
    042D2 822E      STD	Y+6,R2
(1901)   buff[6] = Intensity[1];//红外等级
    042D3 9020 03B4 LDS	R2,Intensity+1
    042D5 822F      STD	Y+7,R2
(1902)   buff[7] = Intensity[3];//电机转速等级
    042D6 9020 03B6 LDS	R2,Intensity+3
    042D8 8628      STD	Y+8,R2
(1903)   buff[8] = Intensity[7];//电机转向
    042D9 9020 03BA LDS	R2,Intensity+7
    042DB 8629      STD	Y+9,R2
(1904) 
(1905)   DwinWriteLongWords(ADDR_HANDPARAMETER_TO_ANDROID,buff,9);//迪文屏通信函数
    042DC E089      LDI	R24,0x9
    042DD 8388      ST	Y,R24
    042DE 019E      MOVW	R18,R28
    042DF 5F2F      SUBI	R18,0xFF
    042E0 4F3F      SBCI	R19,0xFF
    042E1 E000      LDI	R16,0
    042E2 E416      LDI	R17,0x46
    042E3 940E 36D0 CALL	_DwinWriteLongWords
(1906) 
(1907)           
(1908)   ModeSet();
    042E5 940E 099D CALL	_ModeSet
(1909)   delay_ms(10);
    042E7 E00A      LDI	R16,0xA
    042E8 E010      LDI	R17,0
    042E9 940E 06B7 CALL	_delay_ms
(1910)   
(1911)   for(i=0;i<30;i++)
    042EB 2744      CLR	R20
    042EC C010      RJMP	0x42FD
(1912)   {RX2Data[RX2Countertail][i]=0;}
    042ED 9110 0448 LDS	R17,RX2Countertail
    042EF E10E      LDI	R16,0x1E
    042F0 0301      MULSU	R16,R17
    042F1 0110      MOVW	R2,R0
    042F2 E48A      LDI	R24,0x4A
    042F3 E094      LDI	R25,4
    042F4 0E28      ADD	R2,R24
    042F5 1E39      ADC	R3,R25
    042F6 2FE4      MOV	R30,R20
    042F7 27FF      CLR	R31
    042F8 0DE2      ADD	R30,R2
    042F9 1DF3      ADC	R31,R3
    042FA 2422      CLR	R2
    042FB 8220      ST	Z,R2
    042FC 9543      INC	R20
    042FD 314E      CPI	R20,0x1E
    042FE F370      BCS	0x42ED
(1913)   RX2Countertail++;
    042FF 9180 0448 LDS	R24,RX2Countertail
    04301 5F8F      SUBI	R24,0xFF
    04302 9380 0448 STS	RX2Countertail,R24
(1914)   if(RX2Countertail>10){RX2Countertail=0;}
    04304 E08A      LDI	R24,0xA
    04305 9020 0448 LDS	R2,RX2Countertail
    04307 1582      CP	R24,R2
    04308 F418      BCC	0x430C
    04309 2422      CLR	R2
    0430A 9220 0448 STS	RX2Countertail,R2
(1915) 
(1916)   }
    0430C 9661      ADIW	R28,0x11
    0430D 9149      LD	R20,Y+
    0430E 9508      RET
(1917)   
(1918) }
(1919) void Send_Data(void)
(1920) {
(1921)   while(T_count>0);
_Send_Data:
    0430F E080      LDI	R24,0
    04310 9020 0391 LDS	R2,T_count
    04312 1582      CP	R24,R2
    04313 F3D8      BCS	0x430F
(1922)   T_buf[0]=0xaa;
    04314 EA8A      LDI	R24,0xAA
    04315 9380 0291 STS	T_buf,R24
(1923)   T_buf[1]=4;
    04317 E084      LDI	R24,4
    04318 9380 0292 STS	T_buf+1,R24
(1924)   //T_buf[2]=Menu;
(1925)   //T_buf[3]=Intensity[Menu];
(1926)     T_buf[2]=0;
    0431A 2422      CLR	R2
    0431B 9220 0293 STS	T_buf+2,R2
(1927)   T_buf[3]=Intensity[0];
    0431D 9020 03B3 LDS	R2,Intensity
    0431F 9220 0294 STS	T_buf+3,R2
(1928)   while(R_count1>0);
    04321 E080      LDI	R24,0
    04322 9020 038C LDS	R2,R_count1
    04324 1582      CP	R24,R2
    04325 F3D8      BCS	0x4321
(1929)   TXD;
    04326 9A91      SBI	0x12,1
(1930)   T_ptr=1;
    04327 E081      LDI	R24,1
    04328 9380 0390 STS	T_ptr,R24
(1931)   T_count=T_buf[1];
    0432A 9020 0292 LDS	R2,T_buf+1
    0432C 9220 0391 STS	T_count,R2
(1932)   UDR1=T_buf[0];
    0432E 9020 0291 LDS	R2,T_buf
    04330 9220 009C STS	0x9C,R2
    04332 9508      RET
(1933) }
(1934) void Send_Data8(void)
(1935) {
(1936)   while(T_count>0);
_Send_Data8:
    04333 E080      LDI	R24,0
    04334 9020 0391 LDS	R2,T_count
    04336 1582      CP	R24,R2
    04337 F3D8      BCS	0x4333
(1937)   T_buf[0]=0xaa;
    04338 EA8A      LDI	R24,0xAA
    04339 9380 0291 STS	T_buf,R24
(1938)   T_buf[1]=13;
    0433B E08D      LDI	R24,0xD
    0433C 9380 0292 STS	T_buf+1,R24
(1939)   T_buf[2]=9;
    0433E E089      LDI	R24,0x9
    0433F 9380 0293 STS	T_buf+2,R24
(1940)   T_buf[3]=Intensity[0];
    04341 9020 03B3 LDS	R2,Intensity
    04343 9220 0294 STS	T_buf+3,R2
(1941)   T_buf[4]=Intensity[1];
    04345 9020 03B4 LDS	R2,Intensity+1
    04347 9220 0295 STS	T_buf+4,R2
(1942)   T_buf[5]=Intensity[2];
    04349 9020 03B5 LDS	R2,Intensity+2
    0434B 9220 0296 STS	T_buf+5,R2
(1943)   T_buf[6]=Intensity[3];
    0434D 9020 03B6 LDS	R2,Intensity+3
    0434F 9220 0297 STS	T_buf+6,R2
(1944)   T_buf[7]=Intensity[4];
    04351 9020 03B7 LDS	R2,Intensity+4
    04353 9220 0298 STS	T_buf+7,R2
(1945)   T_buf[8]=Intensity[5];
    04355 9020 03B8 LDS	R2,Intensity+5
    04357 9220 0299 STS	T_buf+8,R2
(1946)   T_buf[9]=Intensity[6];
    04359 9020 03B9 LDS	R2,Intensity+6
    0435B 9220 029A STS	T_buf+9,R2
(1947)   T_buf[10]=Intensity[7];
    0435D 9020 03BA LDS	R2,Intensity+7
    0435F 9220 029B STS	T_buf+10,R2
(1948)   T_buf[11]=Intensity[8];
    04361 9020 03BB LDS	R2,Intensity+8
    04363 9220 029C STS	T_buf+11,R2
(1949)   T_buf[12]=WORKPAGE;
    04365 E185      LDI	R24,0x15
    04366 9380 029D STS	T_buf+12,R24
(1950)   while(R_count1>0);
    04368 E080      LDI	R24,0
    04369 9020 038C LDS	R2,R_count1
    0436B 1582      CP	R24,R2
    0436C F3D8      BCS	0x4368
(1951)   TXD;
    0436D 9A91      SBI	0x12,1
(1952)   T_ptr=1;
    0436E E081      LDI	R24,1
    0436F 9380 0390 STS	T_ptr,R24
(1953)   T_count=T_buf[1];
    04371 9020 0292 LDS	R2,T_buf+1
    04373 9220 0391 STS	T_count,R2
(1954)   UDR1=T_buf[0];
    04375 9020 0291 LDS	R2,T_buf
    04377 9220 009C STS	0x9C,R2
    04379 9508      RET
(1955) }
(1956) void Send_command(void)
(1957) {
(1958)   while(T_count>0);
_Send_command:
    0437A E080      LDI	R24,0
    0437B 9020 0391 LDS	R2,T_count
    0437D 1582      CP	R24,R2
    0437E F3D8      BCS	0x437A
(1959)   T_buf[0]=0xaa;
    0437F EA8A      LDI	R24,0xAA
    04380 9380 0291 STS	T_buf,R24
(1960)   T_buf[1]=4;
    04382 E084      LDI	R24,4
    04383 9380 0292 STS	T_buf+1,R24
(1961)   T_buf[2]=10;
    04385 E08A      LDI	R24,0xA
    04386 9380 0293 STS	T_buf+2,R24
(1962)   T_buf[3]=MACHINE_STATE.WORK_STATE;
    04388 9020 089C LDS	R2,MACHINE_STATE+1
    0438A 9220 0294 STS	T_buf+3,R2
(1963)   while(R_count1>0);
    0438C E080      LDI	R24,0
    0438D 9020 038C LDS	R2,R_count1
    0438F 1582      CP	R24,R2
    04390 F3D8      BCS	0x438C
(1964)   TXD;
    04391 9A91      SBI	0x12,1
(1965)   T_ptr=1;
    04392 E081      LDI	R24,1
    04393 9380 0390 STS	T_ptr,R24
(1966)   T_count=T_buf[1];
    04395 9020 0292 LDS	R2,T_buf+1
    04397 9220 0391 STS	T_count,R2
(1967)   UDR1=T_buf[0];
    04399 9020 0291 LDS	R2,T_buf
    0439B 9220 009C STS	0x9C,R2
    0439D 9508      RET
(1968) }
(1969) void Send_EN(void)
(1970) {
(1971)   while(T_count>0);
_Send_EN:
    0439E E080      LDI	R24,0
    0439F 9020 0391 LDS	R2,T_count
    043A1 1582      CP	R24,R2
    043A2 F3D8      BCS	0x439E
(1972)   T_buf[0]=0xaa;
    043A3 EA8A      LDI	R24,0xAA
    043A4 9380 0291 STS	T_buf,R24
(1973)   T_buf[1]=4;
    043A6 E084      LDI	R24,4
    043A7 9380 0292 STS	T_buf+1,R24
(1974)   T_buf[2]=11;
    043A9 E08B      LDI	R24,0xB
    043AA 9380 0293 STS	T_buf+2,R24
(1975)   T_buf[3]=DisPage;
    043AC 9020 0114 LDS	R2,DisPage
    043AE 9220 0294 STS	T_buf+3,R2
(1976)   while(R_count>0);
    043B0 E080      LDI	R24,0
    043B1 9020 038B LDS	R2,R_count
    043B3 1582      CP	R24,R2
    043B4 F3D8      BCS	0x43B0
(1977)   TXD;
    043B5 9A91      SBI	0x12,1
(1978)   T_ptr=1;
    043B6 E081      LDI	R24,1
    043B7 9380 0390 STS	T_ptr,R24
(1979)   T_count=T_buf[1];
    043B9 9020 0292 LDS	R2,T_buf+1
    043BB 9220 0391 STS	T_count,R2
(1980)   UDR1=T_buf[0];
FILE: <library>
    043BD 9020 0291 LDS	R2,T_buf
    043BF 9220 009C STS	0x9C,R2
    043C1 9508      RET
_memcpy:
    043C2 2FA0      MOV	R26,R16
    043C3 2FB1      MOV	R27,R17
    043C4 2FE2      MOV	R30,R18
    043C5 2FF3      MOV	R31,R19
    043C6 8188      LD	R24,Y
    043C7 8199      LDD	R25,Y+1
    043C8 3080      CPI	R24,0
    043C9 0798      CPC	R25,R24
    043CA C003      RJMP	0x43CE
    043CB 9001      LD	R0,Z+
    043CC 920D      ST	X+,R0
    043CD 9701      SBIW	R24,1
    043CE F7E1      BNE	0x43CB
    043CF 9508      RET
_memset:
    043D0 8188      LD	R24,Y
    043D1 8199      LDD	R25,Y+1
    043D2 3080      CPI	R24,0
    043D3 0789      CPC	R24,R25
    043D4 F029      BEQ	0x43DA
    043D5 2FE0      MOV	R30,R16
    043D6 2FF1      MOV	R31,R17
    043D7 9321      ST	Z+,R18
    043D8 9701      SBIW	R24,1
    043D9 F7E9      BNE	0x43D7
    043DA 9508      RET
_strcpy:
    043DB 2FA0      MOV	R26,R16
    043DC 2FB1      MOV	R27,R17
    043DD 2FE2      MOV	R30,R18
    043DE 2FF3      MOV	R31,R19
    043DF 9001      LD	R0,Z+
    043E0 920D      ST	X+,R0
    043E1 2000      TST	R0
    043E2 F7E1      BNE	0x43DF
    043E3 9508      RET
push_arg4:
    043E4 933A      ST	-Y,R19
    043E5 932A      ST	-Y,R18
push_arg2:
    043E6 931A      ST	-Y,R17
    043E7 930A      ST	-Y,R16
    043E8 9508      RET
mod16s:
    043E9 9468      BSET	6
    043EA 92DA      ST	-Y,R13
    043EB 2ED1      MOV	R13,R17
    043EC C004      RJMP	0x43F1
div16s:
    043ED 94E8      BCLR	6
    043EE 92DA      ST	-Y,R13
    043EF 2ED1      MOV	R13,R17
    043F0 26D3      EOR	R13,R19
    043F1 FF17      SBRS	R17,7
    043F2 C004      RJMP	0x43F7
    043F3 9510      COM	R17
    043F4 9500      COM	R16
    043F5 5F0F      SUBI	R16,0xFF
    043F6 4F1F      SBCI	R17,0xFF
    043F7 FF37      SBRS	R19,7
    043F8 C004      RJMP	0x43FD
    043F9 9530      COM	R19
    043FA 9520      COM	R18
    043FB 5F2F      SUBI	R18,0xFF
    043FC 4F3F      SBCI	R19,0xFF
    043FD 940E 440A CALL	xdiv16u
    043FF FED7      SBRS	R13,7
    04400 C004      RJMP	0x4405
    04401 9510      COM	R17
    04402 9500      COM	R16
    04403 5F0F      SUBI	R16,0xFF
    04404 4F1F      SBCI	R17,0xFF
    04405 90D9      LD	R13,Y+
    04406 9508      RET
mod16u:
    04407 9468      BSET	6
    04408 C001      RJMP	xdiv16u
div16u:
    04409 94E8      BCLR	6
xdiv16u:
    0440A 92EA      ST	-Y,R14
    0440B 92FA      ST	-Y,R15
    0440C 938A      ST	-Y,R24
    0440D 24EE      CLR	R14
    0440E 24FF      CLR	R15
    0440F E180      LDI	R24,0x10
    04410 0F00      LSL	R16
    04411 1F11      ROL	R17
    04412 1CEE      ROL	R14
    04413 1CFF      ROL	R15
    04414 16E2      CP	R14,R18
    04415 06F3      CPC	R15,R19
    04416 F018      BCS	0x441A
    04417 1AE2      SUB	R14,R18
    04418 0AF3      SBC	R15,R19
    04419 9503      INC	R16
    0441A 958A      DEC	R24
    0441B F7A1      BNE	0x4410
    0441C F416      BRTC	0x441F
    0441D 2D0E      MOV	R16,R14
    0441E 2D1F      MOV	R17,R15
    0441F 9189      LD	R24,Y+
    04420 90F9      LD	R15,Y+
    04421 90E9      LD	R14,Y+
    04422 9508      RET
div32u:
    04423 94E8      BCLR	6
    04424 C001      RJMP	0x4426
mod32u:
    04425 9468      BSET	6
    04426 D030      RCALL	long_div_prolog
    04427 24CC      CLR	R12
    04428 C009      RJMP	0x4432
div32s:
    04429 94E8      BCLR	6
    0442A C001      RJMP	0x442C
mod32s:
    0442B 9468      BSET	6
    0442C D02A      RCALL	long_div_prolog
    0442D FD37      SBRC	R19,7
    0442E 940E 455A CALL	neg32
    04430 FDB7      SBRC	R27,7
    04431 D052      RCALL	neg_R24_R27
    04432 2477      CLR	R7
    04433 2488      CLR	R8
    04434 2499      CLR	R9
    04435 24AA      CLR	R10
    04436 24BB      CLR	R11
    04437 D042      RCALL	tst_R16_R19
    04438 F0C1      BEQ	0x4451
    04439 D045      RCALL	tst_R24_R27
    0443A F0B1      BEQ	0x4451
    0443B E2E8      LDI	R30,0x28
    0443C 0F00      LSL	R16
    0443D 1F11      ROL	R17
    0443E 1F22      ROL	R18
    0443F 1F33      ROL	R19
    04440 1C77      ROL	R7
    04441 1C88      ROL	R8
    04442 1C99      ROL	R9
    04443 1CAA      ROL	R10
    04444 1CBB      ROL	R11
    04445 1688      CP	R8,R24
    04446 0699      CPC	R9,R25
    04447 06AA      CPC	R10,R26
    04448 06BB      CPC	R11,R27
    04449 F028      BCS	0x444F
    0444A 1A88      SUB	R8,R24
    0444B 0A99      SBC	R9,R25
    0444C 0AAA      SBC	R10,R26
    0444D 0ABB      SBC	R11,R27
    0444E 9503      INC	R16
    0444F 95EA      DEC	R30
    04450 F759      BNE	0x443C
    04451 F426      BRTC	0x4456
    04452 2D08      MOV	R16,R8
    04453 2D19      MOV	R17,R9
    04454 2D2A      MOV	R18,R10
    04455 2D3B      MOV	R19,R11
    04456 C013      RJMP	long_div_epilog
long_div_prolog:
    04457 927A      ST	-Y,R7
    04458 928A      ST	-Y,R8
    04459 929A      ST	-Y,R9
    0445A 92AA      ST	-Y,R10
    0445B 92BA      ST	-Y,R11
    0445C 92CA      ST	-Y,R12
    0445D 93EA      ST	-Y,R30
    0445E 938A      ST	-Y,R24
    0445F 939A      ST	-Y,R25
    04460 93AA      ST	-Y,R26
    04461 93BA      ST	-Y,R27
    04462 858B      LDD	R24,Y+11
    04463 859C      LDD	R25,Y+12
    04464 85AD      LDD	R26,Y+13
    04465 85BE      LDD	R27,Y+14
    04466 2EC3      MOV	R12,R19
    04467 F00E      BRTS	0x4469
    04468 26CB      EOR	R12,R27
    04469 9508      RET
long_div_epilog:
    0446A FCC7      SBRC	R12,7
    0446B 940E 455A CALL	neg32
    0446D 91B9      LD	R27,Y+
    0446E 91A9      LD	R26,Y+
    0446F 9199      LD	R25,Y+
    04470 9189      LD	R24,Y+
    04471 91E9      LD	R30,Y+
    04472 90C9      LD	R12,Y+
    04473 90B9      LD	R11,Y+
    04474 90A9      LD	R10,Y+
    04475 9099      LD	R9,Y+
    04476 9089      LD	R8,Y+
    04477 9079      LD	R7,Y+
    04478 9624      ADIW	R28,4
    04479 9508      RET
tst_R16_R19:
    0447A 2FE0      MOV	R30,R16
    0447B 2BE1      OR	R30,R17
    0447C 2BE2      OR	R30,R18
    0447D 2BE3      OR	R30,R19
    0447E 9508      RET
tst_R24_R27:
    0447F 2FE8      MOV	R30,R24
    04480 2BE9      OR	R30,R25
    04481 2BEA      OR	R30,R26
    04482 2BEB      OR	R30,R27
    04483 9508      RET
neg_R24_R27:
    04484 9580      COM	R24
    04485 9590      COM	R25
    04486 95A0      COM	R26
    04487 95B0      COM	R27
    04488 5F8F      SUBI	R24,0xFF
    04489 4F9F      SBCI	R25,0xFF
    0448A 4FAF      SBCI	R26,0xFF
    0448B 4FBF      SBCI	R27,0xFF
    0448C 9508      RET
mod8u:
    0448D 9468      BSET	6
    0448E C001      RJMP	xdiv8u
div8u:
    0448F 94E8      BCLR	6
xdiv8u:
    04490 932A      ST	-Y,R18
    04491 92FA      ST	-Y,R15
    04492 92EA      ST	-Y,R14
    04493 24FF      CLR	R15
    04494 24EE      CLR	R14
    04495 E120      LDI	R18,0x10
    04496 0F00      LSL	R16
    04497 1CFF      ROL	R15
    04498 1CEE      ROL	R14
    04499 16E1      CP	R14,R17
    0449A F010      BCS	0x449D
    0449B 1AE1      SUB	R14,R17
    0449C 9503      INC	R16
    0449D 952A      DEC	R18
    0449E F7B9      BNE	0x4496
    0449F F40E      BRTC	0x44A1
    044A0 2D0E      MOV	R16,R14
    044A1 90E9      LD	R14,Y+
    044A2 90F9      LD	R15,Y+
    044A3 9129      LD	R18,Y+
    044A4 9508      RET
empy16s:
    044A5 920A      ST	-Y,R0
    044A6 921A      ST	-Y,R1
    044A7 938A      ST	-Y,R24
    044A8 939A      ST	-Y,R25
    044A9 9F02      MUL	R16,R18
    044AA 01C0      MOVW	R24,R0
    044AB 9F12      MUL	R17,R18
    044AC 0D90      ADD	R25,R0
    044AD 9F03      MUL	R16,R19
    044AE 0D90      ADD	R25,R0
    044AF 018C      MOVW	R16,R24
    044B0 9199      LD	R25,Y+
    044B1 9189      LD	R24,Y+
    044B2 9019      LD	R1,Y+
    044B3 9009      LD	R0,Y+
    044B4 9508      RET
empy32s|empy32u:
    044B5 940E 4563 CALL	long_prolog
    044B7 927A      ST	-Y,R7
    044B8 940E 457C CALL	tstzero1
    044BA F159      BEQ	0x44E6
    044BB 2477      CLR	R7
    044BC 940E 4582 CALL	tstzero2
    044BE F419      BNE	0x44C2
    044BF 018C      MOVW	R16,R24
    044C0 019D      MOVW	R18,R26
    044C1 C024      RJMP	0x44E6
    044C2 920A      ST	-Y,R0
    044C3 921A      ST	-Y,R1
    044C4 9F08      MUL	R16,R24
    044C5 2CB0      MOV	R11,R0
    044C6 2CA1      MOV	R10,R1
    044C7 9F28      MUL	R18,R24
    044C8 2C90      MOV	R9,R0
    044C9 2C81      MOV	R8,R1
    044CA 9F18      MUL	R17,R24
    044CB 0CA0      ADD	R10,R0
    044CC 1C91      ADC	R9,R1
    044CD 1C87      ADC	R8,R7
    044CE 9F09      MUL	R16,R25
    044CF 0CA0      ADD	R10,R0
    044D0 1C91      ADC	R9,R1
    044D1 1C87      ADC	R8,R7
    044D2 9F19      MUL	R17,R25
    044D3 0C90      ADD	R9,R0
    044D4 1C81      ADC	R8,R1
    044D5 9F0A      MUL	R16,R26
    044D6 0C90      ADD	R9,R0
    044D7 1C81      ADC	R8,R1
    044D8 9F38      MUL	R19,R24
    044D9 0C80      ADD	R8,R0
    044DA 9F29      MUL	R18,R25
    044DB 0C80      ADD	R8,R0
    044DC 9F1A      MUL	R17,R26
    044DD 0C80      ADD	R8,R0
    044DE 9F0B      MUL	R16,R27
    044DF 0C80      ADD	R8,R0
    044E0 9019      LD	R1,Y+
    044E1 9009      LD	R0,Y+
    044E2 2D0B      MOV	R16,R11
    044E3 2D1A      MOV	R17,R10
    044E4 2D29      MOV	R18,R9
    044E5 2D38      MOV	R19,R8
    044E6 9079      LD	R7,Y+
    044E7 940C 4571 JMP	long_epilog
pop_xgset00FC:
    044E9 90A9      LD	R10,Y+
    044EA 90B9      LD	R11,Y+
    044EB 90C9      LD	R12,Y+
    044EC 90D9      LD	R13,Y+
    044ED 90E9      LD	R14,Y+
    044EE 90F9      LD	R15,Y+
    044EF 9508      RET
pop_xgset30FC:
    044F0 90A9      LD	R10,Y+
    044F1 90B9      LD	R11,Y+
    044F2 90C9      LD	R12,Y+
    044F3 90D9      LD	R13,Y+
    044F4 90E9      LD	R14,Y+
    044F5 90F9      LD	R15,Y+
    044F6 9149      LD	R20,Y+
    044F7 9159      LD	R21,Y+
    044F8 9508      RET
pop_xgsetF0FC:
    044F9 90A9      LD	R10,Y+
    044FA 90B9      LD	R11,Y+
    044FB 90C9      LD	R12,Y+
    044FC 90D9      LD	R13,Y+
    044FD 90E9      LD	R14,Y+
    044FE 90F9      LD	R15,Y+
    044FF 9149      LD	R20,Y+
    04500 9159      LD	R21,Y+
    04501 9169      LD	R22,Y+
    04502 9179      LD	R23,Y+
    04503 9508      RET
push_xgsetF0FC:
    04504 937A      ST	-Y,R23
    04505 936A      ST	-Y,R22
push_xgset30FC:
    04506 935A      ST	-Y,R21
    04507 934A      ST	-Y,R20
push_xgset00FC:
    04508 92FA      ST	-Y,R15
    04509 92EA      ST	-Y,R14
push_xgset003C:
    0450A 92DA      ST	-Y,R13
    0450B 92CA      ST	-Y,R12
    0450C 92BA      ST	-Y,R11
    0450D 92AA      ST	-Y,R10
    0450E 9508      RET
push_xgset300C:
    0450F 935A      ST	-Y,R21
    04510 934A      ST	-Y,R20
    04511 92BA      ST	-Y,R11
    04512 92AA      ST	-Y,R10
    04513 9508      RET
pop_xgset300C:
    04514 90A9      LD	R10,Y+
    04515 90B9      LD	R11,Y+
    04516 9149      LD	R20,Y+
    04517 9159      LD	R21,Y+
    04518 9508      RET
push_xgsetF000:
    04519 937A      ST	-Y,R23
    0451A 936A      ST	-Y,R22
    0451B 935A      ST	-Y,R21
    0451C 934A      ST	-Y,R20
    0451D 9508      RET
pop_xgsetF000:
    0451E 9149      LD	R20,Y+
    0451F 9159      LD	R21,Y+
    04520 9169      LD	R22,Y+
    04521 9179      LD	R23,Y+
    04522 9508      RET
push_xgsetF00C:
    04523 937A      ST	-Y,R23
    04524 936A      ST	-Y,R22
    04525 935A      ST	-Y,R21
    04526 934A      ST	-Y,R20
    04527 92BA      ST	-Y,R11
    04528 92AA      ST	-Y,R10
    04529 9508      RET
pop_xgsetF00C:
    0452A 90A9      LD	R10,Y+
    0452B 90B9      LD	R11,Y+
    0452C 9149      LD	R20,Y+
    0452D 9159      LD	R21,Y+
    0452E 9169      LD	R22,Y+
    0452F 9179      LD	R23,Y+
    04530 9508      RET
push_xgset303C:
    04531 935A      ST	-Y,R21
    04532 934A      ST	-Y,R20
    04533 92DA      ST	-Y,R13
    04534 92CA      ST	-Y,R12
    04535 92BA      ST	-Y,R11
    04536 92AA      ST	-Y,R10
    04537 9508      RET
pop_xgset303C:
    04538 90A9      LD	R10,Y+
    04539 90B9      LD	R11,Y+
    0453A 90C9      LD	R12,Y+
    0453B 90D9      LD	R13,Y+
    0453C 9149      LD	R20,Y+
    0453D 9159      LD	R21,Y+
    0453E 9508      RET
push_xgsetF03C:
    0453F 937A      ST	-Y,R23
    04540 936A      ST	-Y,R22
    04541 935A      ST	-Y,R21
    04542 934A      ST	-Y,R20
    04543 92DA      ST	-Y,R13
    04544 92CA      ST	-Y,R12
    04545 92BA      ST	-Y,R11
    04546 92AA      ST	-Y,R10
    04547 9508      RET
pop_xgsetF03C:
    04548 90A9      LD	R10,Y+
    04549 90B9      LD	R11,Y+
    0454A 90C9      LD	R12,Y+
    0454B 90D9      LD	R13,Y+
    0454C 9149      LD	R20,Y+
    0454D 9159      LD	R21,Y+
    0454E 9169      LD	R22,Y+
    0454F 9179      LD	R23,Y+
    04550 9508      RET
xicallx:
    04551 920A      ST	-Y,R0
    04552 95D8      ELPM
    04553 920A      ST	-Y,R0
    04554 9631      ADIW	R30,1
    04555 95D8      ELPM
    04556 2DF0      MOV	R31,R0
    04557 91E9      LD	R30,Y+
    04558 9009      LD	R0,Y+
    04559 9409      IJMP
neg32:
    0455A 9500      COM	R16
    0455B 9510      COM	R17
    0455C 9520      COM	R18
    0455D 9530      COM	R19
    0455E 5F0F      SUBI	R16,0xFF
    0455F 4F1F      SBCI	R17,0xFF
    04560 4F2F      SBCI	R18,0xFF
    04561 4F3F      SBCI	R19,0xFF
    04562 9508      RET
long_prolog:
    04563 928A      ST	-Y,R8
    04564 929A      ST	-Y,R9
    04565 92AA      ST	-Y,R10
    04566 92BA      ST	-Y,R11
    04567 93EA      ST	-Y,R30
    04568 938A      ST	-Y,R24
    04569 939A      ST	-Y,R25
    0456A 93AA      ST	-Y,R26
    0456B 93BA      ST	-Y,R27
    0456C 8589      LDD	R24,Y+9
    0456D 859A      LDD	R25,Y+10
    0456E 85AB      LDD	R26,Y+11
    0456F 85BC      LDD	R27,Y+12
    04570 9508      RET
long_epilog:
    04571 91B9      LD	R27,Y+
    04572 91A9      LD	R26,Y+
    04573 9199      LD	R25,Y+
    04574 9189      LD	R24,Y+
    04575 91E9      LD	R30,Y+
    04576 90B9      LD	R11,Y+
    04577 90A9      LD	R10,Y+
    04578 9099      LD	R9,Y+
    04579 9089      LD	R8,Y+
    0457A 9624      ADIW	R28,4
    0457B 9508      RET
tstzero1:
    0457C 27EE      CLR	R30
    0457D 2BE0      OR	R30,R16
    0457E 2BE1      OR	R30,R17
    0457F 2BE2      OR	R30,R18
    04580 2BE3      OR	R30,R19
    04581 9508      RET
tstzero2:
    04582 27EE      CLR	R30
    04583 2BE8      OR	R30,R24
    04584 2BE9      OR	R30,R25
    04585 2BEA      OR	R30,R26
    04586 2BEB      OR	R30,R27
    04587 9508      RET
lsl8:
    04588 2311      TST	R17
    04589 F019      BEQ	0x458D
    0458A 0F00      LSL	R16
    0458B 951A      DEC	R17
    0458C CFFB      RJMP	lsl8
    0458D 9508      RET
lsr32:
    0458E 920F      PUSH	R0
    0458F 9009      LD	R0,Y+
    04590 2000      TST	R0
    04591 F031      BEQ	0x4598
    04592 9536      LSR	R19
    04593 9527      ROR	R18
    04594 9517      ROR	R17
    04595 9507      ROR	R16
    04596 940A      DEC	R0
    04597 CFF8      RJMP	0x4590
    04598 900F      POP	R0
    04599 9508      RET
_EEPROMread:
    0459A 99E1      SBIC	0x1C,1
    0459B CFFE      RJMP	_EEPROMread
    0459C BB1F      OUT	0x1F,R17
    0459D BB0E      OUT	0x1E,R16
    0459E 9AE0      SBI	0x1C,0
    0459F B30D      IN	R16,0x1D
    045A0 9508      RET
_EEPROMwrite:
    045A1 92AA      ST	-Y,R10
    045A2 99E1      SBIC	0x1C,1
    045A3 CFFE      RJMP	0x45A2
    045A4 BB1F      OUT	0x1F,R17
    045A5 BB0E      OUT	0x1E,R16
    045A6 BB2D      OUT	0x1D,R18
    045A7 B6AF      IN	R10,0x3F
    045A8 94F8      BCLR	7
    045A9 9AE2      SBI	0x1C,2
    045AA 9AE1      SBI	0x1C,1
    045AB BEAF      OUT	0x3F,R10
    045AC 2700      CLR	R16
    045AD 2711      CLR	R17
    045AE 90A9      LD	R10,Y+
    045AF 9508      RET
_EEPROMReadBytes:
    045B0 940E 453F CALL	push_xgsetF03C
    045B2 0169      MOVW	R12,R18
    045B3 01B8      MOVW	R22,R16
    045B4 84A8      LDD	R10,Y+8
    045B5 84B9      LDD	R11,Y+9
    045B6 01A6      MOVW	R20,R12
    045B7 C009      RJMP	0x45C1
    045B8 018B      MOVW	R16,R22
    045B9 940E 459A CALL	_EEPROMread
    045BB 01FA      MOVW	R30,R20
    045BC 8300      ST	Z,R16
    045BD 5F6F      SUBI	R22,0xFF
    045BE 4F7F      SBCI	R23,0xFF
    045BF 5F4F      SUBI	R20,0xFF
    045C0 4F5F      SBCI	R21,0xFF
    045C1 0115      MOVW	R2,R10
    045C2 01C1      MOVW	R24,R2
    045C3 9701      SBIW	R24,1
    045C4 015C      MOVW	R10,R24
    045C5 2022      TST	R2
    045C6 F789      BNE	0x45B8
    045C7 2033      TST	R3
    045C8 F779      BNE	0x45B8
    045C9 940C 4548 JMP	pop_xgsetF03C
_EEPROMWriteBytes:
    045CB 940E 453F CALL	push_xgsetF03C
    045CD 0169      MOVW	R12,R18
    045CE 01B8      MOVW	R22,R16
    045CF 84A8      LDD	R10,Y+8
    045D0 84B9      LDD	R11,Y+9
    045D1 01A6      MOVW	R20,R12
    045D2 C009      RJMP	0x45DC
    045D3 01FA      MOVW	R30,R20
    045D4 8120      LD	R18,Z
    045D5 018B      MOVW	R16,R22
    045D6 940E 45A1 CALL	_EEPROMwrite
    045D8 5F6F      SUBI	R22,0xFF
    045D9 4F7F      SBCI	R23,0xFF
    045DA 5F4F      SUBI	R20,0xFF
    045DB 4F5F      SBCI	R21,0xFF
    045DC 0115      MOVW	R2,R10
    045DD 01C1      MOVW	R24,R2
    045DE 9701      SBIW	R24,1
    045DF 015C      MOVW	R10,R24
    045E0 2022      TST	R2
    045E1 F789      BNE	0x45D3
    045E2 2033      TST	R3
    045E3 F779      BNE	0x45D3
    045E4 940C 4548 JMP	pop_xgsetF03C
